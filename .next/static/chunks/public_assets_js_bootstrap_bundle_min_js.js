"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["public_assets_js_bootstrap_bundle_min_js"],{

/***/ "./public/assets/js/bootstrap.bundle.min.js":
/*!**************************************************!*\
  !*** ./public/assets/js/bootstrap.bundle.min.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*!\n  * Bootstrap v5.0.2 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */ \n!function(t, e) {\n     true ? module.exports = e() : 0;\n}(void 0, function() {\n    \"use strict\";\n    const t = {\n        find: function(t) {\n            let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document.documentElement;\n            return [].concat(...Element.prototype.querySelectorAll.call(e, t));\n        },\n        findOne: function(t) {\n            let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document.documentElement;\n            return Element.prototype.querySelector.call(e, t);\n        },\n        children: (t, e)=>[].concat(...t.children).filter((t)=>t.matches(e)),\n        parents (t, e) {\n            const i = [];\n            let n = t.parentNode;\n            for(; n && n.nodeType === Node.ELEMENT_NODE && 3 !== n.nodeType;)n.matches(e) && i.push(n), n = n.parentNode;\n            return i;\n        },\n        prev (t, e) {\n            let i = t.previousElementSibling;\n            for(; i;){\n                if (i.matches(e)) return [\n                    i\n                ];\n                i = i.previousElementSibling;\n            }\n            return [];\n        },\n        next (t, e) {\n            let i = t.nextElementSibling;\n            for(; i;){\n                if (i.matches(e)) return [\n                    i\n                ];\n                i = i.nextElementSibling;\n            }\n            return [];\n        }\n    }, e = (t)=>{\n        do {\n            t += Math.floor(1e6 * Math.random());\n        }while (document.getElementById(t));\n        return t;\n    }, i = (t)=>{\n        let e = t.getAttribute(\"data-bs-target\");\n        if (!e || \"#\" === e) {\n            let i = t.getAttribute(\"href\");\n            if (!i || !i.includes(\"#\") && !i.startsWith(\".\")) return null;\n            i.includes(\"#\") && !i.startsWith(\"#\") && (i = \"#\" + i.split(\"#\")[1]), e = i && \"#\" !== i ? i.trim() : null;\n        }\n        return e;\n    }, n = (t)=>{\n        const e = i(t);\n        return e && document.querySelector(e) ? e : null;\n    }, s = (t)=>{\n        const e = i(t);\n        return e ? document.querySelector(e) : null;\n    }, o = (t)=>{\n        t.dispatchEvent(new Event(\"transitionend\"));\n    }, r = (t)=>!(!t || \"object\" != typeof t) && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType), a = (e)=>r(e) ? e.jquery ? e[0] : e : \"string\" == typeof e && e.length > 0 ? t.findOne(e) : null, l = (t, e, i)=>{\n        Object.keys(i).forEach((n)=>{\n            const s = i[n], o = e[n], a = o && r(o) ? \"element\" : null == (l = o) ? \"\" + l : ({}).toString.call(l).match(/\\s([a-z]+)/i)[1].toLowerCase();\n            var l;\n            if (!new RegExp(s).test(a)) throw new TypeError(\"\".concat(t.toUpperCase(), ': Option \"').concat(n, '\" provided type \"').concat(a, '\" but expected type \"').concat(s, '\".'));\n        });\n    }, c = (t)=>!(!r(t) || 0 === t.getClientRects().length) && \"visible\" === getComputedStyle(t).getPropertyValue(\"visibility\"), h = (t)=>!t || t.nodeType !== Node.ELEMENT_NODE || !!t.classList.contains(\"disabled\") || (void 0 !== t.disabled ? t.disabled : t.hasAttribute(\"disabled\") && \"false\" !== t.getAttribute(\"disabled\")), d = (t)=>{\n        if (!document.documentElement.attachShadow) return null;\n        if (\"function\" == typeof t.getRootNode) {\n            const e = t.getRootNode();\n            return e instanceof ShadowRoot ? e : null;\n        }\n        return t instanceof ShadowRoot ? t : t.parentNode ? d(t.parentNode) : null;\n    }, u = ()=>{}, f = (t)=>t.offsetHeight, p = ()=>{\n        const { jQuery: t  } = window;\n        return t && !document.body.hasAttribute(\"data-bs-no-jquery\") ? t : null;\n    }, m = [], g = ()=>\"rtl\" === document.documentElement.dir, _ = (t)=>{\n        var e;\n        e = ()=>{\n            const e = p();\n            if (e) {\n                const i = t.NAME, n = e.fn[i];\n                e.fn[i] = t.jQueryInterface, e.fn[i].Constructor = t, e.fn[i].noConflict = ()=>(e.fn[i] = n, t.jQueryInterface);\n            }\n        }, \"loading\" === document.readyState ? (m.length || document.addEventListener(\"DOMContentLoaded\", ()=>{\n            m.forEach((t)=>t());\n        }), m.push(e)) : e();\n    }, b = (t)=>{\n        \"function\" == typeof t && t();\n    }, v = function(t, e) {\n        let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;\n        if (!i) return void b(t);\n        const n = ((t)=>{\n            if (!t) return 0;\n            let { transitionDuration: e , transitionDelay: i  } = window.getComputedStyle(t);\n            const n = Number.parseFloat(e), s = Number.parseFloat(i);\n            return n || s ? (e = e.split(\",\")[0], i = i.split(\",\")[0], 1e3 * (Number.parseFloat(e) + Number.parseFloat(i))) : 0;\n        })(e) + 5;\n        let s = !1;\n        const r = (param)=>{\n            let { target: i  } = param;\n            i === e && (s = !0, e.removeEventListener(\"transitionend\", r), b(t));\n        };\n        e.addEventListener(\"transitionend\", r), setTimeout(()=>{\n            s || o(e);\n        }, n);\n    }, y = (t, e, i, n)=>{\n        let s = t.indexOf(e);\n        if (-1 === s) return t[!i && n ? t.length - 1 : 0];\n        const o = t.length;\n        return s += i ? 1 : -1, n && (s = (s + o) % o), t[Math.max(0, Math.min(s, o - 1))];\n    }, w = /[^.]*(?=\\..*)\\.|.*/, E = /\\..*/, A = /::\\d+$/, T = {};\n    let O = 1;\n    const C = {\n        mouseenter: \"mouseover\",\n        mouseleave: \"mouseout\"\n    }, k = /^(mouseenter|mouseleave)/i, L = new Set([\n        \"click\",\n        \"dblclick\",\n        \"mouseup\",\n        \"mousedown\",\n        \"contextmenu\",\n        \"mousewheel\",\n        \"DOMMouseScroll\",\n        \"mouseover\",\n        \"mouseout\",\n        \"mousemove\",\n        \"selectstart\",\n        \"selectend\",\n        \"keydown\",\n        \"keypress\",\n        \"keyup\",\n        \"orientationchange\",\n        \"touchstart\",\n        \"touchmove\",\n        \"touchend\",\n        \"touchcancel\",\n        \"pointerdown\",\n        \"pointermove\",\n        \"pointerup\",\n        \"pointerleave\",\n        \"pointercancel\",\n        \"gesturestart\",\n        \"gesturechange\",\n        \"gestureend\",\n        \"focus\",\n        \"blur\",\n        \"change\",\n        \"reset\",\n        \"select\",\n        \"submit\",\n        \"focusin\",\n        \"focusout\",\n        \"load\",\n        \"unload\",\n        \"beforeunload\",\n        \"resize\",\n        \"move\",\n        \"DOMContentLoaded\",\n        \"readystatechange\",\n        \"error\",\n        \"abort\",\n        \"scroll\"\n    ]);\n    function x(t, e) {\n        return e && \"\".concat(e, \"::\").concat(O++) || t.uidEvent || O++;\n    }\n    function D(t) {\n        const e = x(t);\n        return t.uidEvent = e, T[e] = T[e] || {}, T[e];\n    }\n    function S(t, e) {\n        let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        const n = Object.keys(t);\n        for(let s = 0, o = n.length; s < o; s++){\n            const o1 = t[n[s]];\n            if (o1.originalHandler === e && o1.delegationSelector === i) return o1;\n        }\n        return null;\n    }\n    function I(t, e, i) {\n        const n = \"string\" == typeof e, s = n ? i : e;\n        let o = M(t);\n        return L.has(o) || (o = t), [\n            n,\n            s,\n            o\n        ];\n    }\n    function N(t, e, i, n, s) {\n        if (\"string\" != typeof e || !t) return;\n        if (i || (i = n, n = null), k.test(e)) {\n            const t1 = (t)=>function(e) {\n                    if (!e.relatedTarget || e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget)) return t.call(this, e);\n                };\n            n ? n = t1(n) : i = t1(i);\n        }\n        const [o, r, a] = I(e, i, n), l = D(t), c = l[a] || (l[a] = {}), h = S(c, r, o ? i : null);\n        if (h) return void (h.oneOff = h.oneOff && s);\n        const d = x(r, e.replace(w, \"\")), u = o ? function(t, e, i) {\n            return function n(s) {\n                const o = t.querySelectorAll(e);\n                for(let { target: r  } = s; r && r !== this; r = r.parentNode)for(let a = o.length; a--;)if (o[a] === r) return s.delegateTarget = r, n.oneOff && P.off(t, s.type, e, i), i.apply(r, [\n                    s\n                ]);\n                return null;\n            };\n        }(t, i, n) : function(t, e) {\n            return function i(n) {\n                return n.delegateTarget = t, i.oneOff && P.off(t, n.type, e), e.apply(t, [\n                    n\n                ]);\n            };\n        }(t, i);\n        u.delegationSelector = o ? i : null, u.originalHandler = r, u.oneOff = s, u.uidEvent = d, c[d] = u, t.addEventListener(a, u, o);\n    }\n    function j(t, e, i, n, s) {\n        const o = S(e[i], n, s);\n        o && (t.removeEventListener(i, o, Boolean(s)), delete e[i][o.uidEvent]);\n    }\n    function M(t) {\n        return t = t.replace(E, \"\"), C[t] || t;\n    }\n    const P = {\n        on (t, e, i, n) {\n            N(t, e, i, n, !1);\n        },\n        one (t, e, i, n) {\n            N(t, e, i, n, !0);\n        },\n        off (t, e, i, n) {\n            if (\"string\" != typeof e || !t) return;\n            const [s, o, r] = I(e, i, n), a = r !== e, l = D(t), c = e.startsWith(\".\");\n            if (void 0 !== o) {\n                if (!l || !l[r]) return;\n                return void j(t, l, r, o, s ? i : null);\n            }\n            c && Object.keys(l).forEach((i)=>{\n                !function(t, e, i, n) {\n                    const s = e[i] || {};\n                    Object.keys(s).forEach((o)=>{\n                        if (o.includes(n)) {\n                            const n1 = s[o];\n                            j(t, e, i, n1.originalHandler, n1.delegationSelector);\n                        }\n                    });\n                }(t, l, i, e.slice(1));\n            });\n            const h = l[r] || {};\n            Object.keys(h).forEach((i)=>{\n                const n = i.replace(A, \"\");\n                if (!a || e.includes(n)) {\n                    const e1 = h[i];\n                    j(t, l, r, e1.originalHandler, e1.delegationSelector);\n                }\n            });\n        },\n        trigger (t, e, i) {\n            if (\"string\" != typeof e || !t) return null;\n            const n = p(), s = M(e), o = e !== s, r = L.has(s);\n            let a, l = !0, c = !0, h = !1, d = null;\n            return o && n && (a = n.Event(e, i), n(t).trigger(a), l = !a.isPropagationStopped(), c = !a.isImmediatePropagationStopped(), h = a.isDefaultPrevented()), r ? (d = document.createEvent(\"HTMLEvents\"), d.initEvent(s, l, !0)) : d = new CustomEvent(e, {\n                bubbles: l,\n                cancelable: !0\n            }), void 0 !== i && Object.keys(i).forEach((t)=>{\n                Object.defineProperty(d, t, {\n                    get: ()=>i[t]\n                });\n            }), h && d.preventDefault(), c && t.dispatchEvent(d), d.defaultPrevented && void 0 !== a && a.preventDefault(), d;\n        }\n    }, H = new Map;\n    var R = {\n        set (t, e, i) {\n            H.has(t) || H.set(t, new Map);\n            const n = H.get(t);\n            n.has(e) || 0 === n.size ? n.set(e, i) : console.error(\"Bootstrap doesn't allow more than one instance per element. Bound instance: \".concat(Array.from(n.keys())[0], \".\"));\n        },\n        get: (t, e)=>H.has(t) && H.get(t).get(e) || null,\n        remove (t, e) {\n            if (!H.has(t)) return;\n            const i = H.get(t);\n            i.delete(e), 0 === i.size && H.delete(t);\n        }\n    };\n    class B {\n        dispose() {\n            R.remove(this._element, this.constructor.DATA_KEY), P.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach((t)=>{\n                this[t] = null;\n            });\n        }\n        _queueCallback(t, e) {\n            let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;\n            v(t, e, i);\n        }\n        static getInstance(t) {\n            return R.get(t, this.DATA_KEY);\n        }\n        static getOrCreateInstance(t) {\n            let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return this.getInstance(t) || new this(t, \"object\" == typeof e ? e : null);\n        }\n        static get VERSION() {\n            return \"5.0.2\";\n        }\n        static get NAME() {\n            throw new Error('You have to implement the static method \"NAME\", for each component!');\n        }\n        static get DATA_KEY() {\n            return \"bs.\" + this.NAME;\n        }\n        static get EVENT_KEY() {\n            return \".\" + this.DATA_KEY;\n        }\n        constructor(t){\n            (t = a(t)) && (this._element = t, R.set(this._element, this.constructor.DATA_KEY, this));\n        }\n    }\n    class W extends B {\n        static get NAME() {\n            return \"alert\";\n        }\n        close(t) {\n            const e = t ? this._getRootElement(t) : this._element, i = this._triggerCloseEvent(e);\n            null === i || i.defaultPrevented || this._removeElement(e);\n        }\n        _getRootElement(t) {\n            return s(t) || t.closest(\".alert\");\n        }\n        _triggerCloseEvent(t) {\n            return P.trigger(t, \"close.bs.alert\");\n        }\n        _removeElement(t) {\n            t.classList.remove(\"show\");\n            const e = t.classList.contains(\"fade\");\n            this._queueCallback(()=>this._destroyElement(t), t, e);\n        }\n        _destroyElement(t) {\n            t.remove(), P.trigger(t, \"closed.bs.alert\");\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = W.getOrCreateInstance(this);\n                \"close\" === t && e[t](this);\n            });\n        }\n        static handleDismiss(t) {\n            return function(e) {\n                e && e.preventDefault(), t.close(this);\n            };\n        }\n    }\n    P.on(document, \"click.bs.alert.data-api\", '[data-bs-dismiss=\"alert\"]', W.handleDismiss(new W)), _(W);\n    class q extends B {\n        static get NAME() {\n            return \"button\";\n        }\n        toggle() {\n            this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(\"active\"));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = q.getOrCreateInstance(this);\n                \"toggle\" === t && e[t]();\n            });\n        }\n    }\n    function z(t) {\n        return \"true\" === t || \"false\" !== t && (t === Number(t).toString() ? Number(t) : \"\" === t || \"null\" === t ? null : t);\n    }\n    function $(t) {\n        return t.replace(/[A-Z]/g, (t)=>\"-\" + t.toLowerCase());\n    }\n    P.on(document, \"click.bs.button.data-api\", '[data-bs-toggle=\"button\"]', (t)=>{\n        t.preventDefault();\n        const e = t.target.closest('[data-bs-toggle=\"button\"]');\n        q.getOrCreateInstance(e).toggle();\n    }), _(q);\n    const U = {\n        setDataAttribute (t, e, i) {\n            t.setAttribute(\"data-bs-\" + $(e), i);\n        },\n        removeDataAttribute (t, e) {\n            t.removeAttribute(\"data-bs-\" + $(e));\n        },\n        getDataAttributes (t) {\n            if (!t) return {};\n            const e = {};\n            return Object.keys(t.dataset).filter((t)=>t.startsWith(\"bs\")).forEach((i)=>{\n                let n = i.replace(/^bs/, \"\");\n                n = n.charAt(0).toLowerCase() + n.slice(1, n.length), e[n] = z(t.dataset[i]);\n            }), e;\n        },\n        getDataAttribute: (t, e)=>z(t.getAttribute(\"data-bs-\" + $(e))),\n        offset (t) {\n            const e = t.getBoundingClientRect();\n            return {\n                top: e.top + document.body.scrollTop,\n                left: e.left + document.body.scrollLeft\n            };\n        },\n        position: (t)=>({\n                top: t.offsetTop,\n                left: t.offsetLeft\n            })\n    }, F = {\n        interval: 5e3,\n        keyboard: !0,\n        slide: !1,\n        pause: \"hover\",\n        wrap: !0,\n        touch: !0\n    }, V = {\n        interval: \"(number|boolean)\",\n        keyboard: \"boolean\",\n        slide: \"(boolean|string)\",\n        pause: \"(string|boolean)\",\n        wrap: \"boolean\",\n        touch: \"boolean\"\n    }, K = \"next\", X = \"prev\", Y = \"left\", Q = \"right\", G = {\n        ArrowLeft: Q,\n        ArrowRight: Y\n    };\n    class Z extends B {\n        static get Default() {\n            return F;\n        }\n        static get NAME() {\n            return \"carousel\";\n        }\n        next() {\n            this._slide(K);\n        }\n        nextWhenVisible() {\n            !document.hidden && c(this._element) && this.next();\n        }\n        prev() {\n            this._slide(X);\n        }\n        pause(e) {\n            e || (this._isPaused = !0), t.findOne(\".carousel-item-next, .carousel-item-prev\", this._element) && (o(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n        }\n        cycle(t) {\n            t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n        }\n        to(e) {\n            this._activeElement = t.findOne(\".active.carousel-item\", this._element);\n            const i = this._getItemindex(this._activeElement);\n            if (e > this._items.length - 1 || e < 0) return;\n            if (this._isSliding) return void P.one(this._element, \"slid.bs.carousel\", ()=>this.to(e));\n            if (i === e) return this.pause(), void this.cycle();\n            const n = e > i ? K : X;\n            this._slide(n, this._items[e]);\n        }\n        _getConfig(t) {\n            return t = {\n                ...F,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t ? t : {}\n            }, l(\"carousel\", t, V), t;\n        }\n        _handleSwipe() {\n            const t = Math.abs(this.touchDeltaX);\n            if (t <= 40) return;\n            const e = t / this.touchDeltaX;\n            this.touchDeltaX = 0, e && this._slide(e > 0 ? Q : Y);\n        }\n        _addEventListeners() {\n            this._config.keyboard && P.on(this._element, \"keydown.bs.carousel\", (t)=>this._keydown(t)), \"hover\" === this._config.pause && (P.on(this._element, \"mouseenter.bs.carousel\", (t)=>this.pause(t)), P.on(this._element, \"mouseleave.bs.carousel\", (t)=>this.cycle(t))), this._config.touch && this._touchSupported && this._addTouchEventListeners();\n        }\n        _addTouchEventListeners() {\n            const e = (t)=>{\n                !this._pointerEvent || \"pen\" !== t.pointerType && \"touch\" !== t.pointerType ? this._pointerEvent || (this.touchStartX = t.touches[0].clientX) : this.touchStartX = t.clientX;\n            }, i = (t)=>{\n                this.touchDeltaX = t.touches && t.touches.length > 1 ? 0 : t.touches[0].clientX - this.touchStartX;\n            }, n = (t)=>{\n                !this._pointerEvent || \"pen\" !== t.pointerType && \"touch\" !== t.pointerType || (this.touchDeltaX = t.clientX - this.touchStartX), this._handleSwipe(), \"hover\" === this._config.pause && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout((t)=>this.cycle(t), 500 + this._config.interval));\n            };\n            t.find(\".carousel-item img\", this._element).forEach((t)=>{\n                P.on(t, \"dragstart.bs.carousel\", (t)=>t.preventDefault());\n            }), this._pointerEvent ? (P.on(this._element, \"pointerdown.bs.carousel\", (t)=>e(t)), P.on(this._element, \"pointerup.bs.carousel\", (t)=>n(t)), this._element.classList.add(\"pointer-event\")) : (P.on(this._element, \"touchstart.bs.carousel\", (t)=>e(t)), P.on(this._element, \"touchmove.bs.carousel\", (t)=>i(t)), P.on(this._element, \"touchend.bs.carousel\", (t)=>n(t)));\n        }\n        _keydown(t) {\n            if (/input|textarea/i.test(t.target.tagName)) return;\n            const e = G[t.key];\n            e && (t.preventDefault(), this._slide(e));\n        }\n        _getItemindex(e) {\n            return this._items = e && e.parentNode ? t.find(\".carousel-item\", e.parentNode) : [], this._items.indexOf(e);\n        }\n        _getItemByOrder(t, e) {\n            const i = t === K;\n            return y(this._items, e, i, this._config.wrap);\n        }\n        _triggerSlideEvent(e, i) {\n            const n = this._getItemindex(e), s = this._getItemindex(t.findOne(\".active.carousel-item\", this._element));\n            return P.trigger(this._element, \"slide.bs.carousel\", {\n                relatedTarget: e,\n                direction: i,\n                from: s,\n                to: n\n            });\n        }\n        _setActiveIndicatorElement(e) {\n            if (this._indicatorsElement) {\n                const i = t.findOne(\".active\", this._indicatorsElement);\n                i.classList.remove(\"active\"), i.removeAttribute(\"aria-current\");\n                const n = t.find(\"[data-bs-target]\", this._indicatorsElement);\n                for(let t1 = 0; t1 < n.length; t1++)if (Number.parseInt(n[t1].getAttribute(\"data-bs-slide-to\"), 10) === this._getItemindex(e)) {\n                    n[t1].classList.add(\"active\"), n[t1].setAttribute(\"aria-current\", \"true\");\n                    break;\n                }\n            }\n        }\n        _updateInterval() {\n            const e = this._activeElement || t.findOne(\".active.carousel-item\", this._element);\n            if (!e) return;\n            const i = Number.parseInt(e.getAttribute(\"data-bs-interval\"), 10);\n            i ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = i) : this._config.interval = this._config.defaultInterval || this._config.interval;\n        }\n        _slide(e, i) {\n            const n = this._directionToOrder(e), s = t.findOne(\".active.carousel-item\", this._element), o = this._getItemindex(s), r = i || this._getItemByOrder(n, s), a = this._getItemindex(r), l = Boolean(this._interval), c = n === K, h = c ? \"carousel-item-start\" : \"carousel-item-end\", d = c ? \"carousel-item-next\" : \"carousel-item-prev\", u = this._orderToDirection(n);\n            if (r && r.classList.contains(\"active\")) return void (this._isSliding = !1);\n            if (this._isSliding) return;\n            if (this._triggerSlideEvent(r, u).defaultPrevented) return;\n            if (!s || !r) return;\n            this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(r), this._activeElement = r;\n            const p = ()=>{\n                P.trigger(this._element, \"slid.bs.carousel\", {\n                    relatedTarget: r,\n                    direction: u,\n                    from: o,\n                    to: a\n                });\n            };\n            if (this._element.classList.contains(\"slide\")) {\n                r.classList.add(d), f(r), s.classList.add(h), r.classList.add(h);\n                const t1 = ()=>{\n                    r.classList.remove(h, d), r.classList.add(\"active\"), s.classList.remove(\"active\", d, h), this._isSliding = !1, setTimeout(p, 0);\n                };\n                this._queueCallback(t1, s, !0);\n            } else s.classList.remove(\"active\"), r.classList.add(\"active\"), this._isSliding = !1, p();\n            l && this.cycle();\n        }\n        _directionToOrder(t) {\n            return [\n                Q,\n                Y\n            ].includes(t) ? g() ? t === Y ? X : K : t === Y ? K : X : t;\n        }\n        _orderToDirection(t) {\n            return [\n                K,\n                X\n            ].includes(t) ? g() ? t === X ? Y : Q : t === X ? Q : Y : t;\n        }\n        static carouselInterface(t, e) {\n            const i = Z.getOrCreateInstance(t, e);\n            let { _config: n  } = i;\n            \"object\" == typeof e && (n = {\n                ...n,\n                ...e\n            });\n            const s = \"string\" == typeof e ? e : n.slide;\n            if (\"number\" == typeof e) i.to(e);\n            else if (\"string\" == typeof s) {\n                if (void 0 === i[s]) throw new TypeError('No method named \"'.concat(s, '\"'));\n                i[s]();\n            } else n.interval && n.ride && (i.pause(), i.cycle());\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                Z.carouselInterface(this, t);\n            });\n        }\n        static dataApiClickHandler(t) {\n            const e = s(this);\n            if (!e || !e.classList.contains(\"carousel\")) return;\n            const i = {\n                ...U.getDataAttributes(e),\n                ...U.getDataAttributes(this)\n            }, n = this.getAttribute(\"data-bs-slide-to\");\n            n && (i.interval = !1), Z.carouselInterface(e, i), n && Z.getInstance(e).to(n), t.preventDefault();\n        }\n        constructor(e, i){\n            super(e), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(i), this._indicatorsElement = t.findOne(\".carousel-indicators\", this._element), this._touchSupported = \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent), this._addEventListeners();\n        }\n    }\n    P.on(document, \"click.bs.carousel.data-api\", \"[data-bs-slide], [data-bs-slide-to]\", Z.dataApiClickHandler), P.on(window, \"load.bs.carousel.data-api\", ()=>{\n        const e = t.find('[data-bs-ride=\"carousel\"]');\n        for(let t1 = 0, i = e.length; t1 < i; t1++)Z.carouselInterface(e[t1], Z.getInstance(e[t1]));\n    }), _(Z);\n    const J = {\n        toggle: !0,\n        parent: \"\"\n    }, tt = {\n        toggle: \"boolean\",\n        parent: \"(string|element)\"\n    };\n    class et extends B {\n        static get Default() {\n            return J;\n        }\n        static get NAME() {\n            return \"collapse\";\n        }\n        toggle() {\n            this._element.classList.contains(\"show\") ? this.hide() : this.show();\n        }\n        show() {\n            if (this._isTransitioning || this._element.classList.contains(\"show\")) return;\n            let e, i;\n            this._parent && (e = t.find(\".show, .collapsing\", this._parent).filter((t)=>\"string\" == typeof this._config.parent ? t.getAttribute(\"data-bs-parent\") === this._config.parent : t.classList.contains(\"collapse\")), 0 === e.length && (e = null));\n            const n = t.findOne(this._selector);\n            if (e) {\n                const t1 = e.find((t)=>n !== t);\n                if (i = t1 ? et.getInstance(t1) : null, i && i._isTransitioning) return;\n            }\n            if (P.trigger(this._element, \"show.bs.collapse\").defaultPrevented) return;\n            e && e.forEach((t)=>{\n                n !== t && et.collapseInterface(t, \"hide\"), i || R.set(t, \"bs.collapse\", null);\n            });\n            const s = this._getDimension();\n            this._element.classList.remove(\"collapse\"), this._element.classList.add(\"collapsing\"), this._element.style[s] = 0, this._triggerArray.length && this._triggerArray.forEach((t)=>{\n                t.classList.remove(\"collapsed\"), t.setAttribute(\"aria-expanded\", !0);\n            }), this.setTransitioning(!0);\n            const o = \"scroll\" + (s[0].toUpperCase() + s.slice(1));\n            this._queueCallback(()=>{\n                this._element.classList.remove(\"collapsing\"), this._element.classList.add(\"collapse\", \"show\"), this._element.style[s] = \"\", this.setTransitioning(!1), P.trigger(this._element, \"shown.bs.collapse\");\n            }, this._element, !0), this._element.style[s] = this._element[o] + \"px\";\n        }\n        hide() {\n            if (this._isTransitioning || !this._element.classList.contains(\"show\")) return;\n            if (P.trigger(this._element, \"hide.bs.collapse\").defaultPrevented) return;\n            const t = this._getDimension();\n            this._element.style[t] = this._element.getBoundingClientRect()[t] + \"px\", f(this._element), this._element.classList.add(\"collapsing\"), this._element.classList.remove(\"collapse\", \"show\");\n            const e = this._triggerArray.length;\n            if (e > 0) for(let t1 = 0; t1 < e; t1++){\n                const e1 = this._triggerArray[t1], i = s(e1);\n                i && !i.classList.contains(\"show\") && (e1.classList.add(\"collapsed\"), e1.setAttribute(\"aria-expanded\", !1));\n            }\n            this.setTransitioning(!0), this._element.style[t] = \"\", this._queueCallback(()=>{\n                this.setTransitioning(!1), this._element.classList.remove(\"collapsing\"), this._element.classList.add(\"collapse\"), P.trigger(this._element, \"hidden.bs.collapse\");\n            }, this._element, !0);\n        }\n        setTransitioning(t) {\n            this._isTransitioning = t;\n        }\n        _getConfig(t) {\n            return (t = {\n                ...J,\n                ...t\n            }).toggle = Boolean(t.toggle), l(\"collapse\", t, tt), t;\n        }\n        _getDimension() {\n            return this._element.classList.contains(\"width\") ? \"width\" : \"height\";\n        }\n        _getParent() {\n            let { parent: e  } = this._config;\n            e = a(e);\n            const i = '[data-bs-toggle=\"collapse\"][data-bs-parent=\"'.concat(e, '\"]');\n            return t.find(i, e).forEach((t)=>{\n                const e = s(t);\n                this._addAriaAndCollapsedClass(e, [\n                    t\n                ]);\n            }), e;\n        }\n        _addAriaAndCollapsedClass(t, e) {\n            if (!t || !e.length) return;\n            const i = t.classList.contains(\"show\");\n            e.forEach((t)=>{\n                i ? t.classList.remove(\"collapsed\") : t.classList.add(\"collapsed\"), t.setAttribute(\"aria-expanded\", i);\n            });\n        }\n        static collapseInterface(t, e) {\n            let i = et.getInstance(t);\n            const n = {\n                ...J,\n                ...U.getDataAttributes(t),\n                ...\"object\" == typeof e && e ? e : {}\n            };\n            if (!i && n.toggle && \"string\" == typeof e && /show|hide/.test(e) && (n.toggle = !1), i || (i = new et(t, n)), \"string\" == typeof e) {\n                if (void 0 === i[e]) throw new TypeError('No method named \"'.concat(e, '\"'));\n                i[e]();\n            }\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                et.collapseInterface(this, t);\n            });\n        }\n        constructor(e, i){\n            super(e), this._isTransitioning = !1, this._config = this._getConfig(i), this._triggerArray = t.find('[data-bs-toggle=\"collapse\"][href=\"#'.concat(this._element.id, '\"],[data-bs-toggle=\"collapse\"][data-bs-target=\"#').concat(this._element.id, '\"]'));\n            const s = t.find('[data-bs-toggle=\"collapse\"]');\n            for(let e1 = 0, i1 = s.length; e1 < i1; e1++){\n                const i2 = s[e1], o = n(i2), r = t.find(o).filter((t)=>t === this._element);\n                null !== o && r.length && (this._selector = o, this._triggerArray.push(i2));\n            }\n            this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();\n        }\n    }\n    P.on(document, \"click.bs.collapse.data-api\", '[data-bs-toggle=\"collapse\"]', function(e) {\n        (\"A\" === e.target.tagName || e.delegateTarget && \"A\" === e.delegateTarget.tagName) && e.preventDefault();\n        const i = U.getDataAttributes(this), s = n(this);\n        t.find(s).forEach((t)=>{\n            const e = et.getInstance(t);\n            let n;\n            e ? (null === e._parent && \"string\" == typeof i.parent && (e._config.parent = i.parent, e._parent = e._getParent()), n = \"toggle\") : n = i, et.collapseInterface(t, n);\n        });\n    }), _(et);\n    var it = \"top\", nt = \"bottom\", st = \"right\", ot = \"left\", rt = [\n        it,\n        nt,\n        st,\n        ot\n    ], at = rt.reduce(function(t, e) {\n        return t.concat([\n            e + \"-start\",\n            e + \"-end\"\n        ]);\n    }, []), lt = [].concat(rt, [\n        \"auto\"\n    ]).reduce(function(t, e) {\n        return t.concat([\n            e,\n            e + \"-start\",\n            e + \"-end\"\n        ]);\n    }, []), ct = [\n        \"beforeRead\",\n        \"read\",\n        \"afterRead\",\n        \"beforeMain\",\n        \"main\",\n        \"afterMain\",\n        \"beforeWrite\",\n        \"write\",\n        \"afterWrite\"\n    ];\n    function ht(t) {\n        return t ? (t.nodeName || \"\").toLowerCase() : null;\n    }\n    function dt(t) {\n        if (null == t) return window;\n        if (\"[object Window]\" !== t.toString()) {\n            var e = t.ownerDocument;\n            return e && e.defaultView || window;\n        }\n        return t;\n    }\n    function ut(t) {\n        return t instanceof dt(t).Element || t instanceof Element;\n    }\n    function ft(t) {\n        return t instanceof dt(t).HTMLElement || t instanceof HTMLElement;\n    }\n    function pt(t) {\n        return \"undefined\" != typeof ShadowRoot && (t instanceof dt(t).ShadowRoot || t instanceof ShadowRoot);\n    }\n    var mt = {\n        name: \"applyStyles\",\n        enabled: !0,\n        phase: \"write\",\n        fn: function(t) {\n            var e = t.state;\n            Object.keys(e.elements).forEach(function(t) {\n                var i = e.styles[t] || {}, n = e.attributes[t] || {}, s = e.elements[t];\n                ft(s) && ht(s) && (Object.assign(s.style, i), Object.keys(n).forEach(function(t) {\n                    var e = n[t];\n                    !1 === e ? s.removeAttribute(t) : s.setAttribute(t, !0 === e ? \"\" : e);\n                }));\n            });\n        },\n        effect: function(t) {\n            var e = t.state, i = {\n                popper: {\n                    position: e.options.strategy,\n                    left: \"0\",\n                    top: \"0\",\n                    margin: \"0\"\n                },\n                arrow: {\n                    position: \"absolute\"\n                },\n                reference: {}\n            };\n            return Object.assign(e.elements.popper.style, i.popper), e.styles = i, e.elements.arrow && Object.assign(e.elements.arrow.style, i.arrow), function() {\n                Object.keys(e.elements).forEach(function(t) {\n                    var n = e.elements[t], s = e.attributes[t] || {}, o = Object.keys(e.styles.hasOwnProperty(t) ? e.styles[t] : i[t]).reduce(function(t, e) {\n                        return t[e] = \"\", t;\n                    }, {});\n                    ft(n) && ht(n) && (Object.assign(n.style, o), Object.keys(s).forEach(function(t) {\n                        n.removeAttribute(t);\n                    }));\n                });\n            };\n        },\n        requires: [\n            \"computeStyles\"\n        ]\n    };\n    function gt(t) {\n        return t.split(\"-\")[0];\n    }\n    function _t(t) {\n        var e = t.getBoundingClientRect();\n        return {\n            width: e.width,\n            height: e.height,\n            top: e.top,\n            right: e.right,\n            bottom: e.bottom,\n            left: e.left,\n            x: e.left,\n            y: e.top\n        };\n    }\n    function bt(t) {\n        var e = _t(t), i = t.offsetWidth, n = t.offsetHeight;\n        return Math.abs(e.width - i) <= 1 && (i = e.width), Math.abs(e.height - n) <= 1 && (n = e.height), {\n            x: t.offsetLeft,\n            y: t.offsetTop,\n            width: i,\n            height: n\n        };\n    }\n    function vt(t, e) {\n        var i = e.getRootNode && e.getRootNode();\n        if (t.contains(e)) return !0;\n        if (i && pt(i)) {\n            var n = e;\n            do {\n                if (n && t.isSameNode(n)) return !0;\n                n = n.parentNode || n.host;\n            }while (n);\n        }\n        return !1;\n    }\n    function yt(t) {\n        return dt(t).getComputedStyle(t);\n    }\n    function wt(t) {\n        return [\n            \"table\",\n            \"td\",\n            \"th\"\n        ].indexOf(ht(t)) >= 0;\n    }\n    function Et(t) {\n        return ((ut(t) ? t.ownerDocument : t.document) || window.document).documentElement;\n    }\n    function At(t) {\n        return \"html\" === ht(t) ? t : t.assignedSlot || t.parentNode || (pt(t) ? t.host : null) || Et(t);\n    }\n    function Tt(t) {\n        return ft(t) && \"fixed\" !== yt(t).position ? t.offsetParent : null;\n    }\n    function Ot(t) {\n        for(var e = dt(t), i = Tt(t); i && wt(i) && \"static\" === yt(i).position;)i = Tt(i);\n        return i && (\"html\" === ht(i) || \"body\" === ht(i) && \"static\" === yt(i).position) ? e : i || function(t) {\n            var e = -1 !== navigator.userAgent.toLowerCase().indexOf(\"firefox\");\n            if (-1 !== navigator.userAgent.indexOf(\"Trident\") && ft(t) && \"fixed\" === yt(t).position) return null;\n            for(var i = At(t); ft(i) && [\n                \"html\",\n                \"body\"\n            ].indexOf(ht(i)) < 0;){\n                var n = yt(i);\n                if (\"none\" !== n.transform || \"none\" !== n.perspective || \"paint\" === n.contain || -1 !== [\n                    \"transform\",\n                    \"perspective\"\n                ].indexOf(n.willChange) || e && \"filter\" === n.willChange || e && n.filter && \"none\" !== n.filter) return i;\n                i = i.parentNode;\n            }\n            return null;\n        }(t) || e;\n    }\n    function Ct(t) {\n        return [\n            \"top\",\n            \"bottom\"\n        ].indexOf(t) >= 0 ? \"x\" : \"y\";\n    }\n    var kt = Math.max, Lt = Math.min, xt = Math.round;\n    function Dt(t, e, i) {\n        return kt(t, Lt(e, i));\n    }\n    function St(t) {\n        return Object.assign({}, {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }, t);\n    }\n    function It(t, e) {\n        return e.reduce(function(e, i) {\n            return e[i] = t, e;\n        }, {});\n    }\n    var Nt = {\n        name: \"arrow\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e, i = t.state, n = t.name, s = t.options, o = i.elements.arrow, r = i.modifiersData.popperOffsets, a = gt(i.placement), l = Ct(a), c = [\n                ot,\n                st\n            ].indexOf(a) >= 0 ? \"height\" : \"width\";\n            if (o && r) {\n                var h = function(t, e) {\n                    return St(\"number\" != typeof (t = \"function\" == typeof t ? t(Object.assign({}, e.rects, {\n                        placement: e.placement\n                    })) : t) ? t : It(t, rt));\n                }(s.padding, i), d = bt(o), u = \"y\" === l ? it : ot, f = \"y\" === l ? nt : st, p = i.rects.reference[c] + i.rects.reference[l] - r[l] - i.rects.popper[c], m = r[l] - i.rects.reference[l], g = Ot(o), _ = g ? \"y\" === l ? g.clientHeight || 0 : g.clientWidth || 0 : 0, b = p / 2 - m / 2, v = h[u], y = _ - d[c] - h[f], w = _ / 2 - d[c] / 2 + b, E = Dt(v, w, y), A = l;\n                i.modifiersData[n] = ((e = {})[A] = E, e.centerOffset = E - w, e);\n            }\n        },\n        effect: function(t) {\n            var e = t.state, i = t.options.element, n = void 0 === i ? \"[data-popper-arrow]\" : i;\n            null != n && (\"string\" != typeof n || (n = e.elements.popper.querySelector(n))) && vt(e.elements.popper, n) && (e.elements.arrow = n);\n        },\n        requires: [\n            \"popperOffsets\"\n        ],\n        requiresIfExists: [\n            \"preventOverflow\"\n        ]\n    }, jt = {\n        top: \"auto\",\n        right: \"auto\",\n        bottom: \"auto\",\n        left: \"auto\"\n    };\n    function Mt(t) {\n        var e, i = t.popper, n = t.popperRect, s = t.placement, o = t.offsets, r = t.position, a = t.gpuAcceleration, l = t.adaptive, c = t.roundOffsets, h = !0 === c ? function(t) {\n            var e = t.x, i = t.y, n = window.devicePixelRatio || 1;\n            return {\n                x: xt(xt(e * n) / n) || 0,\n                y: xt(xt(i * n) / n) || 0\n            };\n        }(o) : \"function\" == typeof c ? c(o) : o, d = h.x, u = void 0 === d ? 0 : d, f = h.y, p = void 0 === f ? 0 : f, m = o.hasOwnProperty(\"x\"), g = o.hasOwnProperty(\"y\"), _ = ot, b = it, v = window;\n        if (l) {\n            var y = Ot(i), w = \"clientHeight\", E = \"clientWidth\";\n            y === dt(i) && \"static\" !== yt(y = Et(i)).position && (w = \"scrollHeight\", E = \"scrollWidth\"), y = y, s === it && (b = nt, p -= y[w] - n.height, p *= a ? 1 : -1), s === ot && (_ = st, u -= y[E] - n.width, u *= a ? 1 : -1);\n        }\n        var A, T = Object.assign({\n            position: r\n        }, l && jt);\n        return a ? Object.assign({}, T, ((A = {})[b] = g ? \"0\" : \"\", A[_] = m ? \"0\" : \"\", A.transform = (v.devicePixelRatio || 1) < 2 ? \"translate(\" + u + \"px, \" + p + \"px)\" : \"translate3d(\" + u + \"px, \" + p + \"px, 0)\", A)) : Object.assign({}, T, ((e = {})[b] = g ? p + \"px\" : \"\", e[_] = m ? u + \"px\" : \"\", e.transform = \"\", e));\n    }\n    var Pt = {\n        name: \"computeStyles\",\n        enabled: !0,\n        phase: \"beforeWrite\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = i.gpuAcceleration, s = void 0 === n || n, o = i.adaptive, r = void 0 === o || o, a = i.roundOffsets, l = void 0 === a || a, c = {\n                placement: gt(e.placement),\n                popper: e.elements.popper,\n                popperRect: e.rects.popper,\n                gpuAcceleration: s\n            };\n            null != e.modifiersData.popperOffsets && (e.styles.popper = Object.assign({}, e.styles.popper, Mt(Object.assign({}, c, {\n                offsets: e.modifiersData.popperOffsets,\n                position: e.options.strategy,\n                adaptive: r,\n                roundOffsets: l\n            })))), null != e.modifiersData.arrow && (e.styles.arrow = Object.assign({}, e.styles.arrow, Mt(Object.assign({}, c, {\n                offsets: e.modifiersData.arrow,\n                position: \"absolute\",\n                adaptive: !1,\n                roundOffsets: l\n            })))), e.attributes.popper = Object.assign({}, e.attributes.popper, {\n                \"data-popper-placement\": e.placement\n            });\n        },\n        data: {}\n    }, Ht = {\n        passive: !0\n    }, Rt = {\n        name: \"eventListeners\",\n        enabled: !0,\n        phase: \"write\",\n        fn: function() {},\n        effect: function(t) {\n            var e = t.state, i = t.instance, n = t.options, s = n.scroll, o = void 0 === s || s, r = n.resize, a = void 0 === r || r, l = dt(e.elements.popper), c = [].concat(e.scrollParents.reference, e.scrollParents.popper);\n            return o && c.forEach(function(t) {\n                t.addEventListener(\"scroll\", i.update, Ht);\n            }), a && l.addEventListener(\"resize\", i.update, Ht), function() {\n                o && c.forEach(function(t) {\n                    t.removeEventListener(\"scroll\", i.update, Ht);\n                }), a && l.removeEventListener(\"resize\", i.update, Ht);\n            };\n        },\n        data: {}\n    }, Bt = {\n        left: \"right\",\n        right: \"left\",\n        bottom: \"top\",\n        top: \"bottom\"\n    };\n    function Wt(t) {\n        return t.replace(/left|right|bottom|top/g, function(t) {\n            return Bt[t];\n        });\n    }\n    var qt = {\n        start: \"end\",\n        end: \"start\"\n    };\n    function zt(t) {\n        return t.replace(/start|end/g, function(t) {\n            return qt[t];\n        });\n    }\n    function $t(t) {\n        var e = dt(t);\n        return {\n            scrollLeft: e.pageXOffset,\n            scrollTop: e.pageYOffset\n        };\n    }\n    function Ut(t) {\n        return _t(Et(t)).left + $t(t).scrollLeft;\n    }\n    function Ft(t) {\n        var e = yt(t), i = e.overflow, n = e.overflowX, s = e.overflowY;\n        return /auto|scroll|overlay|hidden/.test(i + s + n);\n    }\n    function Vt(t, e) {\n        var i;\n        void 0 === e && (e = []);\n        var n = function t(e) {\n            return [\n                \"html\",\n                \"body\",\n                \"#document\"\n            ].indexOf(ht(e)) >= 0 ? e.ownerDocument.body : ft(e) && Ft(e) ? e : t(At(e));\n        }(t), s = n === (null == (i = t.ownerDocument) ? void 0 : i.body), o = dt(n), r = s ? [\n            o\n        ].concat(o.visualViewport || [], Ft(n) ? n : []) : n, a = e.concat(r);\n        return s ? a : a.concat(Vt(At(r)));\n    }\n    function Kt(t) {\n        return Object.assign({}, t, {\n            left: t.x,\n            top: t.y,\n            right: t.x + t.width,\n            bottom: t.y + t.height\n        });\n    }\n    function Xt(t, e) {\n        return \"viewport\" === e ? Kt(function(t) {\n            var e = dt(t), i = Et(t), n = e.visualViewport, s = i.clientWidth, o = i.clientHeight, r = 0, a = 0;\n            return n && (s = n.width, o = n.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (r = n.offsetLeft, a = n.offsetTop)), {\n                width: s,\n                height: o,\n                x: r + Ut(t),\n                y: a\n            };\n        }(t)) : ft(e) ? function(t) {\n            var e = _t(t);\n            return e.top = e.top + t.clientTop, e.left = e.left + t.clientLeft, e.bottom = e.top + t.clientHeight, e.right = e.left + t.clientWidth, e.width = t.clientWidth, e.height = t.clientHeight, e.x = e.left, e.y = e.top, e;\n        }(e) : Kt(function(t) {\n            var e, i = Et(t), n = $t(t), s = null == (e = t.ownerDocument) ? void 0 : e.body, o = kt(i.scrollWidth, i.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0), r = kt(i.scrollHeight, i.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0), a = -n.scrollLeft + Ut(t), l = -n.scrollTop;\n            return \"rtl\" === yt(s || i).direction && (a += kt(i.clientWidth, s ? s.clientWidth : 0) - o), {\n                width: o,\n                height: r,\n                x: a,\n                y: l\n            };\n        }(Et(t)));\n    }\n    function Yt(t) {\n        return t.split(\"-\")[1];\n    }\n    function Qt(t) {\n        var e, i = t.reference, n = t.element, s = t.placement, o = s ? gt(s) : null, r = s ? Yt(s) : null, a = i.x + i.width / 2 - n.width / 2, l = i.y + i.height / 2 - n.height / 2;\n        switch(o){\n            case it:\n                e = {\n                    x: a,\n                    y: i.y - n.height\n                };\n                break;\n            case nt:\n                e = {\n                    x: a,\n                    y: i.y + i.height\n                };\n                break;\n            case st:\n                e = {\n                    x: i.x + i.width,\n                    y: l\n                };\n                break;\n            case ot:\n                e = {\n                    x: i.x - n.width,\n                    y: l\n                };\n                break;\n            default:\n                e = {\n                    x: i.x,\n                    y: i.y\n                };\n        }\n        var c = o ? Ct(o) : null;\n        if (null != c) {\n            var h = \"y\" === c ? \"height\" : \"width\";\n            switch(r){\n                case \"start\":\n                    e[c] = e[c] - (i[h] / 2 - n[h] / 2);\n                    break;\n                case \"end\":\n                    e[c] = e[c] + (i[h] / 2 - n[h] / 2);\n            }\n        }\n        return e;\n    }\n    function Gt(t, e) {\n        void 0 === e && (e = {});\n        var i = e, n = i.placement, s = void 0 === n ? t.placement : n, o = i.boundary, r = void 0 === o ? \"clippingParents\" : o, a = i.rootBoundary, l = void 0 === a ? \"viewport\" : a, c = i.elementContext, h = void 0 === c ? \"popper\" : c, d = i.altBoundary, u = void 0 !== d && d, f = i.padding, p = void 0 === f ? 0 : f, m = St(\"number\" != typeof p ? p : It(p, rt)), g = \"popper\" === h ? \"reference\" : \"popper\", _ = t.elements.reference, b = t.rects.popper, v = t.elements[u ? g : h], y = function(t, e, i) {\n            var n = \"clippingParents\" === e ? function(t) {\n                var e = Vt(At(t)), i = [\n                    \"absolute\",\n                    \"fixed\"\n                ].indexOf(yt(t).position) >= 0 && ft(t) ? Ot(t) : t;\n                return ut(i) ? e.filter(function(t) {\n                    return ut(t) && vt(t, i) && \"body\" !== ht(t);\n                }) : [];\n            }(t) : [].concat(e), s = [].concat(n, [\n                i\n            ]), o = s[0], r = s.reduce(function(e, i) {\n                var n = Xt(t, i);\n                return e.top = kt(n.top, e.top), e.right = Lt(n.right, e.right), e.bottom = Lt(n.bottom, e.bottom), e.left = kt(n.left, e.left), e;\n            }, Xt(t, o));\n            return r.width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;\n        }(ut(v) ? v : v.contextElement || Et(t.elements.popper), r, l), w = _t(_), E = Qt({\n            reference: w,\n            element: b,\n            strategy: \"absolute\",\n            placement: s\n        }), A = Kt(Object.assign({}, b, E)), T = \"popper\" === h ? A : w, O = {\n            top: y.top - T.top + m.top,\n            bottom: T.bottom - y.bottom + m.bottom,\n            left: y.left - T.left + m.left,\n            right: T.right - y.right + m.right\n        }, C = t.modifiersData.offset;\n        if (\"popper\" === h && C) {\n            var k = C[s];\n            Object.keys(O).forEach(function(t) {\n                var e = [\n                    st,\n                    nt\n                ].indexOf(t) >= 0 ? 1 : -1, i = [\n                    it,\n                    nt\n                ].indexOf(t) >= 0 ? \"y\" : \"x\";\n                O[t] += k[i] * e;\n            });\n        }\n        return O;\n    }\n    function Zt(t, e) {\n        void 0 === e && (e = {});\n        var i = e, n = i.placement, s = i.boundary, o = i.rootBoundary, r = i.padding, a = i.flipVariations, l = i.allowedAutoPlacements, c = void 0 === l ? lt : l, h = Yt(n), d = h ? a ? at : at.filter(function(t) {\n            return Yt(t) === h;\n        }) : rt, u = d.filter(function(t) {\n            return c.indexOf(t) >= 0;\n        });\n        0 === u.length && (u = d);\n        var f = u.reduce(function(e, i) {\n            return e[i] = Gt(t, {\n                placement: i,\n                boundary: s,\n                rootBoundary: o,\n                padding: r\n            })[gt(i)], e;\n        }, {});\n        return Object.keys(f).sort(function(t, e) {\n            return f[t] - f[e];\n        });\n    }\n    var Jt = {\n        name: \"flip\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name;\n            if (!e.modifiersData[n]._skip) {\n                for(var s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 === r || r, l = i.fallbackPlacements, c = i.padding, h = i.boundary, d = i.rootBoundary, u = i.altBoundary, f = i.flipVariations, p = void 0 === f || f, m = i.allowedAutoPlacements, g = e.options.placement, _ = gt(g), b = l || (_ !== g && p ? function(t) {\n                    if (\"auto\" === gt(t)) return [];\n                    var e = Wt(t);\n                    return [\n                        zt(t),\n                        e,\n                        zt(e)\n                    ];\n                }(g) : [\n                    Wt(g)\n                ]), v = [\n                    g\n                ].concat(b).reduce(function(t, i) {\n                    return t.concat(\"auto\" === gt(i) ? Zt(e, {\n                        placement: i,\n                        boundary: h,\n                        rootBoundary: d,\n                        padding: c,\n                        flipVariations: p,\n                        allowedAutoPlacements: m\n                    }) : i);\n                }, []), y = e.rects.reference, w = e.rects.popper, E = new Map, A = !0, T = v[0], O = 0; O < v.length; O++){\n                    var C = v[O], k = gt(C), L = \"start\" === Yt(C), x = [\n                        it,\n                        nt\n                    ].indexOf(k) >= 0, D = x ? \"width\" : \"height\", S = Gt(e, {\n                        placement: C,\n                        boundary: h,\n                        rootBoundary: d,\n                        altBoundary: u,\n                        padding: c\n                    }), I = x ? L ? st : ot : L ? nt : it;\n                    y[D] > w[D] && (I = Wt(I));\n                    var N = Wt(I), j = [];\n                    if (o && j.push(S[k] <= 0), a && j.push(S[I] <= 0, S[N] <= 0), j.every(function(t) {\n                        return t;\n                    })) {\n                        T = C, A = !1;\n                        break;\n                    }\n                    E.set(C, j);\n                }\n                if (A) for(var M = function(t) {\n                    var e = v.find(function(e) {\n                        var i = E.get(e);\n                        if (i) return i.slice(0, t).every(function(t) {\n                            return t;\n                        });\n                    });\n                    if (e) return T = e, \"break\";\n                }, P = p ? 3 : 1; P > 0 && \"break\" !== M(P); P--);\n                e.placement !== T && (e.modifiersData[n]._skip = !0, e.placement = T, e.reset = !0);\n            }\n        },\n        requiresIfExists: [\n            \"offset\"\n        ],\n        data: {\n            _skip: !1\n        }\n    };\n    function te(t, e, i) {\n        return void 0 === i && (i = {\n            x: 0,\n            y: 0\n        }), {\n            top: t.top - e.height - i.y,\n            right: t.right - e.width + i.x,\n            bottom: t.bottom - e.height + i.y,\n            left: t.left - e.width - i.x\n        };\n    }\n    function ee(t) {\n        return [\n            it,\n            st,\n            nt,\n            ot\n        ].some(function(e) {\n            return t[e] >= 0;\n        });\n    }\n    var ie = {\n        name: \"hide\",\n        enabled: !0,\n        phase: \"main\",\n        requiresIfExists: [\n            \"preventOverflow\"\n        ],\n        fn: function(t) {\n            var e = t.state, i = t.name, n = e.rects.reference, s = e.rects.popper, o = e.modifiersData.preventOverflow, r = Gt(e, {\n                elementContext: \"reference\"\n            }), a = Gt(e, {\n                altBoundary: !0\n            }), l = te(r, n), c = te(a, s, o), h = ee(l), d = ee(c);\n            e.modifiersData[i] = {\n                referenceClippingOffsets: l,\n                popperEscapeOffsets: c,\n                isReferenceHidden: h,\n                hasPopperEscaped: d\n            }, e.attributes.popper = Object.assign({}, e.attributes.popper, {\n                \"data-popper-reference-hidden\": h,\n                \"data-popper-escaped\": d\n            });\n        }\n    }, ne = {\n        name: \"offset\",\n        enabled: !0,\n        phase: \"main\",\n        requires: [\n            \"popperOffsets\"\n        ],\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name, s = i.offset, o = void 0 === s ? [\n                0,\n                0\n            ] : s, r = lt.reduce(function(t, i) {\n                return t[i] = function(t, e, i) {\n                    var n = gt(t), s = [\n                        ot,\n                        it\n                    ].indexOf(n) >= 0 ? -1 : 1, o = \"function\" == typeof i ? i(Object.assign({}, e, {\n                        placement: t\n                    })) : i, r = o[0], a = o[1];\n                    return r = r || 0, a = (a || 0) * s, [\n                        ot,\n                        st\n                    ].indexOf(n) >= 0 ? {\n                        x: a,\n                        y: r\n                    } : {\n                        x: r,\n                        y: a\n                    };\n                }(i, e.rects, o), t;\n            }, {}), a = r[e.placement], l = a.x, c = a.y;\n            null != e.modifiersData.popperOffsets && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += c), e.modifiersData[n] = r;\n        }\n    }, se = {\n        name: \"popperOffsets\",\n        enabled: !0,\n        phase: \"read\",\n        fn: function(t) {\n            var e = t.state, i = t.name;\n            e.modifiersData[i] = Qt({\n                reference: e.rects.reference,\n                element: e.rects.popper,\n                strategy: \"absolute\",\n                placement: e.placement\n            });\n        },\n        data: {}\n    }, oe = {\n        name: \"preventOverflow\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name, s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 !== r && r, l = i.boundary, c = i.rootBoundary, h = i.altBoundary, d = i.padding, u = i.tether, f = void 0 === u || u, p = i.tetherOffset, m = void 0 === p ? 0 : p, g = Gt(e, {\n                boundary: l,\n                rootBoundary: c,\n                padding: d,\n                altBoundary: h\n            }), _ = gt(e.placement), b = Yt(e.placement), v = !b, y = Ct(_), w = \"x\" === y ? \"y\" : \"x\", E = e.modifiersData.popperOffsets, A = e.rects.reference, T = e.rects.popper, O = \"function\" == typeof m ? m(Object.assign({}, e.rects, {\n                placement: e.placement\n            })) : m, C = {\n                x: 0,\n                y: 0\n            };\n            if (E) {\n                if (o || a) {\n                    var k = \"y\" === y ? it : ot, L = \"y\" === y ? nt : st, x = \"y\" === y ? \"height\" : \"width\", D = E[y], S = E[y] + g[k], I = E[y] - g[L], N = f ? -T[x] / 2 : 0, j = \"start\" === b ? A[x] : T[x], M = \"start\" === b ? -T[x] : -A[x], P = e.elements.arrow, H = f && P ? bt(P) : {\n                        width: 0,\n                        height: 0\n                    }, R = e.modifiersData[\"arrow#persistent\"] ? e.modifiersData[\"arrow#persistent\"].padding : {\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0\n                    }, B = R[k], W = R[L], q = Dt(0, A[x], H[x]), z = v ? A[x] / 2 - N - q - B - O : j - q - B - O, $ = v ? -A[x] / 2 + N + q + W + O : M + q + W + O, U = e.elements.arrow && Ot(e.elements.arrow), F = U ? \"y\" === y ? U.clientTop || 0 : U.clientLeft || 0 : 0, V = e.modifiersData.offset ? e.modifiersData.offset[e.placement][y] : 0, K = E[y] + z - V - F, X = E[y] + $ - V;\n                    if (o) {\n                        var Y = Dt(f ? Lt(S, K) : S, D, f ? kt(I, X) : I);\n                        E[y] = Y, C[y] = Y - D;\n                    }\n                    if (a) {\n                        var Q = \"x\" === y ? it : ot, G = \"x\" === y ? nt : st, Z = E[w], J = Z + g[Q], tt = Z - g[G], et = Dt(f ? Lt(J, K) : J, Z, f ? kt(tt, X) : tt);\n                        E[w] = et, C[w] = et - Z;\n                    }\n                }\n                e.modifiersData[n] = C;\n            }\n        },\n        requiresIfExists: [\n            \"offset\"\n        ]\n    };\n    function re(t, e, i) {\n        void 0 === i && (i = !1);\n        var n, s, o = Et(e), r = _t(t), a = ft(e), l = {\n            scrollLeft: 0,\n            scrollTop: 0\n        }, c = {\n            x: 0,\n            y: 0\n        };\n        return (a || !a && !i) && ((\"body\" !== ht(e) || Ft(o)) && (l = (n = e) !== dt(n) && ft(n) ? {\n            scrollLeft: (s = n).scrollLeft,\n            scrollTop: s.scrollTop\n        } : $t(n)), ft(e) ? ((c = _t(e)).x += e.clientLeft, c.y += e.clientTop) : o && (c.x = Ut(o))), {\n            x: r.left + l.scrollLeft - c.x,\n            y: r.top + l.scrollTop - c.y,\n            width: r.width,\n            height: r.height\n        };\n    }\n    var ae = {\n        placement: \"bottom\",\n        modifiers: [],\n        strategy: \"absolute\"\n    };\n    function le() {\n        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];\n        return !e.some(function(t) {\n            return !(t && \"function\" == typeof t.getBoundingClientRect);\n        });\n    }\n    function ce(t) {\n        void 0 === t && (t = {});\n        var e = t, i = e.defaultModifiers, n = void 0 === i ? [] : i, s = e.defaultOptions, o = void 0 === s ? ae : s;\n        return function(t, e, i) {\n            void 0 === i && (i = o);\n            var s, r, a = {\n                placement: \"bottom\",\n                orderedModifiers: [],\n                options: Object.assign({}, ae, o),\n                modifiersData: {},\n                elements: {\n                    reference: t,\n                    popper: e\n                },\n                attributes: {},\n                styles: {}\n            }, l = [], c = !1, h = {\n                state: a,\n                setOptions: function(i) {\n                    d(), a.options = Object.assign({}, o, a.options, i), a.scrollParents = {\n                        reference: ut(t) ? Vt(t) : t.contextElement ? Vt(t.contextElement) : [],\n                        popper: Vt(e)\n                    };\n                    var s, r, c = function(t) {\n                        var e = function(t) {\n                            var e = new Map, i = new Set, n = [];\n                            return t.forEach(function(t) {\n                                e.set(t.name, t);\n                            }), t.forEach(function(t) {\n                                i.has(t.name) || function t(s) {\n                                    i.add(s.name), [].concat(s.requires || [], s.requiresIfExists || []).forEach(function(n) {\n                                        if (!i.has(n)) {\n                                            var s = e.get(n);\n                                            s && t(s);\n                                        }\n                                    }), n.push(s);\n                                }(t);\n                            }), n;\n                        }(t);\n                        return ct.reduce(function(t, i) {\n                            return t.concat(e.filter(function(t) {\n                                return t.phase === i;\n                            }));\n                        }, []);\n                    }((s = [].concat(n, a.options.modifiers), r = s.reduce(function(t, e) {\n                        var i = t[e.name];\n                        return t[e.name] = i ? Object.assign({}, i, e, {\n                            options: Object.assign({}, i.options, e.options),\n                            data: Object.assign({}, i.data, e.data)\n                        }) : e, t;\n                    }, {}), Object.keys(r).map(function(t) {\n                        return r[t];\n                    })));\n                    return a.orderedModifiers = c.filter(function(t) {\n                        return t.enabled;\n                    }), a.orderedModifiers.forEach(function(t) {\n                        var e = t.name, i = t.options, n = void 0 === i ? {} : i, s = t.effect;\n                        if (\"function\" == typeof s) {\n                            var o = s({\n                                state: a,\n                                name: e,\n                                instance: h,\n                                options: n\n                            });\n                            l.push(o || function() {});\n                        }\n                    }), h.update();\n                },\n                forceUpdate: function() {\n                    if (!c) {\n                        var t = a.elements, e = t.reference, i = t.popper;\n                        if (le(e, i)) {\n                            a.rects = {\n                                reference: re(e, Ot(i), \"fixed\" === a.options.strategy),\n                                popper: bt(i)\n                            }, a.reset = !1, a.placement = a.options.placement, a.orderedModifiers.forEach(function(t) {\n                                return a.modifiersData[t.name] = Object.assign({}, t.data);\n                            });\n                            for(var n = 0; n < a.orderedModifiers.length; n++)if (!0 !== a.reset) {\n                                var s = a.orderedModifiers[n], o = s.fn, r = s.options, l = void 0 === r ? {} : r, d = s.name;\n                                \"function\" == typeof o && (a = o({\n                                    state: a,\n                                    options: l,\n                                    name: d,\n                                    instance: h\n                                }) || a);\n                            } else a.reset = !1, n = -1;\n                        }\n                    }\n                },\n                update: (s = function() {\n                    return new Promise(function(t) {\n                        h.forceUpdate(), t(a);\n                    });\n                }, function() {\n                    return r || (r = new Promise(function(t) {\n                        Promise.resolve().then(function() {\n                            r = void 0, t(s());\n                        });\n                    })), r;\n                }),\n                destroy: function() {\n                    d(), c = !0;\n                }\n            };\n            if (!le(t, e)) return h;\n            function d() {\n                l.forEach(function(t) {\n                    return t();\n                }), l = [];\n            }\n            return h.setOptions(i).then(function(t) {\n                !c && i.onFirstUpdate && i.onFirstUpdate(t);\n            }), h;\n        };\n    }\n    var he = ce(), de = ce({\n        defaultModifiers: [\n            Rt,\n            se,\n            Pt,\n            mt\n        ]\n    }), ue = ce({\n        defaultModifiers: [\n            Rt,\n            se,\n            Pt,\n            mt,\n            ne,\n            Jt,\n            oe,\n            Nt,\n            ie\n        ]\n    }), fe = Object.freeze({\n        __proto__: null,\n        popperGenerator: ce,\n        detectOverflow: Gt,\n        createPopperBase: he,\n        createPopper: ue,\n        createPopperLite: de,\n        top: it,\n        bottom: nt,\n        right: st,\n        left: ot,\n        auto: \"auto\",\n        basePlacements: rt,\n        start: \"start\",\n        end: \"end\",\n        clippingParents: \"clippingParents\",\n        viewport: \"viewport\",\n        popper: \"popper\",\n        reference: \"reference\",\n        variationPlacements: at,\n        placements: lt,\n        beforeRead: \"beforeRead\",\n        read: \"read\",\n        afterRead: \"afterRead\",\n        beforeMain: \"beforeMain\",\n        main: \"main\",\n        afterMain: \"afterMain\",\n        beforeWrite: \"beforeWrite\",\n        write: \"write\",\n        afterWrite: \"afterWrite\",\n        modifierPhases: ct,\n        applyStyles: mt,\n        arrow: Nt,\n        computeStyles: Pt,\n        eventListeners: Rt,\n        flip: Jt,\n        hide: ie,\n        offset: ne,\n        popperOffsets: se,\n        preventOverflow: oe\n    });\n    const pe = new RegExp(\"ArrowUp|ArrowDown|Escape\"), me = g() ? \"top-end\" : \"top-start\", ge = g() ? \"top-start\" : \"top-end\", _e = g() ? \"bottom-end\" : \"bottom-start\", be = g() ? \"bottom-start\" : \"bottom-end\", ve = g() ? \"left-start\" : \"right-start\", ye = g() ? \"right-start\" : \"left-start\", we = {\n        offset: [\n            0,\n            2\n        ],\n        boundary: \"clippingParents\",\n        reference: \"toggle\",\n        display: \"dynamic\",\n        popperConfig: null,\n        autoClose: !0\n    }, Ee = {\n        offset: \"(array|string|function)\",\n        boundary: \"(string|element)\",\n        reference: \"(string|element|object)\",\n        display: \"string\",\n        popperConfig: \"(null|object|function)\",\n        autoClose: \"(boolean|string)\"\n    };\n    class Ae extends B {\n        static get Default() {\n            return we;\n        }\n        static get DefaultType() {\n            return Ee;\n        }\n        static get NAME() {\n            return \"dropdown\";\n        }\n        toggle() {\n            h(this._element) || (this._element.classList.contains(\"show\") ? this.hide() : this.show());\n        }\n        show() {\n            if (h(this._element) || this._menu.classList.contains(\"show\")) return;\n            const t = Ae.getParentFromElement(this._element), e = {\n                relatedTarget: this._element\n            };\n            if (!P.trigger(this._element, \"show.bs.dropdown\", e).defaultPrevented) {\n                if (this._inNavbar) U.setDataAttribute(this._menu, \"popper\", \"none\");\n                else {\n                    if (void 0 === fe) throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n                    let e1 = this._element;\n                    \"parent\" === this._config.reference ? e1 = t : r(this._config.reference) ? e1 = a(this._config.reference) : \"object\" == typeof this._config.reference && (e1 = this._config.reference);\n                    const i = this._getPopperConfig(), n = i.modifiers.find((t)=>\"applyStyles\" === t.name && !1 === t.enabled);\n                    this._popper = ue(e1, this._menu, i), n && U.setDataAttribute(this._menu, \"popper\", \"static\");\n                }\n                \"ontouchstart\" in document.documentElement && !t.closest(\".navbar-nav\") && [].concat(...document.body.children).forEach((t)=>P.on(t, \"mouseover\", u)), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), this._menu.classList.toggle(\"show\"), this._element.classList.toggle(\"show\"), P.trigger(this._element, \"shown.bs.dropdown\", e);\n            }\n        }\n        hide() {\n            if (h(this._element) || !this._menu.classList.contains(\"show\")) return;\n            const t = {\n                relatedTarget: this._element\n            };\n            this._completeHide(t);\n        }\n        dispose() {\n            this._popper && this._popper.destroy(), super.dispose();\n        }\n        update() {\n            this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();\n        }\n        _addEventListeners() {\n            P.on(this._element, \"click.bs.dropdown\", (t)=>{\n                t.preventDefault(), this.toggle();\n            });\n        }\n        _completeHide(t) {\n            P.trigger(this._element, \"hide.bs.dropdown\", t).defaultPrevented || (\"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((t)=>P.off(t, \"mouseover\", u)), this._popper && this._popper.destroy(), this._menu.classList.remove(\"show\"), this._element.classList.remove(\"show\"), this._element.setAttribute(\"aria-expanded\", \"false\"), U.removeDataAttribute(this._menu, \"popper\"), P.trigger(this._element, \"hidden.bs.dropdown\", t));\n        }\n        _getConfig(t) {\n            if (t = {\n                ...this.constructor.Default,\n                ...U.getDataAttributes(this._element),\n                ...t\n            }, l(\"dropdown\", t, this.constructor.DefaultType), \"object\" == typeof t.reference && !r(t.reference) && \"function\" != typeof t.reference.getBoundingClientRect) throw new TypeError(\"dropdown\".toUpperCase() + ': Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.');\n            return t;\n        }\n        _getMenuElement() {\n            return t.next(this._element, \".dropdown-menu\")[0];\n        }\n        _getPlacement() {\n            const t = this._element.parentNode;\n            if (t.classList.contains(\"dropend\")) return ve;\n            if (t.classList.contains(\"dropstart\")) return ye;\n            const e = \"end\" === getComputedStyle(this._menu).getPropertyValue(\"--bs-position\").trim();\n            return t.classList.contains(\"dropup\") ? e ? ge : me : e ? be : _e;\n        }\n        _detectNavbar() {\n            return null !== this._element.closest(\".navbar\");\n        }\n        _getOffset() {\n            const { offset: t  } = this._config;\n            return \"string\" == typeof t ? t.split(\",\").map((t)=>Number.parseInt(t, 10)) : \"function\" == typeof t ? (e)=>t(e, this._element) : t;\n        }\n        _getPopperConfig() {\n            const t = {\n                placement: this._getPlacement(),\n                modifiers: [\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    }\n                ]\n            };\n            return \"static\" === this._config.display && (t.modifiers = [\n                {\n                    name: \"applyStyles\",\n                    enabled: !1\n                }\n            ]), {\n                ...t,\n                ...\"function\" == typeof this._config.popperConfig ? this._config.popperConfig(t) : this._config.popperConfig\n            };\n        }\n        _selectMenuItem(param) {\n            let { key: e , target: i  } = param;\n            const n = t.find(\".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\", this._menu).filter(c);\n            n.length && y(n, i, \"ArrowDown\" === e, !n.includes(i)).focus();\n        }\n        static dropdownInterface(t, e) {\n            const i = Ae.getOrCreateInstance(t, e);\n            if (\"string\" == typeof e) {\n                if (void 0 === i[e]) throw new TypeError('No method named \"'.concat(e, '\"'));\n                i[e]();\n            }\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                Ae.dropdownInterface(this, t);\n            });\n        }\n        static clearMenus(e) {\n            if (e && (2 === e.button || \"keyup\" === e.type && \"Tab\" !== e.key)) return;\n            const i = t.find('[data-bs-toggle=\"dropdown\"]');\n            for(let t1 = 0, n = i.length; t1 < n; t1++){\n                const n1 = Ae.getInstance(i[t1]);\n                if (!n1 || !1 === n1._config.autoClose) continue;\n                if (!n1._element.classList.contains(\"show\")) continue;\n                const s = {\n                    relatedTarget: n1._element\n                };\n                if (e) {\n                    const t2 = e.composedPath(), i1 = t2.includes(n1._menu);\n                    if (t2.includes(n1._element) || \"inside\" === n1._config.autoClose && !i1 || \"outside\" === n1._config.autoClose && i1) continue;\n                    if (n1._menu.contains(e.target) && (\"keyup\" === e.type && \"Tab\" === e.key || /input|select|option|textarea|form/i.test(e.target.tagName))) continue;\n                    \"click\" === e.type && (s.clickEvent = e);\n                }\n                n1._completeHide(s);\n            }\n        }\n        static getParentFromElement(t) {\n            return s(t) || t.parentNode;\n        }\n        static dataApiKeydownHandler(e) {\n            if (/input|textarea/i.test(e.target.tagName) ? \"Space\" === e.key || \"Escape\" !== e.key && (\"ArrowDown\" !== e.key && \"ArrowUp\" !== e.key || e.target.closest(\".dropdown-menu\")) : !pe.test(e.key)) return;\n            const i = this.classList.contains(\"show\");\n            if (!i && \"Escape\" === e.key) return;\n            if (e.preventDefault(), e.stopPropagation(), h(this)) return;\n            const n = ()=>this.matches('[data-bs-toggle=\"dropdown\"]') ? this : t.prev(this, '[data-bs-toggle=\"dropdown\"]')[0];\n            return \"Escape\" === e.key ? (n().focus(), void Ae.clearMenus()) : \"ArrowUp\" === e.key || \"ArrowDown\" === e.key ? (i || n().click(), void Ae.getInstance(n())._selectMenuItem(e)) : void (i && \"Space\" !== e.key || Ae.clearMenus());\n        }\n        constructor(t, e){\n            super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();\n        }\n    }\n    P.on(document, \"keydown.bs.dropdown.data-api\", '[data-bs-toggle=\"dropdown\"]', Ae.dataApiKeydownHandler), P.on(document, \"keydown.bs.dropdown.data-api\", \".dropdown-menu\", Ae.dataApiKeydownHandler), P.on(document, \"click.bs.dropdown.data-api\", Ae.clearMenus), P.on(document, \"keyup.bs.dropdown.data-api\", Ae.clearMenus), P.on(document, \"click.bs.dropdown.data-api\", '[data-bs-toggle=\"dropdown\"]', function(t) {\n        t.preventDefault(), Ae.dropdownInterface(this);\n    }), _(Ae);\n    class Te {\n        getWidth() {\n            const t = document.documentElement.clientWidth;\n            return Math.abs(window.innerWidth - t);\n        }\n        hide() {\n            const t = this.getWidth();\n            this._disableOverFlow(), this._setElementAttributes(this._element, \"paddingRight\", (e)=>e + t), this._setElementAttributes(\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", \"paddingRight\", (e)=>e + t), this._setElementAttributes(\".sticky-top\", \"marginRight\", (e)=>e - t);\n        }\n        _disableOverFlow() {\n            this._saveInitialAttribute(this._element, \"overflow\"), this._element.style.overflow = \"hidden\";\n        }\n        _setElementAttributes(t, e, i) {\n            const n = this.getWidth();\n            this._applyManipulationCallback(t, (t)=>{\n                if (t !== this._element && window.innerWidth > t.clientWidth + n) return;\n                this._saveInitialAttribute(t, e);\n                const s = window.getComputedStyle(t)[e];\n                t.style[e] = i(Number.parseFloat(s)) + \"px\";\n            });\n        }\n        reset() {\n            this._resetElementAttributes(this._element, \"overflow\"), this._resetElementAttributes(this._element, \"paddingRight\"), this._resetElementAttributes(\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", \"paddingRight\"), this._resetElementAttributes(\".sticky-top\", \"marginRight\");\n        }\n        _saveInitialAttribute(t, e) {\n            const i = t.style[e];\n            i && U.setDataAttribute(t, e, i);\n        }\n        _resetElementAttributes(t, e) {\n            this._applyManipulationCallback(t, (t)=>{\n                const i = U.getDataAttribute(t, e);\n                void 0 === i ? t.style.removeProperty(e) : (U.removeDataAttribute(t, e), t.style[e] = i);\n            });\n        }\n        _applyManipulationCallback(e, i) {\n            r(e) ? i(e) : t.find(e, this._element).forEach(i);\n        }\n        isOverflowing() {\n            return this.getWidth() > 0;\n        }\n        constructor(){\n            this._element = document.body;\n        }\n    }\n    const Oe = {\n        isVisible: !0,\n        isAnimated: !1,\n        rootElement: \"body\",\n        clickCallback: null\n    }, Ce = {\n        isVisible: \"boolean\",\n        isAnimated: \"boolean\",\n        rootElement: \"(element|string)\",\n        clickCallback: \"(function|null)\"\n    };\n    class ke {\n        show(t) {\n            this._config.isVisible ? (this._append(), this._config.isAnimated && f(this._getElement()), this._getElement().classList.add(\"show\"), this._emulateAnimation(()=>{\n                b(t);\n            })) : b(t);\n        }\n        hide(t) {\n            this._config.isVisible ? (this._getElement().classList.remove(\"show\"), this._emulateAnimation(()=>{\n                this.dispose(), b(t);\n            })) : b(t);\n        }\n        _getElement() {\n            if (!this._element) {\n                const t = document.createElement(\"div\");\n                t.className = \"modal-backdrop\", this._config.isAnimated && t.classList.add(\"fade\"), this._element = t;\n            }\n            return this._element;\n        }\n        _getConfig(t) {\n            return (t = {\n                ...Oe,\n                ...\"object\" == typeof t ? t : {}\n            }).rootElement = a(t.rootElement), l(\"backdrop\", t, Ce), t;\n        }\n        _append() {\n            this._isAppended || (this._config.rootElement.appendChild(this._getElement()), P.on(this._getElement(), \"mousedown.bs.backdrop\", ()=>{\n                b(this._config.clickCallback);\n            }), this._isAppended = !0);\n        }\n        dispose() {\n            this._isAppended && (P.off(this._element, \"mousedown.bs.backdrop\"), this._element.remove(), this._isAppended = !1);\n        }\n        _emulateAnimation(t) {\n            v(t, this._getElement(), this._config.isAnimated);\n        }\n        constructor(t){\n            this._config = this._getConfig(t), this._isAppended = !1, this._element = null;\n        }\n    }\n    const Le = {\n        backdrop: !0,\n        keyboard: !0,\n        focus: !0\n    }, xe = {\n        backdrop: \"(boolean|string)\",\n        keyboard: \"boolean\",\n        focus: \"boolean\"\n    };\n    class De extends B {\n        static get Default() {\n            return Le;\n        }\n        static get NAME() {\n            return \"modal\";\n        }\n        toggle(t) {\n            return this._isShown ? this.hide() : this.show(t);\n        }\n        show(t) {\n            this._isShown || this._isTransitioning || P.trigger(this._element, \"show.bs.modal\", {\n                relatedTarget: t\n            }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), this._scrollBar.hide(), document.body.classList.add(\"modal-open\"), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), P.on(this._element, \"click.dismiss.bs.modal\", '[data-bs-dismiss=\"modal\"]', (t)=>this.hide(t)), P.on(this._dialog, \"mousedown.dismiss.bs.modal\", ()=>{\n                P.one(this._element, \"mouseup.dismiss.bs.modal\", (t)=>{\n                    t.target === this._element && (this._ignoreBackdropClick = !0);\n                });\n            }), this._showBackdrop(()=>this._showElement(t)));\n        }\n        hide(t) {\n            if (t && [\n                \"A\",\n                \"AREA\"\n            ].includes(t.target.tagName) && t.preventDefault(), !this._isShown || this._isTransitioning) return;\n            if (P.trigger(this._element, \"hide.bs.modal\").defaultPrevented) return;\n            this._isShown = !1;\n            const e = this._isAnimated();\n            e && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), P.off(document, \"focusin.bs.modal\"), this._element.classList.remove(\"show\"), P.off(this._element, \"click.dismiss.bs.modal\"), P.off(this._dialog, \"mousedown.dismiss.bs.modal\"), this._queueCallback(()=>this._hideModal(), this._element, e);\n        }\n        dispose() {\n            [\n                window,\n                this._dialog\n            ].forEach((t)=>P.off(t, \".bs.modal\")), this._backdrop.dispose(), super.dispose(), P.off(document, \"focusin.bs.modal\");\n        }\n        handleUpdate() {\n            this._adjustDialog();\n        }\n        _initializeBackDrop() {\n            return new ke({\n                isVisible: Boolean(this._config.backdrop),\n                isAnimated: this._isAnimated()\n            });\n        }\n        _getConfig(t) {\n            return t = {\n                ...Le,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t ? t : {}\n            }, l(\"modal\", t, xe), t;\n        }\n        _showElement(e) {\n            const i = this._isAnimated(), n = t.findOne(\".modal-body\", this._dialog);\n            this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.scrollTop = 0, n && (n.scrollTop = 0), i && f(this._element), this._element.classList.add(\"show\"), this._config.focus && this._enforceFocus(), this._queueCallback(()=>{\n                this._config.focus && this._element.focus(), this._isTransitioning = !1, P.trigger(this._element, \"shown.bs.modal\", {\n                    relatedTarget: e\n                });\n            }, this._dialog, i);\n        }\n        _enforceFocus() {\n            P.off(document, \"focusin.bs.modal\"), P.on(document, \"focusin.bs.modal\", (t)=>{\n                document === t.target || this._element === t.target || this._element.contains(t.target) || this._element.focus();\n            });\n        }\n        _setEscapeEvent() {\n            this._isShown ? P.on(this._element, \"keydown.dismiss.bs.modal\", (t)=>{\n                this._config.keyboard && \"Escape\" === t.key ? (t.preventDefault(), this.hide()) : this._config.keyboard || \"Escape\" !== t.key || this._triggerBackdropTransition();\n            }) : P.off(this._element, \"keydown.dismiss.bs.modal\");\n        }\n        _setResizeEvent() {\n            this._isShown ? P.on(window, \"resize.bs.modal\", ()=>this._adjustDialog()) : P.off(window, \"resize.bs.modal\");\n        }\n        _hideModal() {\n            this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._backdrop.hide(()=>{\n                document.body.classList.remove(\"modal-open\"), this._resetAdjustments(), this._scrollBar.reset(), P.trigger(this._element, \"hidden.bs.modal\");\n            });\n        }\n        _showBackdrop(t) {\n            P.on(this._element, \"click.dismiss.bs.modal\", (t)=>{\n                this._ignoreBackdropClick ? this._ignoreBackdropClick = !1 : t.target === t.currentTarget && (!0 === this._config.backdrop ? this.hide() : \"static\" === this._config.backdrop && this._triggerBackdropTransition());\n            }), this._backdrop.show(t);\n        }\n        _isAnimated() {\n            return this._element.classList.contains(\"fade\");\n        }\n        _triggerBackdropTransition() {\n            if (P.trigger(this._element, \"hidePrevented.bs.modal\").defaultPrevented) return;\n            const { classList: t , scrollHeight: e , style: i  } = this._element, n = e > document.documentElement.clientHeight;\n            !n && \"hidden\" === i.overflowY || t.contains(\"modal-static\") || (n || (i.overflowY = \"hidden\"), t.add(\"modal-static\"), this._queueCallback(()=>{\n                t.remove(\"modal-static\"), n || this._queueCallback(()=>{\n                    i.overflowY = \"\";\n                }, this._dialog);\n            }, this._dialog), this._element.focus());\n        }\n        _adjustDialog() {\n            const t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), i = e > 0;\n            (!i && t && !g() || i && !t && g()) && (this._element.style.paddingLeft = e + \"px\"), (i && !t && !g() || !i && t && g()) && (this._element.style.paddingRight = e + \"px\");\n        }\n        _resetAdjustments() {\n            this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n        }\n        static jQueryInterface(t, e) {\n            return this.each(function() {\n                const i = De.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === i[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    i[t](e);\n                }\n            });\n        }\n        constructor(e, i){\n            super(e), this._config = this._getConfig(i), this._dialog = t.findOne(\".modal-dialog\", this._element), this._backdrop = this._initializeBackDrop(), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollBar = new Te;\n        }\n    }\n    P.on(document, \"click.bs.modal.data-api\", '[data-bs-toggle=\"modal\"]', function(t) {\n        const e = s(this);\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && t.preventDefault(), P.one(e, \"show.bs.modal\", (t)=>{\n            t.defaultPrevented || P.one(e, \"hidden.bs.modal\", ()=>{\n                c(this) && this.focus();\n            });\n        }), De.getOrCreateInstance(e).toggle(this);\n    }), _(De);\n    const Se = {\n        backdrop: !0,\n        keyboard: !0,\n        scroll: !1\n    }, Ie = {\n        backdrop: \"boolean\",\n        keyboard: \"boolean\",\n        scroll: \"boolean\"\n    };\n    class Ne extends B {\n        static get NAME() {\n            return \"offcanvas\";\n        }\n        static get Default() {\n            return Se;\n        }\n        toggle(t) {\n            return this._isShown ? this.hide() : this.show(t);\n        }\n        show(t) {\n            this._isShown || P.trigger(this._element, \"show.bs.offcanvas\", {\n                relatedTarget: t\n            }).defaultPrevented || (this._isShown = !0, this._element.style.visibility = \"visible\", this._backdrop.show(), this._config.scroll || ((new Te).hide(), this._enforceFocusOnElement(this._element)), this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.classList.add(\"show\"), this._queueCallback(()=>{\n                P.trigger(this._element, \"shown.bs.offcanvas\", {\n                    relatedTarget: t\n                });\n            }, this._element, !0));\n        }\n        hide() {\n            this._isShown && (P.trigger(this._element, \"hide.bs.offcanvas\").defaultPrevented || (P.off(document, \"focusin.bs.offcanvas\"), this._element.blur(), this._isShown = !1, this._element.classList.remove(\"show\"), this._backdrop.hide(), this._queueCallback(()=>{\n                this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._element.style.visibility = \"hidden\", this._config.scroll || (new Te).reset(), P.trigger(this._element, \"hidden.bs.offcanvas\");\n            }, this._element, !0)));\n        }\n        dispose() {\n            this._backdrop.dispose(), super.dispose(), P.off(document, \"focusin.bs.offcanvas\");\n        }\n        _getConfig(t) {\n            return t = {\n                ...Se,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t ? t : {}\n            }, l(\"offcanvas\", t, Ie), t;\n        }\n        _initializeBackDrop() {\n            return new ke({\n                isVisible: this._config.backdrop,\n                isAnimated: !0,\n                rootElement: this._element.parentNode,\n                clickCallback: ()=>this.hide()\n            });\n        }\n        _enforceFocusOnElement(t) {\n            P.off(document, \"focusin.bs.offcanvas\"), P.on(document, \"focusin.bs.offcanvas\", (e)=>{\n                document === e.target || t === e.target || t.contains(e.target) || t.focus();\n            }), t.focus();\n        }\n        _addEventListeners() {\n            P.on(this._element, \"click.dismiss.bs.offcanvas\", '[data-bs-dismiss=\"offcanvas\"]', ()=>this.hide()), P.on(this._element, \"keydown.dismiss.bs.offcanvas\", (t)=>{\n                this._config.keyboard && \"Escape\" === t.key && this.hide();\n            });\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Ne.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t](this);\n                }\n            });\n        }\n        constructor(t, e){\n            super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._addEventListeners();\n        }\n    }\n    P.on(document, \"click.bs.offcanvas.data-api\", '[data-bs-toggle=\"offcanvas\"]', function(e) {\n        const i = s(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), h(this)) return;\n        P.one(i, \"hidden.bs.offcanvas\", ()=>{\n            c(this) && this.focus();\n        });\n        const n = t.findOne(\".offcanvas.show\");\n        n && n !== i && Ne.getInstance(n).hide(), Ne.getOrCreateInstance(i).toggle(this);\n    }), P.on(window, \"load.bs.offcanvas.data-api\", ()=>t.find(\".offcanvas.show\").forEach((t)=>Ne.getOrCreateInstance(t).show())), _(Ne);\n    const je = new Set([\n        \"background\",\n        \"cite\",\n        \"href\",\n        \"itemtype\",\n        \"longdesc\",\n        \"poster\",\n        \"src\",\n        \"xlink:href\"\n    ]), Me = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i, Pe = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i, He = (t, e)=>{\n        const i = t.nodeName.toLowerCase();\n        if (e.includes(i)) return !je.has(i) || Boolean(Me.test(t.nodeValue) || Pe.test(t.nodeValue));\n        const n = e.filter((t)=>t instanceof RegExp);\n        for(let t1 = 0, e1 = n.length; t1 < e1; t1++)if (n[t1].test(i)) return !0;\n        return !1;\n    };\n    function Re(t, e, i) {\n        if (!t.length) return t;\n        if (i && \"function\" == typeof i) return i(t);\n        const n = (new window.DOMParser).parseFromString(t, \"text/html\"), s = Object.keys(e), o = [].concat(...n.body.querySelectorAll(\"*\"));\n        for(let t1 = 0, i1 = o.length; t1 < i1; t1++){\n            const i2 = o[t1], n1 = i2.nodeName.toLowerCase();\n            if (!s.includes(n1)) {\n                i2.remove();\n                continue;\n            }\n            const r = [].concat(...i2.attributes), a = [].concat(e[\"*\"] || [], e[n1] || []);\n            r.forEach((t)=>{\n                He(t, a) || i2.removeAttribute(t.nodeName);\n            });\n        }\n        return n.body.innerHTML;\n    }\n    const Be = new RegExp(\"(^|\\\\s)bs-tooltip\\\\S+\", \"g\"), We = new Set([\n        \"sanitize\",\n        \"allowList\",\n        \"sanitizeFn\"\n    ]), qe = {\n        animation: \"boolean\",\n        template: \"string\",\n        title: \"(string|element|function)\",\n        trigger: \"string\",\n        delay: \"(number|object)\",\n        html: \"boolean\",\n        selector: \"(string|boolean)\",\n        placement: \"(string|function)\",\n        offset: \"(array|string|function)\",\n        container: \"(string|element|boolean)\",\n        fallbackPlacements: \"array\",\n        boundary: \"(string|element)\",\n        customClass: \"(string|function)\",\n        sanitize: \"boolean\",\n        sanitizeFn: \"(null|function)\",\n        allowList: \"object\",\n        popperConfig: \"(null|object|function)\"\n    }, ze = {\n        AUTO: \"auto\",\n        TOP: \"top\",\n        RIGHT: g() ? \"left\" : \"right\",\n        BOTTOM: \"bottom\",\n        LEFT: g() ? \"right\" : \"left\"\n    }, $e = {\n        animation: !0,\n        template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n        trigger: \"hover focus\",\n        title: \"\",\n        delay: 0,\n        html: !1,\n        selector: !1,\n        placement: \"top\",\n        offset: [\n            0,\n            0\n        ],\n        container: !1,\n        fallbackPlacements: [\n            \"top\",\n            \"right\",\n            \"bottom\",\n            \"left\"\n        ],\n        boundary: \"clippingParents\",\n        customClass: \"\",\n        sanitize: !0,\n        sanitizeFn: null,\n        allowList: {\n            \"*\": [\n                \"class\",\n                \"dir\",\n                \"id\",\n                \"lang\",\n                \"role\",\n                /^aria-[\\w-]*$/i\n            ],\n            a: [\n                \"target\",\n                \"href\",\n                \"title\",\n                \"rel\"\n            ],\n            area: [],\n            b: [],\n            br: [],\n            col: [],\n            code: [],\n            div: [],\n            em: [],\n            hr: [],\n            h1: [],\n            h2: [],\n            h3: [],\n            h4: [],\n            h5: [],\n            h6: [],\n            i: [],\n            img: [\n                \"src\",\n                \"srcset\",\n                \"alt\",\n                \"title\",\n                \"width\",\n                \"height\"\n            ],\n            li: [],\n            ol: [],\n            p: [],\n            pre: [],\n            s: [],\n            small: [],\n            span: [],\n            sub: [],\n            sup: [],\n            strong: [],\n            u: [],\n            ul: []\n        },\n        popperConfig: null\n    }, Ue = {\n        HIDE: \"hide.bs.tooltip\",\n        HIDDEN: \"hidden.bs.tooltip\",\n        SHOW: \"show.bs.tooltip\",\n        SHOWN: \"shown.bs.tooltip\",\n        INSERTED: \"inserted.bs.tooltip\",\n        CLICK: \"click.bs.tooltip\",\n        FOCUSIN: \"focusin.bs.tooltip\",\n        FOCUSOUT: \"focusout.bs.tooltip\",\n        MOUSEENTER: \"mouseenter.bs.tooltip\",\n        MOUSELEAVE: \"mouseleave.bs.tooltip\"\n    };\n    class Fe extends B {\n        static get Default() {\n            return $e;\n        }\n        static get NAME() {\n            return \"tooltip\";\n        }\n        static get Event() {\n            return Ue;\n        }\n        static get DefaultType() {\n            return qe;\n        }\n        enable() {\n            this._isEnabled = !0;\n        }\n        disable() {\n            this._isEnabled = !1;\n        }\n        toggleEnabled() {\n            this._isEnabled = !this._isEnabled;\n        }\n        toggle(t) {\n            if (this._isEnabled) if (t) {\n                const e = this._initializeOnDelegatedTarget(t);\n                e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);\n            } else {\n                if (this.getTipElement().classList.contains(\"show\")) return void this._leave(null, this);\n                this._enter(null, this);\n            }\n        }\n        dispose() {\n            clearTimeout(this._timeout), P.off(this._element.closest(\".modal\"), \"hide.bs.modal\", this._hideModalHandler), this.tip && this.tip.remove(), this._popper && this._popper.destroy(), super.dispose();\n        }\n        show() {\n            if (\"none\" === this._element.style.display) throw new Error(\"Please use show on visible elements\");\n            if (!this.isWithContent() || !this._isEnabled) return;\n            const t = P.trigger(this._element, this.constructor.Event.SHOW), i = d(this._element), n = null === i ? this._element.ownerDocument.documentElement.contains(this._element) : i.contains(this._element);\n            if (t.defaultPrevented || !n) return;\n            const s = this.getTipElement(), o = e(this.constructor.NAME);\n            s.setAttribute(\"id\", o), this._element.setAttribute(\"aria-describedby\", o), this.setContent(), this._config.animation && s.classList.add(\"fade\");\n            const r = \"function\" == typeof this._config.placement ? this._config.placement.call(this, s, this._element) : this._config.placement, a = this._getAttachment(r);\n            this._addAttachmentClass(a);\n            const { container: l  } = this._config;\n            R.set(s, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (l.appendChild(s), P.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = ue(this._element, s, this._getPopperConfig(a)), s.classList.add(\"show\");\n            const c = \"function\" == typeof this._config.customClass ? this._config.customClass() : this._config.customClass;\n            c && s.classList.add(...c.split(\" \")), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((t)=>{\n                P.on(t, \"mouseover\", u);\n            });\n            const h = this.tip.classList.contains(\"fade\");\n            this._queueCallback(()=>{\n                const t = this._hoverState;\n                this._hoverState = null, P.trigger(this._element, this.constructor.Event.SHOWN), \"out\" === t && this._leave(null, this);\n            }, this.tip, h);\n        }\n        hide() {\n            if (!this._popper) return;\n            const t = this.getTipElement();\n            if (P.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;\n            t.classList.remove(\"show\"), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((t)=>P.off(t, \"mouseover\", u)), this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1;\n            const e = this.tip.classList.contains(\"fade\");\n            this._queueCallback(()=>{\n                this._isWithActiveTrigger() || (\"show\" !== this._hoverState && t.remove(), this._cleanTipClass(), this._element.removeAttribute(\"aria-describedby\"), P.trigger(this._element, this.constructor.Event.HIDDEN), this._popper && (this._popper.destroy(), this._popper = null));\n            }, this.tip, e), this._hoverState = \"\";\n        }\n        update() {\n            null !== this._popper && this._popper.update();\n        }\n        isWithContent() {\n            return Boolean(this.getTitle());\n        }\n        getTipElement() {\n            if (this.tip) return this.tip;\n            const t = document.createElement(\"div\");\n            return t.innerHTML = this._config.template, this.tip = t.children[0], this.tip;\n        }\n        setContent() {\n            const e = this.getTipElement();\n            this.setElementContent(t.findOne(\".tooltip-inner\", e), this.getTitle()), e.classList.remove(\"fade\", \"show\");\n        }\n        setElementContent(t, e) {\n            if (null !== t) return r(e) ? (e = a(e), void (this._config.html ? e.parentNode !== t && (t.innerHTML = \"\", t.appendChild(e)) : t.textContent = e.textContent)) : void (this._config.html ? (this._config.sanitize && (e = Re(e, this._config.allowList, this._config.sanitizeFn)), t.innerHTML = e) : t.textContent = e);\n        }\n        getTitle() {\n            let t = this._element.getAttribute(\"data-bs-original-title\");\n            return t || (t = \"function\" == typeof this._config.title ? this._config.title.call(this._element) : this._config.title), t;\n        }\n        updateAttachment(t) {\n            return \"right\" === t ? \"end\" : \"left\" === t ? \"start\" : t;\n        }\n        _initializeOnDelegatedTarget(t, e) {\n            const i = this.constructor.DATA_KEY;\n            return (e = e || R.get(t.delegateTarget, i)) || (e = new this.constructor(t.delegateTarget, this._getDelegateConfig()), R.set(t.delegateTarget, i, e)), e;\n        }\n        _getOffset() {\n            const { offset: t  } = this._config;\n            return \"string\" == typeof t ? t.split(\",\").map((t)=>Number.parseInt(t, 10)) : \"function\" == typeof t ? (e)=>t(e, this._element) : t;\n        }\n        _getPopperConfig(t) {\n            const e = {\n                placement: t,\n                modifiers: [\n                    {\n                        name: \"flip\",\n                        options: {\n                            fallbackPlacements: this._config.fallbackPlacements\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    },\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"arrow\",\n                        options: {\n                            element: \".\".concat(this.constructor.NAME, \"-arrow\")\n                        }\n                    },\n                    {\n                        name: \"onChange\",\n                        enabled: !0,\n                        phase: \"afterWrite\",\n                        fn: (t)=>this._handlePopperPlacementChange(t)\n                    }\n                ],\n                onFirstUpdate: (t)=>{\n                    t.options.placement !== t.placement && this._handlePopperPlacementChange(t);\n                }\n            };\n            return {\n                ...e,\n                ...\"function\" == typeof this._config.popperConfig ? this._config.popperConfig(e) : this._config.popperConfig\n            };\n        }\n        _addAttachmentClass(t) {\n            this.getTipElement().classList.add(\"bs-tooltip-\" + this.updateAttachment(t));\n        }\n        _getAttachment(t) {\n            return ze[t.toUpperCase()];\n        }\n        _setListeners() {\n            this._config.trigger.split(\" \").forEach((t)=>{\n                if (\"click\" === t) P.on(this._element, this.constructor.Event.CLICK, this._config.selector, (t)=>this.toggle(t));\n                else if (\"manual\" !== t) {\n                    const e = \"hover\" === t ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN, i = \"hover\" === t ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n                    P.on(this._element, e, this._config.selector, (t)=>this._enter(t)), P.on(this._element, i, this._config.selector, (t)=>this._leave(t));\n                }\n            }), this._hideModalHandler = ()=>{\n                this._element && this.hide();\n            }, P.on(this._element.closest(\".modal\"), \"hide.bs.modal\", this._hideModalHandler), this._config.selector ? this._config = {\n                ...this._config,\n                trigger: \"manual\",\n                selector: \"\"\n            } : this._fixTitle();\n        }\n        _fixTitle() {\n            const t = this._element.getAttribute(\"title\"), e = typeof this._element.getAttribute(\"data-bs-original-title\");\n            (t || \"string\" !== e) && (this._element.setAttribute(\"data-bs-original-title\", t || \"\"), !t || this._element.getAttribute(\"aria-label\") || this._element.textContent || this._element.setAttribute(\"aria-label\", t), this._element.setAttribute(\"title\", \"\"));\n        }\n        _enter(t, e) {\n            e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[\"focusin\" === t.type ? \"focus\" : \"hover\"] = !0), e.getTipElement().classList.contains(\"show\") || \"show\" === e._hoverState ? e._hoverState = \"show\" : (clearTimeout(e._timeout), e._hoverState = \"show\", e._config.delay && e._config.delay.show ? e._timeout = setTimeout(()=>{\n                \"show\" === e._hoverState && e.show();\n            }, e._config.delay.show) : e.show());\n        }\n        _leave(t, e) {\n            e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[\"focusout\" === t.type ? \"focus\" : \"hover\"] = e._element.contains(t.relatedTarget)), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = \"out\", e._config.delay && e._config.delay.hide ? e._timeout = setTimeout(()=>{\n                \"out\" === e._hoverState && e.hide();\n            }, e._config.delay.hide) : e.hide());\n        }\n        _isWithActiveTrigger() {\n            for(const t in this._activeTrigger)if (this._activeTrigger[t]) return !0;\n            return !1;\n        }\n        _getConfig(t) {\n            const e = U.getDataAttributes(this._element);\n            return Object.keys(e).forEach((t)=>{\n                We.has(t) && delete e[t];\n            }), (t = {\n                ...this.constructor.Default,\n                ...e,\n                ...\"object\" == typeof t && t ? t : {}\n            }).container = !1 === t.container ? document.body : a(t.container), \"number\" == typeof t.delay && (t.delay = {\n                show: t.delay,\n                hide: t.delay\n            }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), l(\"tooltip\", t, this.constructor.DefaultType), t.sanitize && (t.template = Re(t.template, t.allowList, t.sanitizeFn)), t;\n        }\n        _getDelegateConfig() {\n            const t = {};\n            if (this._config) for(const e in this._config)this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);\n            return t;\n        }\n        _cleanTipClass() {\n            const t = this.getTipElement(), e = t.getAttribute(\"class\").match(Be);\n            null !== e && e.length > 0 && e.map((t)=>t.trim()).forEach((e)=>t.classList.remove(e));\n        }\n        _handlePopperPlacementChange(t) {\n            const { state: e  } = t;\n            e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Fe.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t]();\n                }\n            });\n        }\n        constructor(t, e){\n            if (void 0 === fe) throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n            super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();\n        }\n    }\n    _(Fe);\n    const Ve = new RegExp(\"(^|\\\\s)bs-popover\\\\S+\", \"g\"), Ke = {\n        ...Fe.Default,\n        placement: \"right\",\n        offset: [\n            0,\n            8\n        ],\n        trigger: \"click\",\n        content: \"\",\n        template: '<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n    }, Xe = {\n        ...Fe.DefaultType,\n        content: \"(string|element|function)\"\n    }, Ye = {\n        HIDE: \"hide.bs.popover\",\n        HIDDEN: \"hidden.bs.popover\",\n        SHOW: \"show.bs.popover\",\n        SHOWN: \"shown.bs.popover\",\n        INSERTED: \"inserted.bs.popover\",\n        CLICK: \"click.bs.popover\",\n        FOCUSIN: \"focusin.bs.popover\",\n        FOCUSOUT: \"focusout.bs.popover\",\n        MOUSEENTER: \"mouseenter.bs.popover\",\n        MOUSELEAVE: \"mouseleave.bs.popover\"\n    };\n    class Qe extends Fe {\n        static get Default() {\n            return Ke;\n        }\n        static get NAME() {\n            return \"popover\";\n        }\n        static get Event() {\n            return Ye;\n        }\n        static get DefaultType() {\n            return Xe;\n        }\n        isWithContent() {\n            return this.getTitle() || this._getContent();\n        }\n        getTipElement() {\n            return this.tip || (this.tip = super.getTipElement(), this.getTitle() || t.findOne(\".popover-header\", this.tip).remove(), this._getContent() || t.findOne(\".popover-body\", this.tip).remove()), this.tip;\n        }\n        setContent() {\n            const e = this.getTipElement();\n            this.setElementContent(t.findOne(\".popover-header\", e), this.getTitle());\n            let i = this._getContent();\n            \"function\" == typeof i && (i = i.call(this._element)), this.setElementContent(t.findOne(\".popover-body\", e), i), e.classList.remove(\"fade\", \"show\");\n        }\n        _addAttachmentClass(t) {\n            this.getTipElement().classList.add(\"bs-popover-\" + this.updateAttachment(t));\n        }\n        _getContent() {\n            return this._element.getAttribute(\"data-bs-content\") || this._config.content;\n        }\n        _cleanTipClass() {\n            const t = this.getTipElement(), e = t.getAttribute(\"class\").match(Ve);\n            null !== e && e.length > 0 && e.map((t)=>t.trim()).forEach((e)=>t.classList.remove(e));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Qe.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t]();\n                }\n            });\n        }\n    }\n    _(Qe);\n    const Ge = {\n        offset: 10,\n        method: \"auto\",\n        target: \"\"\n    }, Ze = {\n        offset: \"number\",\n        method: \"string\",\n        target: \"(string|element)\"\n    };\n    class Je extends B {\n        static get Default() {\n            return Ge;\n        }\n        static get NAME() {\n            return \"scrollspy\";\n        }\n        refresh() {\n            const e = this._scrollElement === this._scrollElement.window ? \"offset\" : \"position\", i = \"auto\" === this._config.method ? e : this._config.method, s = \"position\" === i ? this._getScrollTop() : 0;\n            this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), t.find(this._selector).map((e)=>{\n                const o = n(e), r = o ? t.findOne(o) : null;\n                if (r) {\n                    const t1 = r.getBoundingClientRect();\n                    if (t1.width || t1.height) return [\n                        U[i](r).top + s,\n                        o\n                    ];\n                }\n                return null;\n            }).filter((t)=>t).sort((t, e)=>t[0] - e[0]).forEach((t)=>{\n                this._offsets.push(t[0]), this._targets.push(t[1]);\n            });\n        }\n        dispose() {\n            P.off(this._scrollElement, \".bs.scrollspy\"), super.dispose();\n        }\n        _getConfig(t) {\n            if (\"string\" != typeof (t = {\n                ...Ge,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t && t ? t : {}\n            }).target && r(t.target)) {\n                let { id: i  } = t.target;\n                i || (i = e(\"scrollspy\"), t.target.id = i), t.target = \"#\" + i;\n            }\n            return l(\"scrollspy\", t, Ze), t;\n        }\n        _getScrollTop() {\n            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n        }\n        _getScrollHeight() {\n            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n        }\n        _getOffsetHeight() {\n            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n        }\n        _process() {\n            const t = this._getScrollTop() + this._config.offset, e = this._getScrollHeight(), i = this._config.offset + e - this._getOffsetHeight();\n            if (this._scrollHeight !== e && this.refresh(), t >= i) {\n                const t1 = this._targets[this._targets.length - 1];\n                this._activeTarget !== t1 && this._activate(t1);\n            } else {\n                if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();\n                for(let e1 = this._offsets.length; e1--;)this._activeTarget !== this._targets[e1] && t >= this._offsets[e1] && (void 0 === this._offsets[e1 + 1] || t < this._offsets[e1 + 1]) && this._activate(this._targets[e1]);\n            }\n        }\n        _activate(e) {\n            this._activeTarget = e, this._clear();\n            const i = this._selector.split(\",\").map((t)=>\"\".concat(t, '[data-bs-target=\"').concat(e, '\"],').concat(t, '[href=\"').concat(e, '\"]')), n = t.findOne(i.join(\",\"));\n            n.classList.contains(\"dropdown-item\") ? (t.findOne(\".dropdown-toggle\", n.closest(\".dropdown\")).classList.add(\"active\"), n.classList.add(\"active\")) : (n.classList.add(\"active\"), t.parents(n, \".nav, .list-group\").forEach((e)=>{\n                t.prev(e, \".nav-link, .list-group-item\").forEach((t)=>t.classList.add(\"active\")), t.prev(e, \".nav-item\").forEach((e)=>{\n                    t.children(e, \".nav-link\").forEach((t)=>t.classList.add(\"active\"));\n                });\n            })), P.trigger(this._scrollElement, \"activate.bs.scrollspy\", {\n                relatedTarget: e\n            });\n        }\n        _clear() {\n            t.find(this._selector).filter((t)=>t.classList.contains(\"active\")).forEach((t)=>t.classList.remove(\"active\"));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Je.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t]();\n                }\n            });\n        }\n        constructor(t, e){\n            super(t), this._scrollElement = \"BODY\" === this._element.tagName ? window : this._element, this._config = this._getConfig(e), this._selector = \"\".concat(this._config.target, \" .nav-link, \").concat(this._config.target, \" .list-group-item, \").concat(this._config.target, \" .dropdown-item\"), this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, P.on(this._scrollElement, \"scroll.bs.scrollspy\", ()=>this._process()), this.refresh(), this._process();\n        }\n    }\n    P.on(window, \"load.bs.scrollspy.data-api\", ()=>{\n        t.find('[data-bs-spy=\"scroll\"]').forEach((t)=>new Je(t));\n    }), _(Je);\n    class ti extends B {\n        static get NAME() {\n            return \"tab\";\n        }\n        show() {\n            if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(\"active\")) return;\n            let e;\n            const i = s(this._element), n = this._element.closest(\".nav, .list-group\");\n            if (n) {\n                const i1 = \"UL\" === n.nodeName || \"OL\" === n.nodeName ? \":scope > li > .active\" : \".active\";\n                e = t.find(i1, n), e = e[e.length - 1];\n            }\n            const o = e ? P.trigger(e, \"hide.bs.tab\", {\n                relatedTarget: this._element\n            }) : null;\n            if (P.trigger(this._element, \"show.bs.tab\", {\n                relatedTarget: e\n            }).defaultPrevented || null !== o && o.defaultPrevented) return;\n            this._activate(this._element, n);\n            const r = ()=>{\n                P.trigger(e, \"hidden.bs.tab\", {\n                    relatedTarget: this._element\n                }), P.trigger(this._element, \"shown.bs.tab\", {\n                    relatedTarget: e\n                });\n            };\n            i ? this._activate(i, i.parentNode, r) : r();\n        }\n        _activate(e, i, n) {\n            const s = (!i || \"UL\" !== i.nodeName && \"OL\" !== i.nodeName ? t.children(i, \".active\") : t.find(\":scope > li > .active\", i))[0], o = n && s && s.classList.contains(\"fade\"), r = ()=>this._transitionComplete(e, s, n);\n            s && o ? (s.classList.remove(\"show\"), this._queueCallback(r, e, !0)) : r();\n        }\n        _transitionComplete(e, i, n) {\n            if (i) {\n                i.classList.remove(\"active\");\n                const e1 = t.findOne(\":scope > .dropdown-menu .active\", i.parentNode);\n                e1 && e1.classList.remove(\"active\"), \"tab\" === i.getAttribute(\"role\") && i.setAttribute(\"aria-selected\", !1);\n            }\n            e.classList.add(\"active\"), \"tab\" === e.getAttribute(\"role\") && e.setAttribute(\"aria-selected\", !0), f(e), e.classList.contains(\"fade\") && e.classList.add(\"show\");\n            let s = e.parentNode;\n            if (s && \"LI\" === s.nodeName && (s = s.parentNode), s && s.classList.contains(\"dropdown-menu\")) {\n                const i1 = e.closest(\".dropdown\");\n                i1 && t.find(\".dropdown-toggle\", i1).forEach((t)=>t.classList.add(\"active\")), e.setAttribute(\"aria-expanded\", !0);\n            }\n            n && n();\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = ti.getOrCreateInstance(this);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t]();\n                }\n            });\n        }\n    }\n    P.on(document, \"click.bs.tab.data-api\", '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]', function(t) {\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && t.preventDefault(), h(this) || ti.getOrCreateInstance(this).show();\n    }), _(ti);\n    const ei = {\n        animation: \"boolean\",\n        autohide: \"boolean\",\n        delay: \"number\"\n    }, ii = {\n        animation: !0,\n        autohide: !0,\n        delay: 5e3\n    };\n    class ni extends B {\n        static get DefaultType() {\n            return ei;\n        }\n        static get Default() {\n            return ii;\n        }\n        static get NAME() {\n            return \"toast\";\n        }\n        show() {\n            P.trigger(this._element, \"show.bs.toast\").defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add(\"fade\"), this._element.classList.remove(\"hide\"), f(this._element), this._element.classList.add(\"showing\"), this._queueCallback(()=>{\n                this._element.classList.remove(\"showing\"), this._element.classList.add(\"show\"), P.trigger(this._element, \"shown.bs.toast\"), this._maybeScheduleHide();\n            }, this._element, this._config.animation));\n        }\n        hide() {\n            this._element.classList.contains(\"show\") && (P.trigger(this._element, \"hide.bs.toast\").defaultPrevented || (this._element.classList.remove(\"show\"), this._queueCallback(()=>{\n                this._element.classList.add(\"hide\"), P.trigger(this._element, \"hidden.bs.toast\");\n            }, this._element, this._config.animation)));\n        }\n        dispose() {\n            this._clearTimeout(), this._element.classList.contains(\"show\") && this._element.classList.remove(\"show\"), super.dispose();\n        }\n        _getConfig(t) {\n            return t = {\n                ...ii,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t && t ? t : {}\n            }, l(\"toast\", t, this.constructor.DefaultType), t;\n        }\n        _maybeScheduleHide() {\n            this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(()=>{\n                this.hide();\n            }, this._config.delay)));\n        }\n        _onInteraction(t, e) {\n            switch(t.type){\n                case \"mouseover\":\n                case \"mouseout\":\n                    this._hasMouseInteraction = e;\n                    break;\n                case \"focusin\":\n                case \"focusout\":\n                    this._hasKeyboardInteraction = e;\n            }\n            if (e) return void this._clearTimeout();\n            const i = t.relatedTarget;\n            this._element === i || this._element.contains(i) || this._maybeScheduleHide();\n        }\n        _setListeners() {\n            P.on(this._element, \"click.dismiss.bs.toast\", '[data-bs-dismiss=\"toast\"]', ()=>this.hide()), P.on(this._element, \"mouseover.bs.toast\", (t)=>this._onInteraction(t, !0)), P.on(this._element, \"mouseout.bs.toast\", (t)=>this._onInteraction(t, !1)), P.on(this._element, \"focusin.bs.toast\", (t)=>this._onInteraction(t, !0)), P.on(this._element, \"focusout.bs.toast\", (t)=>this._onInteraction(t, !1));\n        }\n        _clearTimeout() {\n            clearTimeout(this._timeout), this._timeout = null;\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = ni.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t](this);\n                }\n            });\n        }\n        constructor(t, e){\n            super(t), this._config = this._getConfig(e), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners();\n        }\n    }\n    return _(ni), {\n        Alert: W,\n        Button: q,\n        Carousel: Z,\n        Collapse: et,\n        Dropdown: Ae,\n        Modal: De,\n        Offcanvas: Ne,\n        Popover: Qe,\n        ScrollSpy: Je,\n        Tab: ti,\n        Toast: ni,\n        Tooltip: Fe\n    };\n}); //# sourceMappingURL=bootstrap.bundle.min.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvYXNzZXRzL2pzL2Jvb3RzdHJhcC5idW5kbGUubWluLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7O0VBSUUsR0FDRjtBQUFBLENBQUMsU0FBU0EsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7SUFBQyxLQUFvREUsR0FBQ0EsT0FBT0QsT0FBTyxHQUFDRCxNQUFJLENBQW1IO0FBQUEsRUFBRSxRQUFNLFdBQVU7SUFBQztJQUFhLE1BQU1ELElBQUU7UUFBQ1MsTUFBSyxTQUFDVCxHQUErQjtnQkFBN0JDLHFFQUFFUyxTQUFTQyxlQUFlO21CQUFHLEVBQUUsQ0FBQ0MsTUFBTSxJQUFJQyxRQUFRQyxTQUFTLENBQUNDLGdCQUFnQixDQUFDQyxJQUFJLENBQUNmLEdBQUVEO1FBQUU7UUFBRWlCLFNBQVEsU0FBQ2pCLEdBQStCYTtnQkFBN0JaLHFFQUFFUyxTQUFTQyxlQUFlO21CQUFHRSxRQUFRQyxTQUFTLENBQUNJLGFBQWEsQ0FBQ0YsSUFBSSxDQUFDZixHQUFFRDtRQUFDO1FBQUVtQixVQUFTLENBQUNuQixHQUFFQyxJQUFJLEVBQUUsQ0FBQ1csTUFBTSxJQUFJWixFQUFFbUIsUUFBUSxFQUFFQyxNQUFNLENBQUNwQixDQUFBQSxJQUFHQSxFQUFFcUIsT0FBTyxDQUFDcEI7UUFBSXFCLFNBQVF0QixDQUFDLEVBQUNDLENBQUMsRUFBQztZQUFDLE1BQU1zQixJQUFFLEVBQUU7WUFBQyxJQUFJQyxJQUFFeEIsRUFBRXlCLFVBQVU7WUFBQyxNQUFLRCxLQUFHQSxFQUFFRSxRQUFRLEtBQUdDLEtBQUtDLFlBQVksSUFBRSxNQUFJSixFQUFFRSxRQUFRLEVBQUVGLEVBQUVILE9BQU8sQ0FBQ3BCLE1BQUlzQixFQUFFTSxJQUFJLENBQUNMLElBQUdBLElBQUVBLEVBQUVDLFVBQVU7WUFBQyxPQUFPRjtRQUFDO1FBQUVPLE1BQUs5QixDQUFDLEVBQUNDLENBQUMsRUFBQztZQUFDLElBQUlzQixJQUFFdkIsRUFBRStCLHNCQUFzQjtZQUFDLE1BQUtSLEdBQUc7Z0JB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bGUubWluLmpzP2YxMGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gICogQm9vdHN0cmFwIHY1LjAuMiAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDIxIFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICovXG4hZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLmJvb3RzdHJhcD1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgdD17ZmluZDoodCxlPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk9PltdLmNvbmNhdCguLi5FbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLmNhbGwoZSx0KSksZmluZE9uZToodCxlPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk9PkVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IuY2FsbChlLHQpLGNoaWxkcmVuOih0LGUpPT5bXS5jb25jYXQoLi4udC5jaGlsZHJlbikuZmlsdGVyKHQ9PnQubWF0Y2hlcyhlKSkscGFyZW50cyh0LGUpe2NvbnN0IGk9W107bGV0IG49dC5wYXJlbnROb2RlO2Zvcig7biYmbi5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiYzIT09bi5ub2RlVHlwZTspbi5tYXRjaGVzKGUpJiZpLnB1c2gobiksbj1uLnBhcmVudE5vZGU7cmV0dXJuIGl9LHByZXYodCxlKXtsZXQgaT10LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7Zm9yKDtpOyl7aWYoaS5tYXRjaGVzKGUpKXJldHVybltpXTtpPWkucHJldmlvdXNFbGVtZW50U2libGluZ31yZXR1cm5bXX0sbmV4dCh0LGUpe2xldCBpPXQubmV4dEVsZW1lbnRTaWJsaW5nO2Zvcig7aTspe2lmKGkubWF0Y2hlcyhlKSlyZXR1cm5baV07aT1pLm5leHRFbGVtZW50U2libGluZ31yZXR1cm5bXX19LGU9dD0+e2Rve3QrPU1hdGguZmxvb3IoMWU2Kk1hdGgucmFuZG9tKCkpfXdoaWxlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpKTtyZXR1cm4gdH0saT10PT57bGV0IGU9dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLXRhcmdldFwiKTtpZighZXx8XCIjXCI9PT1lKXtsZXQgaT10LmdldEF0dHJpYnV0ZShcImhyZWZcIik7aWYoIWl8fCFpLmluY2x1ZGVzKFwiI1wiKSYmIWkuc3RhcnRzV2l0aChcIi5cIikpcmV0dXJuIG51bGw7aS5pbmNsdWRlcyhcIiNcIikmJiFpLnN0YXJ0c1dpdGgoXCIjXCIpJiYoaT1cIiNcIitpLnNwbGl0KFwiI1wiKVsxXSksZT1pJiZcIiNcIiE9PWk/aS50cmltKCk6bnVsbH1yZXR1cm4gZX0sbj10PT57Y29uc3QgZT1pKHQpO3JldHVybiBlJiZkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpP2U6bnVsbH0scz10PT57Y29uc3QgZT1pKHQpO3JldHVybiBlP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk6bnVsbH0sbz10PT57dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInRyYW5zaXRpb25lbmRcIikpfSxyPXQ9PiEoIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0KSYmKHZvaWQgMCE9PXQuanF1ZXJ5JiYodD10WzBdKSx2b2lkIDAhPT10Lm5vZGVUeXBlKSxhPWU9PnIoZSk/ZS5qcXVlcnk/ZVswXTplOlwic3RyaW5nXCI9PXR5cGVvZiBlJiZlLmxlbmd0aD4wP3QuZmluZE9uZShlKTpudWxsLGw9KHQsZSxpKT0+e09iamVjdC5rZXlzKGkpLmZvckVhY2gobj0+e2NvbnN0IHM9aVtuXSxvPWVbbl0sYT1vJiZyKG8pP1wiZWxlbWVudFwiOm51bGw9PShsPW8pP1wiXCIrbDp7fS50b1N0cmluZy5jYWxsKGwpLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpO3ZhciBsO2lmKCFuZXcgUmVnRXhwKHMpLnRlc3QoYSkpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0LnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCIke259XCIgcHJvdmlkZWQgdHlwZSBcIiR7YX1cIiBidXQgZXhwZWN0ZWQgdHlwZSBcIiR7c31cIi5gKX0pfSxjPXQ9PiEoIXIodCl8fDA9PT10LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKSYmXCJ2aXNpYmxlXCI9PT1nZXRDb21wdXRlZFN0eWxlKHQpLmdldFByb3BlcnR5VmFsdWUoXCJ2aXNpYmlsaXR5XCIpLGg9dD0+IXR8fHQubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERXx8ISF0LmNsYXNzTGlzdC5jb250YWlucyhcImRpc2FibGVkXCIpfHwodm9pZCAwIT09dC5kaXNhYmxlZD90LmRpc2FibGVkOnQuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIikmJlwiZmFsc2VcIiE9PXQuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikpLGQ9dD0+e2lmKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZ2V0Um9vdE5vZGUpe2NvbnN0IGU9dC5nZXRSb290Tm9kZSgpO3JldHVybiBlIGluc3RhbmNlb2YgU2hhZG93Um9vdD9lOm51bGx9cmV0dXJuIHQgaW5zdGFuY2VvZiBTaGFkb3dSb290P3Q6dC5wYXJlbnROb2RlP2QodC5wYXJlbnROb2RlKTpudWxsfSx1PSgpPT57fSxmPXQ9PnQub2Zmc2V0SGVpZ2h0LHA9KCk9Pntjb25zdHtqUXVlcnk6dH09d2luZG93O3JldHVybiB0JiYhZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWJzLW5vLWpxdWVyeVwiKT90Om51bGx9LG09W10sZz0oKT0+XCJydGxcIj09PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kaXIsXz10PT57dmFyIGU7ZT0oKT0+e2NvbnN0IGU9cCgpO2lmKGUpe2NvbnN0IGk9dC5OQU1FLG49ZS5mbltpXTtlLmZuW2ldPXQualF1ZXJ5SW50ZXJmYWNlLGUuZm5baV0uQ29uc3RydWN0b3I9dCxlLmZuW2ldLm5vQ29uZmxpY3Q9KCk9PihlLmZuW2ldPW4sdC5qUXVlcnlJbnRlcmZhY2UpfX0sXCJsb2FkaW5nXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlPyhtLmxlbmd0aHx8ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwoKT0+e20uZm9yRWFjaCh0PT50KCkpfSksbS5wdXNoKGUpKTplKCl9LGI9dD0+e1wiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQoKX0sdj0odCxlLGk9ITApPT57aWYoIWkpcmV0dXJuIHZvaWQgYih0KTtjb25zdCBuPSh0PT57aWYoIXQpcmV0dXJuIDA7bGV0e3RyYW5zaXRpb25EdXJhdGlvbjplLHRyYW5zaXRpb25EZWxheTppfT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KTtjb25zdCBuPU51bWJlci5wYXJzZUZsb2F0KGUpLHM9TnVtYmVyLnBhcnNlRmxvYXQoaSk7cmV0dXJuIG58fHM/KGU9ZS5zcGxpdChcIixcIilbMF0saT1pLnNwbGl0KFwiLFwiKVswXSwxZTMqKE51bWJlci5wYXJzZUZsb2F0KGUpK051bWJlci5wYXJzZUZsb2F0KGkpKSk6MH0pKGUpKzU7bGV0IHM9ITE7Y29uc3Qgcj0oe3RhcmdldDppfSk9PntpPT09ZSYmKHM9ITAsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLHIpLGIodCkpfTtlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsciksc2V0VGltZW91dCgoKT0+e3N8fG8oZSl9LG4pfSx5PSh0LGUsaSxuKT0+e2xldCBzPXQuaW5kZXhPZihlKTtpZigtMT09PXMpcmV0dXJuIHRbIWkmJm4/dC5sZW5ndGgtMTowXTtjb25zdCBvPXQubGVuZ3RoO3JldHVybiBzKz1pPzE6LTEsbiYmKHM9KHMrbyklbyksdFtNYXRoLm1heCgwLE1hdGgubWluKHMsby0xKSldfSx3PS9bXi5dKig/PVxcLi4qKVxcLnwuKi8sRT0vXFwuLiovLEE9Lzo6XFxkKyQvLFQ9e307bGV0IE89MTtjb25zdCBDPXttb3VzZWVudGVyOlwibW91c2VvdmVyXCIsbW91c2VsZWF2ZTpcIm1vdXNlb3V0XCJ9LGs9L14obW91c2VlbnRlcnxtb3VzZWxlYXZlKS9pLEw9bmV3IFNldChbXCJjbGlja1wiLFwiZGJsY2xpY2tcIixcIm1vdXNldXBcIixcIm1vdXNlZG93blwiLFwiY29udGV4dG1lbnVcIixcIm1vdXNld2hlZWxcIixcIkRPTU1vdXNlU2Nyb2xsXCIsXCJtb3VzZW92ZXJcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW1vdmVcIixcInNlbGVjdHN0YXJ0XCIsXCJzZWxlY3RlbmRcIixcImtleWRvd25cIixcImtleXByZXNzXCIsXCJrZXl1cFwiLFwib3JpZW50YXRpb25jaGFuZ2VcIixcInRvdWNoc3RhcnRcIixcInRvdWNobW92ZVwiLFwidG91Y2hlbmRcIixcInRvdWNoY2FuY2VsXCIsXCJwb2ludGVyZG93blwiLFwicG9pbnRlcm1vdmVcIixcInBvaW50ZXJ1cFwiLFwicG9pbnRlcmxlYXZlXCIsXCJwb2ludGVyY2FuY2VsXCIsXCJnZXN0dXJlc3RhcnRcIixcImdlc3R1cmVjaGFuZ2VcIixcImdlc3R1cmVlbmRcIixcImZvY3VzXCIsXCJibHVyXCIsXCJjaGFuZ2VcIixcInJlc2V0XCIsXCJzZWxlY3RcIixcInN1Ym1pdFwiLFwiZm9jdXNpblwiLFwiZm9jdXNvdXRcIixcImxvYWRcIixcInVubG9hZFwiLFwiYmVmb3JldW5sb2FkXCIsXCJyZXNpemVcIixcIm1vdmVcIixcIkRPTUNvbnRlbnRMb2FkZWRcIixcInJlYWR5c3RhdGVjaGFuZ2VcIixcImVycm9yXCIsXCJhYm9ydFwiLFwic2Nyb2xsXCJdKTtmdW5jdGlvbiB4KHQsZSl7cmV0dXJuIGUmJmAke2V9Ojoke08rK31gfHx0LnVpZEV2ZW50fHxPKyt9ZnVuY3Rpb24gRCh0KXtjb25zdCBlPXgodCk7cmV0dXJuIHQudWlkRXZlbnQ9ZSxUW2VdPVRbZV18fHt9LFRbZV19ZnVuY3Rpb24gUyh0LGUsaT1udWxsKXtjb25zdCBuPU9iamVjdC5rZXlzKHQpO2ZvcihsZXQgcz0wLG89bi5sZW5ndGg7czxvO3MrKyl7Y29uc3Qgbz10W25bc11dO2lmKG8ub3JpZ2luYWxIYW5kbGVyPT09ZSYmby5kZWxlZ2F0aW9uU2VsZWN0b3I9PT1pKXJldHVybiBvfXJldHVybiBudWxsfWZ1bmN0aW9uIEkodCxlLGkpe2NvbnN0IG49XCJzdHJpbmdcIj09dHlwZW9mIGUscz1uP2k6ZTtsZXQgbz1NKHQpO3JldHVybiBMLmhhcyhvKXx8KG89dCksW24scyxvXX1mdW5jdGlvbiBOKHQsZSxpLG4scyl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCF0KXJldHVybjtpZihpfHwoaT1uLG49bnVsbCksay50ZXN0KGUpKXtjb25zdCB0PXQ9PmZ1bmN0aW9uKGUpe2lmKCFlLnJlbGF0ZWRUYXJnZXR8fGUucmVsYXRlZFRhcmdldCE9PWUuZGVsZWdhdGVUYXJnZXQmJiFlLmRlbGVnYXRlVGFyZ2V0LmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCkpcmV0dXJuIHQuY2FsbCh0aGlzLGUpfTtuP249dChuKTppPXQoaSl9Y29uc3RbbyxyLGFdPUkoZSxpLG4pLGw9RCh0KSxjPWxbYV18fChsW2FdPXt9KSxoPVMoYyxyLG8/aTpudWxsKTtpZihoKXJldHVybiB2b2lkKGgub25lT2ZmPWgub25lT2ZmJiZzKTtjb25zdCBkPXgocixlLnJlcGxhY2UodyxcIlwiKSksdT1vP2Z1bmN0aW9uKHQsZSxpKXtyZXR1cm4gZnVuY3Rpb24gbihzKXtjb25zdCBvPXQucXVlcnlTZWxlY3RvckFsbChlKTtmb3IobGV0e3RhcmdldDpyfT1zO3ImJnIhPT10aGlzO3I9ci5wYXJlbnROb2RlKWZvcihsZXQgYT1vLmxlbmd0aDthLS07KWlmKG9bYV09PT1yKXJldHVybiBzLmRlbGVnYXRlVGFyZ2V0PXIsbi5vbmVPZmYmJlAub2ZmKHQscy50eXBlLGUsaSksaS5hcHBseShyLFtzXSk7cmV0dXJuIG51bGx9fSh0LGksbik6ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24gaShuKXtyZXR1cm4gbi5kZWxlZ2F0ZVRhcmdldD10LGkub25lT2ZmJiZQLm9mZih0LG4udHlwZSxlKSxlLmFwcGx5KHQsW25dKX19KHQsaSk7dS5kZWxlZ2F0aW9uU2VsZWN0b3I9bz9pOm51bGwsdS5vcmlnaW5hbEhhbmRsZXI9cix1Lm9uZU9mZj1zLHUudWlkRXZlbnQ9ZCxjW2RdPXUsdC5hZGRFdmVudExpc3RlbmVyKGEsdSxvKX1mdW5jdGlvbiBqKHQsZSxpLG4scyl7Y29uc3Qgbz1TKGVbaV0sbixzKTtvJiYodC5yZW1vdmVFdmVudExpc3RlbmVyKGksbyxCb29sZWFuKHMpKSxkZWxldGUgZVtpXVtvLnVpZEV2ZW50XSl9ZnVuY3Rpb24gTSh0KXtyZXR1cm4gdD10LnJlcGxhY2UoRSxcIlwiKSxDW3RdfHx0fWNvbnN0IFA9e29uKHQsZSxpLG4pe04odCxlLGksbiwhMSl9LG9uZSh0LGUsaSxuKXtOKHQsZSxpLG4sITApfSxvZmYodCxlLGksbil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCF0KXJldHVybjtjb25zdFtzLG8scl09SShlLGksbiksYT1yIT09ZSxsPUQodCksYz1lLnN0YXJ0c1dpdGgoXCIuXCIpO2lmKHZvaWQgMCE9PW8pe2lmKCFsfHwhbFtyXSlyZXR1cm47cmV0dXJuIHZvaWQgaih0LGwscixvLHM/aTpudWxsKX1jJiZPYmplY3Qua2V5cyhsKS5mb3JFYWNoKGk9PnshZnVuY3Rpb24odCxlLGksbil7Y29uc3Qgcz1lW2ldfHx7fTtPYmplY3Qua2V5cyhzKS5mb3JFYWNoKG89PntpZihvLmluY2x1ZGVzKG4pKXtjb25zdCBuPXNbb107aih0LGUsaSxuLm9yaWdpbmFsSGFuZGxlcixuLmRlbGVnYXRpb25TZWxlY3Rvcil9fSl9KHQsbCxpLGUuc2xpY2UoMSkpfSk7Y29uc3QgaD1sW3JdfHx7fTtPYmplY3Qua2V5cyhoKS5mb3JFYWNoKGk9Pntjb25zdCBuPWkucmVwbGFjZShBLFwiXCIpO2lmKCFhfHxlLmluY2x1ZGVzKG4pKXtjb25zdCBlPWhbaV07aih0LGwscixlLm9yaWdpbmFsSGFuZGxlcixlLmRlbGVnYXRpb25TZWxlY3Rvcil9fSl9LHRyaWdnZXIodCxlLGkpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwhdClyZXR1cm4gbnVsbDtjb25zdCBuPXAoKSxzPU0oZSksbz1lIT09cyxyPUwuaGFzKHMpO2xldCBhLGw9ITAsYz0hMCxoPSExLGQ9bnVsbDtyZXR1cm4gbyYmbiYmKGE9bi5FdmVudChlLGkpLG4odCkudHJpZ2dlcihhKSxsPSFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCksYz0hYS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpLGg9YS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkscj8oZD1kb2N1bWVudC5jcmVhdGVFdmVudChcIkhUTUxFdmVudHNcIiksZC5pbml0RXZlbnQocyxsLCEwKSk6ZD1uZXcgQ3VzdG9tRXZlbnQoZSx7YnViYmxlczpsLGNhbmNlbGFibGU6ITB9KSx2b2lkIDAhPT1pJiZPYmplY3Qua2V5cyhpKS5mb3JFYWNoKHQ9PntPYmplY3QuZGVmaW5lUHJvcGVydHkoZCx0LHtnZXQ6KCk9PmlbdF19KX0pLGgmJmQucHJldmVudERlZmF1bHQoKSxjJiZ0LmRpc3BhdGNoRXZlbnQoZCksZC5kZWZhdWx0UHJldmVudGVkJiZ2b2lkIDAhPT1hJiZhLnByZXZlbnREZWZhdWx0KCksZH19LEg9bmV3IE1hcDt2YXIgUj17c2V0KHQsZSxpKXtILmhhcyh0KXx8SC5zZXQodCxuZXcgTWFwKTtjb25zdCBuPUguZ2V0KHQpO24uaGFzKGUpfHwwPT09bi5zaXplP24uc2V0KGUsaSk6Y29uc29sZS5lcnJvcihgQm9vdHN0cmFwIGRvZXNuJ3QgYWxsb3cgbW9yZSB0aGFuIG9uZSBpbnN0YW5jZSBwZXIgZWxlbWVudC4gQm91bmQgaW5zdGFuY2U6ICR7QXJyYXkuZnJvbShuLmtleXMoKSlbMF19LmApfSxnZXQ6KHQsZSk9PkguaGFzKHQpJiZILmdldCh0KS5nZXQoZSl8fG51bGwscmVtb3ZlKHQsZSl7aWYoIUguaGFzKHQpKXJldHVybjtjb25zdCBpPUguZ2V0KHQpO2kuZGVsZXRlKGUpLDA9PT1pLnNpemUmJkguZGVsZXRlKHQpfX07Y2xhc3MgQntjb25zdHJ1Y3Rvcih0KXsodD1hKHQpKSYmKHRoaXMuX2VsZW1lbnQ9dCxSLnNldCh0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksdGhpcykpfWRpc3Bvc2UoKXtSLnJlbW92ZSh0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpLFAub2ZmKHRoaXMuX2VsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpLE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpLmZvckVhY2godD0+e3RoaXNbdF09bnVsbH0pfV9xdWV1ZUNhbGxiYWNrKHQsZSxpPSEwKXt2KHQsZSxpKX1zdGF0aWMgZ2V0SW5zdGFuY2UodCl7cmV0dXJuIFIuZ2V0KHQsdGhpcy5EQVRBX0tFWSl9c3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UodCxlPXt9KXtyZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSh0KXx8bmV3IHRoaXModCxcIm9iamVjdFwiPT10eXBlb2YgZT9lOm51bGwpfXN0YXRpYyBnZXQgVkVSU0lPTigpe3JldHVyblwiNS4wLjJcIn1zdGF0aWMgZ2V0IE5BTUUoKXt0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHRvIGltcGxlbWVudCB0aGUgc3RhdGljIG1ldGhvZCBcIk5BTUVcIiwgZm9yIGVhY2ggY29tcG9uZW50IScpfXN0YXRpYyBnZXQgREFUQV9LRVkoKXtyZXR1cm5cImJzLlwiK3RoaXMuTkFNRX1zdGF0aWMgZ2V0IEVWRU5UX0tFWSgpe3JldHVyblwiLlwiK3RoaXMuREFUQV9LRVl9fWNsYXNzIFcgZXh0ZW5kcyBCe3N0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwiYWxlcnRcIn1jbG9zZSh0KXtjb25zdCBlPXQ/dGhpcy5fZ2V0Um9vdEVsZW1lbnQodCk6dGhpcy5fZWxlbWVudCxpPXRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KGUpO251bGw9PT1pfHxpLmRlZmF1bHRQcmV2ZW50ZWR8fHRoaXMuX3JlbW92ZUVsZW1lbnQoZSl9X2dldFJvb3RFbGVtZW50KHQpe3JldHVybiBzKHQpfHx0LmNsb3Nlc3QoXCIuYWxlcnRcIil9X3RyaWdnZXJDbG9zZUV2ZW50KHQpe3JldHVybiBQLnRyaWdnZXIodCxcImNsb3NlLmJzLmFsZXJ0XCIpfV9yZW1vdmVFbGVtZW50KHQpe3QuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7Y29uc3QgZT10LmNsYXNzTGlzdC5jb250YWlucyhcImZhZGVcIik7dGhpcy5fcXVldWVDYWxsYmFjaygoKT0+dGhpcy5fZGVzdHJveUVsZW1lbnQodCksdCxlKX1fZGVzdHJveUVsZW1lbnQodCl7dC5yZW1vdmUoKSxQLnRyaWdnZXIodCxcImNsb3NlZC5icy5hbGVydFwiKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1XLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7XCJjbG9zZVwiPT09dCYmZVt0XSh0aGlzKX0pKX1zdGF0aWMgaGFuZGxlRGlzbWlzcyh0KXtyZXR1cm4gZnVuY3Rpb24oZSl7ZSYmZS5wcmV2ZW50RGVmYXVsdCgpLHQuY2xvc2UodGhpcyl9fX1QLm9uKGRvY3VtZW50LFwiY2xpY2suYnMuYWxlcnQuZGF0YS1hcGlcIiwnW2RhdGEtYnMtZGlzbWlzcz1cImFsZXJ0XCJdJyxXLmhhbmRsZURpc21pc3MobmV3IFcpKSxfKFcpO2NsYXNzIHEgZXh0ZW5kcyBCe3N0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwiYnV0dG9uXCJ9dG9nZ2xlKCl7dGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXByZXNzZWRcIix0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJhY3RpdmVcIikpfXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtjb25zdCBlPXEuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKTtcInRvZ2dsZVwiPT09dCYmZVt0XSgpfSkpfX1mdW5jdGlvbiB6KHQpe3JldHVyblwidHJ1ZVwiPT09dHx8XCJmYWxzZVwiIT09dCYmKHQ9PT1OdW1iZXIodCkudG9TdHJpbmcoKT9OdW1iZXIodCk6XCJcIj09PXR8fFwibnVsbFwiPT09dD9udWxsOnQpfWZ1bmN0aW9uICQodCl7cmV0dXJuIHQucmVwbGFjZSgvW0EtWl0vZyx0PT5cIi1cIit0LnRvTG93ZXJDYXNlKCkpfVAub24oZG9jdW1lbnQsXCJjbGljay5icy5idXR0b24uZGF0YS1hcGlcIiwnW2RhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uXCJdJyx0PT57dC5wcmV2ZW50RGVmYXVsdCgpO2NvbnN0IGU9dC50YXJnZXQuY2xvc2VzdCgnW2RhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uXCJdJyk7cS5nZXRPckNyZWF0ZUluc3RhbmNlKGUpLnRvZ2dsZSgpfSksXyhxKTtjb25zdCBVPXtzZXREYXRhQXR0cmlidXRlKHQsZSxpKXt0LnNldEF0dHJpYnV0ZShcImRhdGEtYnMtXCIrJChlKSxpKX0scmVtb3ZlRGF0YUF0dHJpYnV0ZSh0LGUpe3QucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1icy1cIiskKGUpKX0sZ2V0RGF0YUF0dHJpYnV0ZXModCl7aWYoIXQpcmV0dXJue307Y29uc3QgZT17fTtyZXR1cm4gT2JqZWN0LmtleXModC5kYXRhc2V0KS5maWx0ZXIodD0+dC5zdGFydHNXaXRoKFwiYnNcIikpLmZvckVhY2goaT0+e2xldCBuPWkucmVwbGFjZSgvXmJzLyxcIlwiKTtuPW4uY2hhckF0KDApLnRvTG93ZXJDYXNlKCkrbi5zbGljZSgxLG4ubGVuZ3RoKSxlW25dPXoodC5kYXRhc2V0W2ldKX0pLGV9LGdldERhdGFBdHRyaWJ1dGU6KHQsZSk9PnoodC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLVwiKyQoZSkpKSxvZmZzZXQodCl7Y29uc3QgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3JldHVybnt0b3A6ZS50b3ArZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsbGVmdDplLmxlZnQrZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0fX0scG9zaXRpb246dD0+KHt0b3A6dC5vZmZzZXRUb3AsbGVmdDp0Lm9mZnNldExlZnR9KX0sRj17aW50ZXJ2YWw6NWUzLGtleWJvYXJkOiEwLHNsaWRlOiExLHBhdXNlOlwiaG92ZXJcIix3cmFwOiEwLHRvdWNoOiEwfSxWPXtpbnRlcnZhbDpcIihudW1iZXJ8Ym9vbGVhbilcIixrZXlib2FyZDpcImJvb2xlYW5cIixzbGlkZTpcIihib29sZWFufHN0cmluZylcIixwYXVzZTpcIihzdHJpbmd8Ym9vbGVhbilcIix3cmFwOlwiYm9vbGVhblwiLHRvdWNoOlwiYm9vbGVhblwifSxLPVwibmV4dFwiLFg9XCJwcmV2XCIsWT1cImxlZnRcIixRPVwicmlnaHRcIixHPXtBcnJvd0xlZnQ6USxBcnJvd1JpZ2h0Oll9O2NsYXNzIFogZXh0ZW5kcyBCe2NvbnN0cnVjdG9yKGUsaSl7c3VwZXIoZSksdGhpcy5faXRlbXM9bnVsbCx0aGlzLl9pbnRlcnZhbD1udWxsLHRoaXMuX2FjdGl2ZUVsZW1lbnQ9bnVsbCx0aGlzLl9pc1BhdXNlZD0hMSx0aGlzLl9pc1NsaWRpbmc9ITEsdGhpcy50b3VjaFRpbWVvdXQ9bnVsbCx0aGlzLnRvdWNoU3RhcnRYPTAsdGhpcy50b3VjaERlbHRhWD0wLHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoaSksdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQ9dC5maW5kT25lKFwiLmNhcm91c2VsLWluZGljYXRvcnNcIix0aGlzLl9lbGVtZW50KSx0aGlzLl90b3VjaFN1cHBvcnRlZD1cIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHxuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHM+MCx0aGlzLl9wb2ludGVyRXZlbnQ9Qm9vbGVhbih3aW5kb3cuUG9pbnRlckV2ZW50KSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpfXN0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiBGfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwiY2Fyb3VzZWxcIn1uZXh0KCl7dGhpcy5fc2xpZGUoSyl9bmV4dFdoZW5WaXNpYmxlKCl7IWRvY3VtZW50LmhpZGRlbiYmYyh0aGlzLl9lbGVtZW50KSYmdGhpcy5uZXh0KCl9cHJldigpe3RoaXMuX3NsaWRlKFgpfXBhdXNlKGUpe2V8fCh0aGlzLl9pc1BhdXNlZD0hMCksdC5maW5kT25lKFwiLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldlwiLHRoaXMuX2VsZW1lbnQpJiYobyh0aGlzLl9lbGVtZW50KSx0aGlzLmN5Y2xlKCEwKSksY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksdGhpcy5faW50ZXJ2YWw9bnVsbH1jeWNsZSh0KXt0fHwodGhpcy5faXNQYXVzZWQ9ITEpLHRoaXMuX2ludGVydmFsJiYoY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksdGhpcy5faW50ZXJ2YWw9bnVsbCksdGhpcy5fY29uZmlnJiZ0aGlzLl9jb25maWcuaW50ZXJ2YWwmJiF0aGlzLl9pc1BhdXNlZCYmKHRoaXMuX3VwZGF0ZUludGVydmFsKCksdGhpcy5faW50ZXJ2YWw9c2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZT90aGlzLm5leHRXaGVuVmlzaWJsZTp0aGlzLm5leHQpLmJpbmQodGhpcyksdGhpcy5fY29uZmlnLmludGVydmFsKSl9dG8oZSl7dGhpcy5fYWN0aXZlRWxlbWVudD10LmZpbmRPbmUoXCIuYWN0aXZlLmNhcm91c2VsLWl0ZW1cIix0aGlzLl9lbGVtZW50KTtjb25zdCBpPXRoaXMuX2dldEl0ZW1pbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtpZihlPnRoaXMuX2l0ZW1zLmxlbmd0aC0xfHxlPDApcmV0dXJuO2lmKHRoaXMuX2lzU2xpZGluZylyZXR1cm4gdm9pZCBQLm9uZSh0aGlzLl9lbGVtZW50LFwic2xpZC5icy5jYXJvdXNlbFwiLCgpPT50aGlzLnRvKGUpKTtpZihpPT09ZSlyZXR1cm4gdGhpcy5wYXVzZSgpLHZvaWQgdGhpcy5jeWNsZSgpO2NvbnN0IG49ZT5pP0s6WDt0aGlzLl9zbGlkZShuLHRoaXMuX2l0ZW1zW2VdKX1fZ2V0Q29uZmlnKHQpe3JldHVybiB0PXsuLi5GLC4uLlUuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksLi4uXCJvYmplY3RcIj09dHlwZW9mIHQ/dDp7fX0sbChcImNhcm91c2VsXCIsdCxWKSx0fV9oYW5kbGVTd2lwZSgpe2NvbnN0IHQ9TWF0aC5hYnModGhpcy50b3VjaERlbHRhWCk7aWYodDw9NDApcmV0dXJuO2NvbnN0IGU9dC90aGlzLnRvdWNoRGVsdGFYO3RoaXMudG91Y2hEZWx0YVg9MCxlJiZ0aGlzLl9zbGlkZShlPjA/UTpZKX1fYWRkRXZlbnRMaXN0ZW5lcnMoKXt0aGlzLl9jb25maWcua2V5Ym9hcmQmJlAub24odGhpcy5fZWxlbWVudCxcImtleWRvd24uYnMuY2Fyb3VzZWxcIix0PT50aGlzLl9rZXlkb3duKHQpKSxcImhvdmVyXCI9PT10aGlzLl9jb25maWcucGF1c2UmJihQLm9uKHRoaXMuX2VsZW1lbnQsXCJtb3VzZWVudGVyLmJzLmNhcm91c2VsXCIsdD0+dGhpcy5wYXVzZSh0KSksUC5vbih0aGlzLl9lbGVtZW50LFwibW91c2VsZWF2ZS5icy5jYXJvdXNlbFwiLHQ9PnRoaXMuY3ljbGUodCkpKSx0aGlzLl9jb25maWcudG91Y2gmJnRoaXMuX3RvdWNoU3VwcG9ydGVkJiZ0aGlzLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCl9X2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKXtjb25zdCBlPXQ9PnshdGhpcy5fcG9pbnRlckV2ZW50fHxcInBlblwiIT09dC5wb2ludGVyVHlwZSYmXCJ0b3VjaFwiIT09dC5wb2ludGVyVHlwZT90aGlzLl9wb2ludGVyRXZlbnR8fCh0aGlzLnRvdWNoU3RhcnRYPXQudG91Y2hlc1swXS5jbGllbnRYKTp0aGlzLnRvdWNoU3RhcnRYPXQuY2xpZW50WH0saT10PT57dGhpcy50b3VjaERlbHRhWD10LnRvdWNoZXMmJnQudG91Y2hlcy5sZW5ndGg+MT8wOnQudG91Y2hlc1swXS5jbGllbnRYLXRoaXMudG91Y2hTdGFydFh9LG49dD0+eyF0aGlzLl9wb2ludGVyRXZlbnR8fFwicGVuXCIhPT10LnBvaW50ZXJUeXBlJiZcInRvdWNoXCIhPT10LnBvaW50ZXJUeXBlfHwodGhpcy50b3VjaERlbHRhWD10LmNsaWVudFgtdGhpcy50b3VjaFN0YXJ0WCksdGhpcy5faGFuZGxlU3dpcGUoKSxcImhvdmVyXCI9PT10aGlzLl9jb25maWcucGF1c2UmJih0aGlzLnBhdXNlKCksdGhpcy50b3VjaFRpbWVvdXQmJmNsZWFyVGltZW91dCh0aGlzLnRvdWNoVGltZW91dCksdGhpcy50b3VjaFRpbWVvdXQ9c2V0VGltZW91dCh0PT50aGlzLmN5Y2xlKHQpLDUwMCt0aGlzLl9jb25maWcuaW50ZXJ2YWwpKX07dC5maW5kKFwiLmNhcm91c2VsLWl0ZW0gaW1nXCIsdGhpcy5fZWxlbWVudCkuZm9yRWFjaCh0PT57UC5vbih0LFwiZHJhZ3N0YXJ0LmJzLmNhcm91c2VsXCIsdD0+dC5wcmV2ZW50RGVmYXVsdCgpKX0pLHRoaXMuX3BvaW50ZXJFdmVudD8oUC5vbih0aGlzLl9lbGVtZW50LFwicG9pbnRlcmRvd24uYnMuY2Fyb3VzZWxcIix0PT5lKHQpKSxQLm9uKHRoaXMuX2VsZW1lbnQsXCJwb2ludGVydXAuYnMuY2Fyb3VzZWxcIix0PT5uKHQpKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwb2ludGVyLWV2ZW50XCIpKTooUC5vbih0aGlzLl9lbGVtZW50LFwidG91Y2hzdGFydC5icy5jYXJvdXNlbFwiLHQ9PmUodCkpLFAub24odGhpcy5fZWxlbWVudCxcInRvdWNobW92ZS5icy5jYXJvdXNlbFwiLHQ9PmkodCkpLFAub24odGhpcy5fZWxlbWVudCxcInRvdWNoZW5kLmJzLmNhcm91c2VsXCIsdD0+bih0KSkpfV9rZXlkb3duKHQpe2lmKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSkpcmV0dXJuO2NvbnN0IGU9R1t0LmtleV07ZSYmKHQucHJldmVudERlZmF1bHQoKSx0aGlzLl9zbGlkZShlKSl9X2dldEl0ZW1pbmRleChlKXtyZXR1cm4gdGhpcy5faXRlbXM9ZSYmZS5wYXJlbnROb2RlP3QuZmluZChcIi5jYXJvdXNlbC1pdGVtXCIsZS5wYXJlbnROb2RlKTpbXSx0aGlzLl9pdGVtcy5pbmRleE9mKGUpfV9nZXRJdGVtQnlPcmRlcih0LGUpe2NvbnN0IGk9dD09PUs7cmV0dXJuIHkodGhpcy5faXRlbXMsZSxpLHRoaXMuX2NvbmZpZy53cmFwKX1fdHJpZ2dlclNsaWRlRXZlbnQoZSxpKXtjb25zdCBuPXRoaXMuX2dldEl0ZW1pbmRleChlKSxzPXRoaXMuX2dldEl0ZW1pbmRleCh0LmZpbmRPbmUoXCIuYWN0aXZlLmNhcm91c2VsLWl0ZW1cIix0aGlzLl9lbGVtZW50KSk7cmV0dXJuIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2xpZGUuYnMuY2Fyb3VzZWxcIix7cmVsYXRlZFRhcmdldDplLGRpcmVjdGlvbjppLGZyb206cyx0bzpufSl9X3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQoZSl7aWYodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpe2NvbnN0IGk9dC5maW5kT25lKFwiLmFjdGl2ZVwiLHRoaXMuX2luZGljYXRvcnNFbGVtZW50KTtpLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIiksaS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIik7Y29uc3Qgbj10LmZpbmQoXCJbZGF0YS1icy10YXJnZXRdXCIsdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpO2ZvcihsZXQgdD0wO3Q8bi5sZW5ndGg7dCsrKWlmKE51bWJlci5wYXJzZUludChuW3RdLmdldEF0dHJpYnV0ZShcImRhdGEtYnMtc2xpZGUtdG9cIiksMTApPT09dGhpcy5fZ2V0SXRlbWluZGV4KGUpKXtuW3RdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIiksblt0XS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIixcInRydWVcIik7YnJlYWt9fX1fdXBkYXRlSW50ZXJ2YWwoKXtjb25zdCBlPXRoaXMuX2FjdGl2ZUVsZW1lbnR8fHQuZmluZE9uZShcIi5hY3RpdmUuY2Fyb3VzZWwtaXRlbVwiLHRoaXMuX2VsZW1lbnQpO2lmKCFlKXJldHVybjtjb25zdCBpPU51bWJlci5wYXJzZUludChlLmdldEF0dHJpYnV0ZShcImRhdGEtYnMtaW50ZXJ2YWxcIiksMTApO2k/KHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWw9dGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbHx8dGhpcy5fY29uZmlnLmludGVydmFsLHRoaXMuX2NvbmZpZy5pbnRlcnZhbD1pKTp0aGlzLl9jb25maWcuaW50ZXJ2YWw9dGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbHx8dGhpcy5fY29uZmlnLmludGVydmFsfV9zbGlkZShlLGkpe2NvbnN0IG49dGhpcy5fZGlyZWN0aW9uVG9PcmRlcihlKSxzPXQuZmluZE9uZShcIi5hY3RpdmUuY2Fyb3VzZWwtaXRlbVwiLHRoaXMuX2VsZW1lbnQpLG89dGhpcy5fZ2V0SXRlbWluZGV4KHMpLHI9aXx8dGhpcy5fZ2V0SXRlbUJ5T3JkZXIobixzKSxhPXRoaXMuX2dldEl0ZW1pbmRleChyKSxsPUJvb2xlYW4odGhpcy5faW50ZXJ2YWwpLGM9bj09PUssaD1jP1wiY2Fyb3VzZWwtaXRlbS1zdGFydFwiOlwiY2Fyb3VzZWwtaXRlbS1lbmRcIixkPWM/XCJjYXJvdXNlbC1pdGVtLW5leHRcIjpcImNhcm91c2VsLWl0ZW0tcHJldlwiLHU9dGhpcy5fb3JkZXJUb0RpcmVjdGlvbihuKTtpZihyJiZyLmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZVwiKSlyZXR1cm4gdm9pZCh0aGlzLl9pc1NsaWRpbmc9ITEpO2lmKHRoaXMuX2lzU2xpZGluZylyZXR1cm47aWYodGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQocix1KS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtpZighc3x8IXIpcmV0dXJuO3RoaXMuX2lzU2xpZGluZz0hMCxsJiZ0aGlzLnBhdXNlKCksdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChyKSx0aGlzLl9hY3RpdmVFbGVtZW50PXI7Y29uc3QgcD0oKT0+e1AudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2xpZC5icy5jYXJvdXNlbFwiLHtyZWxhdGVkVGFyZ2V0OnIsZGlyZWN0aW9uOnUsZnJvbTpvLHRvOmF9KX07aWYodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJzbGlkZVwiKSl7ci5jbGFzc0xpc3QuYWRkKGQpLGYocikscy5jbGFzc0xpc3QuYWRkKGgpLHIuY2xhc3NMaXN0LmFkZChoKTtjb25zdCB0PSgpPT57ci5jbGFzc0xpc3QucmVtb3ZlKGgsZCksci5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpLHMuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiLGQsaCksdGhpcy5faXNTbGlkaW5nPSExLHNldFRpbWVvdXQocCwwKX07dGhpcy5fcXVldWVDYWxsYmFjayh0LHMsITApfWVsc2Ugcy5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpLHIuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKSx0aGlzLl9pc1NsaWRpbmc9ITEscCgpO2wmJnRoaXMuY3ljbGUoKX1fZGlyZWN0aW9uVG9PcmRlcih0KXtyZXR1cm5bUSxZXS5pbmNsdWRlcyh0KT9nKCk/dD09PVk/WDpLOnQ9PT1ZP0s6WDp0fV9vcmRlclRvRGlyZWN0aW9uKHQpe3JldHVybltLLFhdLmluY2x1ZGVzKHQpP2coKT90PT09WD9ZOlE6dD09PVg/UTpZOnR9c3RhdGljIGNhcm91c2VsSW50ZXJmYWNlKHQsZSl7Y29uc3QgaT1aLmdldE9yQ3JlYXRlSW5zdGFuY2UodCxlKTtsZXR7X2NvbmZpZzpufT1pO1wib2JqZWN0XCI9PXR5cGVvZiBlJiYobj17Li4ubiwuLi5lfSk7Y29uc3Qgcz1cInN0cmluZ1wiPT10eXBlb2YgZT9lOm4uc2xpZGU7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpaS50byhlKTtlbHNlIGlmKFwic3RyaW5nXCI9PXR5cGVvZiBzKXtpZih2b2lkIDA9PT1pW3NdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7c31cImApO2lbc10oKX1lbHNlIG4uaW50ZXJ2YWwmJm4ucmlkZSYmKGkucGF1c2UoKSxpLmN5Y2xlKCkpfXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtaLmNhcm91c2VsSW50ZXJmYWNlKHRoaXMsdCl9KSl9c3RhdGljIGRhdGFBcGlDbGlja0hhbmRsZXIodCl7Y29uc3QgZT1zKHRoaXMpO2lmKCFlfHwhZS5jbGFzc0xpc3QuY29udGFpbnMoXCJjYXJvdXNlbFwiKSlyZXR1cm47Y29uc3QgaT17Li4uVS5nZXREYXRhQXR0cmlidXRlcyhlKSwuLi5VLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMpfSxuPXRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1zbGlkZS10b1wiKTtuJiYoaS5pbnRlcnZhbD0hMSksWi5jYXJvdXNlbEludGVyZmFjZShlLGkpLG4mJlouZ2V0SW5zdGFuY2UoZSkudG8obiksdC5wcmV2ZW50RGVmYXVsdCgpfX1QLm9uKGRvY3VtZW50LFwiY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGlcIixcIltkYXRhLWJzLXNsaWRlXSwgW2RhdGEtYnMtc2xpZGUtdG9dXCIsWi5kYXRhQXBpQ2xpY2tIYW5kbGVyKSxQLm9uKHdpbmRvdyxcImxvYWQuYnMuY2Fyb3VzZWwuZGF0YS1hcGlcIiwoKT0+e2NvbnN0IGU9dC5maW5kKCdbZGF0YS1icy1yaWRlPVwiY2Fyb3VzZWxcIl0nKTtmb3IobGV0IHQ9MCxpPWUubGVuZ3RoO3Q8aTt0KyspWi5jYXJvdXNlbEludGVyZmFjZShlW3RdLFouZ2V0SW5zdGFuY2UoZVt0XSkpfSksXyhaKTtjb25zdCBKPXt0b2dnbGU6ITAscGFyZW50OlwiXCJ9LHR0PXt0b2dnbGU6XCJib29sZWFuXCIscGFyZW50OlwiKHN0cmluZ3xlbGVtZW50KVwifTtjbGFzcyBldCBleHRlbmRzIEJ7Y29uc3RydWN0b3IoZSxpKXtzdXBlcihlKSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhpKSx0aGlzLl90cmlnZ2VyQXJyYXk9dC5maW5kKGBbZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIyR7dGhpcy5fZWxlbWVudC5pZH1cIl0sW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1icy10YXJnZXQ9XCIjJHt0aGlzLl9lbGVtZW50LmlkfVwiXWApO2NvbnN0IHM9dC5maW5kKCdbZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiXScpO2ZvcihsZXQgZT0wLGk9cy5sZW5ndGg7ZTxpO2UrKyl7Y29uc3QgaT1zW2VdLG89bihpKSxyPXQuZmluZChvKS5maWx0ZXIodD0+dD09PXRoaXMuX2VsZW1lbnQpO251bGwhPT1vJiZyLmxlbmd0aCYmKHRoaXMuX3NlbGVjdG9yPW8sdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goaSkpfXRoaXMuX3BhcmVudD10aGlzLl9jb25maWcucGFyZW50P3RoaXMuX2dldFBhcmVudCgpOm51bGwsdGhpcy5fY29uZmlnLnBhcmVudHx8dGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsdGhpcy5fdHJpZ2dlckFycmF5KSx0aGlzLl9jb25maWcudG9nZ2xlJiZ0aGlzLnRvZ2dsZSgpfXN0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiBKfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwiY29sbGFwc2VcIn10b2dnbGUoKXt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIik/dGhpcy5oaWRlKCk6dGhpcy5zaG93KCl9c2hvdygpe2lmKHRoaXMuX2lzVHJhbnNpdGlvbmluZ3x8dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKXJldHVybjtsZXQgZSxpO3RoaXMuX3BhcmVudCYmKGU9dC5maW5kKFwiLnNob3csIC5jb2xsYXBzaW5nXCIsdGhpcy5fcGFyZW50KS5maWx0ZXIodD0+XCJzdHJpbmdcIj09dHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQ/dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLXBhcmVudFwiKT09PXRoaXMuX2NvbmZpZy5wYXJlbnQ6dC5jbGFzc0xpc3QuY29udGFpbnMoXCJjb2xsYXBzZVwiKSksMD09PWUubGVuZ3RoJiYoZT1udWxsKSk7Y29uc3Qgbj10LmZpbmRPbmUodGhpcy5fc2VsZWN0b3IpO2lmKGUpe2NvbnN0IHQ9ZS5maW5kKHQ9Pm4hPT10KTtpZihpPXQ/ZXQuZ2V0SW5zdGFuY2UodCk6bnVsbCxpJiZpLl9pc1RyYW5zaXRpb25pbmcpcmV0dXJufWlmKFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy5jb2xsYXBzZVwiKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtlJiZlLmZvckVhY2godD0+e24hPT10JiZldC5jb2xsYXBzZUludGVyZmFjZSh0LFwiaGlkZVwiKSxpfHxSLnNldCh0LFwiYnMuY29sbGFwc2VcIixudWxsKX0pO2NvbnN0IHM9dGhpcy5fZ2V0RGltZW5zaW9uKCk7dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiY29sbGFwc2VcIiksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY29sbGFwc2luZ1wiKSx0aGlzLl9lbGVtZW50LnN0eWxlW3NdPTAsdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCYmdGhpcy5fdHJpZ2dlckFycmF5LmZvckVhY2godD0+e3QuY2xhc3NMaXN0LnJlbW92ZShcImNvbGxhcHNlZFwiKSx0LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCl9KSx0aGlzLnNldFRyYW5zaXRpb25pbmcoITApO2NvbnN0IG89XCJzY3JvbGxcIisoc1swXS50b1VwcGVyQ2FzZSgpK3Muc2xpY2UoMSkpO3RoaXMuX3F1ZXVlQ2FsbGJhY2soKCk9Pnt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsYXBzaW5nXCIpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNvbGxhcHNlXCIsXCJzaG93XCIpLHRoaXMuX2VsZW1lbnQuc3R5bGVbc109XCJcIix0aGlzLnNldFRyYW5zaXRpb25pbmcoITEpLFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvd24uYnMuY29sbGFwc2VcIil9LHRoaXMuX2VsZW1lbnQsITApLHRoaXMuX2VsZW1lbnQuc3R5bGVbc109dGhpcy5fZWxlbWVudFtvXStcInB4XCJ9aGlkZSgpe2lmKHRoaXMuX2lzVHJhbnNpdGlvbmluZ3x8IXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKSlyZXR1cm47aWYoUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRlLmJzLmNvbGxhcHNlXCIpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuO2NvbnN0IHQ9dGhpcy5fZ2V0RGltZW5zaW9uKCk7dGhpcy5fZWxlbWVudC5zdHlsZVt0XT10aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RdK1wicHhcIixmKHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNvbGxhcHNpbmdcIiksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiY29sbGFwc2VcIixcInNob3dcIik7Y29uc3QgZT10aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoO2lmKGU+MClmb3IobGV0IHQ9MDt0PGU7dCsrKXtjb25zdCBlPXRoaXMuX3RyaWdnZXJBcnJheVt0XSxpPXMoZSk7aSYmIWkuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKSYmKGUuY2xhc3NMaXN0LmFkZChcImNvbGxhcHNlZFwiKSxlLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMSkpfXRoaXMuc2V0VHJhbnNpdGlvbmluZyghMCksdGhpcy5fZWxlbWVudC5zdHlsZVt0XT1cIlwiLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCk9Pnt0aGlzLnNldFRyYW5zaXRpb25pbmcoITEpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImNvbGxhcHNpbmdcIiksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY29sbGFwc2VcIiksUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRkZW4uYnMuY29sbGFwc2VcIil9LHRoaXMuX2VsZW1lbnQsITApfXNldFRyYW5zaXRpb25pbmcodCl7dGhpcy5faXNUcmFuc2l0aW9uaW5nPXR9X2dldENvbmZpZyh0KXtyZXR1cm4odD17Li4uSiwuLi50fSkudG9nZ2xlPUJvb2xlYW4odC50b2dnbGUpLGwoXCJjb2xsYXBzZVwiLHQsdHQpLHR9X2dldERpbWVuc2lvbigpe3JldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcIndpZHRoXCIpP1wid2lkdGhcIjpcImhlaWdodFwifV9nZXRQYXJlbnQoKXtsZXR7cGFyZW50OmV9PXRoaXMuX2NvbmZpZztlPWEoZSk7Y29uc3QgaT1gW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1icy1wYXJlbnQ9XCIke2V9XCJdYDtyZXR1cm4gdC5maW5kKGksZSkuZm9yRWFjaCh0PT57Y29uc3QgZT1zKHQpO3RoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlLFt0XSl9KSxlfV9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModCxlKXtpZighdHx8IWUubGVuZ3RoKXJldHVybjtjb25zdCBpPXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKTtlLmZvckVhY2godD0+e2k/dC5jbGFzc0xpc3QucmVtb3ZlKFwiY29sbGFwc2VkXCIpOnQuY2xhc3NMaXN0LmFkZChcImNvbGxhcHNlZFwiKSx0LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIixpKX0pfXN0YXRpYyBjb2xsYXBzZUludGVyZmFjZSh0LGUpe2xldCBpPWV0LmdldEluc3RhbmNlKHQpO2NvbnN0IG49ey4uLkosLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0KSwuLi5cIm9iamVjdFwiPT10eXBlb2YgZSYmZT9lOnt9fTtpZighaSYmbi50b2dnbGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlJiYvc2hvd3xoaWRlLy50ZXN0KGUpJiYobi50b2dnbGU9ITEpLGl8fChpPW5ldyBldCh0LG4pKSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYodm9pZCAwPT09aVtlXSl0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2V9XCJgKTtpW2VdKCl9fXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtldC5jb2xsYXBzZUludGVyZmFjZSh0aGlzLHQpfSkpfX1QLm9uKGRvY3VtZW50LFwiY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGlcIiwnW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLChmdW5jdGlvbihlKXsoXCJBXCI9PT1lLnRhcmdldC50YWdOYW1lfHxlLmRlbGVnYXRlVGFyZ2V0JiZcIkFcIj09PWUuZGVsZWdhdGVUYXJnZXQudGFnTmFtZSkmJmUucHJldmVudERlZmF1bHQoKTtjb25zdCBpPVUuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcykscz1uKHRoaXMpO3QuZmluZChzKS5mb3JFYWNoKHQ9Pntjb25zdCBlPWV0LmdldEluc3RhbmNlKHQpO2xldCBuO2U/KG51bGw9PT1lLl9wYXJlbnQmJlwic3RyaW5nXCI9PXR5cGVvZiBpLnBhcmVudCYmKGUuX2NvbmZpZy5wYXJlbnQ9aS5wYXJlbnQsZS5fcGFyZW50PWUuX2dldFBhcmVudCgpKSxuPVwidG9nZ2xlXCIpOm49aSxldC5jb2xsYXBzZUludGVyZmFjZSh0LG4pfSl9KSksXyhldCk7dmFyIGl0PVwidG9wXCIsbnQ9XCJib3R0b21cIixzdD1cInJpZ2h0XCIsb3Q9XCJsZWZ0XCIscnQ9W2l0LG50LHN0LG90XSxhdD1ydC5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY29uY2F0KFtlK1wiLXN0YXJ0XCIsZStcIi1lbmRcIl0pfSksW10pLGx0PVtdLmNvbmNhdChydCxbXCJhdXRvXCJdKS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY29uY2F0KFtlLGUrXCItc3RhcnRcIixlK1wiLWVuZFwiXSl9KSxbXSksY3Q9W1wiYmVmb3JlUmVhZFwiLFwicmVhZFwiLFwiYWZ0ZXJSZWFkXCIsXCJiZWZvcmVNYWluXCIsXCJtYWluXCIsXCJhZnRlck1haW5cIixcImJlZm9yZVdyaXRlXCIsXCJ3cml0ZVwiLFwiYWZ0ZXJXcml0ZVwiXTtmdW5jdGlvbiBodCh0KXtyZXR1cm4gdD8odC5ub2RlTmFtZXx8XCJcIikudG9Mb3dlckNhc2UoKTpudWxsfWZ1bmN0aW9uIGR0KHQpe2lmKG51bGw9PXQpcmV0dXJuIHdpbmRvdztpZihcIltvYmplY3QgV2luZG93XVwiIT09dC50b1N0cmluZygpKXt2YXIgZT10Lm93bmVyRG9jdW1lbnQ7cmV0dXJuIGUmJmUuZGVmYXVsdFZpZXd8fHdpbmRvd31yZXR1cm4gdH1mdW5jdGlvbiB1dCh0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIGR0KHQpLkVsZW1lbnR8fHQgaW5zdGFuY2VvZiBFbGVtZW50fWZ1bmN0aW9uIGZ0KHQpe3JldHVybiB0IGluc3RhbmNlb2YgZHQodCkuSFRNTEVsZW1lbnR8fHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudH1mdW5jdGlvbiBwdCh0KXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgU2hhZG93Um9vdCYmKHQgaW5zdGFuY2VvZiBkdCh0KS5TaGFkb3dSb290fHx0IGluc3RhbmNlb2YgU2hhZG93Um9vdCl9dmFyIG10PXtuYW1lOlwiYXBwbHlTdHlsZXNcIixlbmFibGVkOiEwLHBoYXNlOlwid3JpdGVcIixmbjpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlO09iamVjdC5rZXlzKGUuZWxlbWVudHMpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBpPWUuc3R5bGVzW3RdfHx7fSxuPWUuYXR0cmlidXRlc1t0XXx8e30scz1lLmVsZW1lbnRzW3RdO2Z0KHMpJiZodChzKSYmKE9iamVjdC5hc3NpZ24ocy5zdHlsZSxpKSxPYmplY3Qua2V5cyhuKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT1uW3RdOyExPT09ZT9zLnJlbW92ZUF0dHJpYnV0ZSh0KTpzLnNldEF0dHJpYnV0ZSh0LCEwPT09ZT9cIlwiOmUpfSkpKX0pKX0sZWZmZWN0OmZ1bmN0aW9uKHQpe3ZhciBlPXQuc3RhdGUsaT17cG9wcGVyOntwb3NpdGlvbjplLm9wdGlvbnMuc3RyYXRlZ3ksbGVmdDpcIjBcIix0b3A6XCIwXCIsbWFyZ2luOlwiMFwifSxhcnJvdzp7cG9zaXRpb246XCJhYnNvbHV0ZVwifSxyZWZlcmVuY2U6e319O3JldHVybiBPYmplY3QuYXNzaWduKGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLGkucG9wcGVyKSxlLnN0eWxlcz1pLGUuZWxlbWVudHMuYXJyb3cmJk9iamVjdC5hc3NpZ24oZS5lbGVtZW50cy5hcnJvdy5zdHlsZSxpLmFycm93KSxmdW5jdGlvbigpe09iamVjdC5rZXlzKGUuZWxlbWVudHMpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPWUuZWxlbWVudHNbdF0scz1lLmF0dHJpYnV0ZXNbdF18fHt9LG89T2JqZWN0LmtleXMoZS5zdHlsZXMuaGFzT3duUHJvcGVydHkodCk/ZS5zdHlsZXNbdF06aVt0XSkucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0W2VdPVwiXCIsdH0pLHt9KTtmdChuKSYmaHQobikmJihPYmplY3QuYXNzaWduKG4uc3R5bGUsbyksT2JqZWN0LmtleXMocykuZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5yZW1vdmVBdHRyaWJ1dGUodCl9KSkpfSkpfX0scmVxdWlyZXM6W1wiY29tcHV0ZVN0eWxlc1wiXX07ZnVuY3Rpb24gZ3QodCl7cmV0dXJuIHQuc3BsaXQoXCItXCIpWzBdfWZ1bmN0aW9uIF90KHQpe3ZhciBlPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cmV0dXJue3dpZHRoOmUud2lkdGgsaGVpZ2h0OmUuaGVpZ2h0LHRvcDplLnRvcCxyaWdodDplLnJpZ2h0LGJvdHRvbTplLmJvdHRvbSxsZWZ0OmUubGVmdCx4OmUubGVmdCx5OmUudG9wfX1mdW5jdGlvbiBidCh0KXt2YXIgZT1fdCh0KSxpPXQub2Zmc2V0V2lkdGgsbj10Lm9mZnNldEhlaWdodDtyZXR1cm4gTWF0aC5hYnMoZS53aWR0aC1pKTw9MSYmKGk9ZS53aWR0aCksTWF0aC5hYnMoZS5oZWlnaHQtbik8PTEmJihuPWUuaGVpZ2h0KSx7eDp0Lm9mZnNldExlZnQseTp0Lm9mZnNldFRvcCx3aWR0aDppLGhlaWdodDpufX1mdW5jdGlvbiB2dCh0LGUpe3ZhciBpPWUuZ2V0Um9vdE5vZGUmJmUuZ2V0Um9vdE5vZGUoKTtpZih0LmNvbnRhaW5zKGUpKXJldHVybiEwO2lmKGkmJnB0KGkpKXt2YXIgbj1lO2Rve2lmKG4mJnQuaXNTYW1lTm9kZShuKSlyZXR1cm4hMDtuPW4ucGFyZW50Tm9kZXx8bi5ob3N0fXdoaWxlKG4pfXJldHVybiExfWZ1bmN0aW9uIHl0KHQpe3JldHVybiBkdCh0KS5nZXRDb21wdXRlZFN0eWxlKHQpfWZ1bmN0aW9uIHd0KHQpe3JldHVybltcInRhYmxlXCIsXCJ0ZFwiLFwidGhcIl0uaW5kZXhPZihodCh0KSk+PTB9ZnVuY3Rpb24gRXQodCl7cmV0dXJuKCh1dCh0KT90Lm93bmVyRG9jdW1lbnQ6dC5kb2N1bWVudCl8fHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50fWZ1bmN0aW9uIEF0KHQpe3JldHVyblwiaHRtbFwiPT09aHQodCk/dDp0LmFzc2lnbmVkU2xvdHx8dC5wYXJlbnROb2RlfHwocHQodCk/dC5ob3N0Om51bGwpfHxFdCh0KX1mdW5jdGlvbiBUdCh0KXtyZXR1cm4gZnQodCkmJlwiZml4ZWRcIiE9PXl0KHQpLnBvc2l0aW9uP3Qub2Zmc2V0UGFyZW50Om51bGx9ZnVuY3Rpb24gT3QodCl7Zm9yKHZhciBlPWR0KHQpLGk9VHQodCk7aSYmd3QoaSkmJlwic3RhdGljXCI9PT15dChpKS5wb3NpdGlvbjspaT1UdChpKTtyZXR1cm4gaSYmKFwiaHRtbFwiPT09aHQoaSl8fFwiYm9keVwiPT09aHQoaSkmJlwic3RhdGljXCI9PT15dChpKS5wb3NpdGlvbik/ZTppfHxmdW5jdGlvbih0KXt2YXIgZT0tMSE9PW5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiZmlyZWZveFwiKTtpZigtMSE9PW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIlRyaWRlbnRcIikmJmZ0KHQpJiZcImZpeGVkXCI9PT15dCh0KS5wb3NpdGlvbilyZXR1cm4gbnVsbDtmb3IodmFyIGk9QXQodCk7ZnQoaSkmJltcImh0bWxcIixcImJvZHlcIl0uaW5kZXhPZihodChpKSk8MDspe3ZhciBuPXl0KGkpO2lmKFwibm9uZVwiIT09bi50cmFuc2Zvcm18fFwibm9uZVwiIT09bi5wZXJzcGVjdGl2ZXx8XCJwYWludFwiPT09bi5jb250YWlufHwtMSE9PVtcInRyYW5zZm9ybVwiLFwicGVyc3BlY3RpdmVcIl0uaW5kZXhPZihuLndpbGxDaGFuZ2UpfHxlJiZcImZpbHRlclwiPT09bi53aWxsQ2hhbmdlfHxlJiZuLmZpbHRlciYmXCJub25lXCIhPT1uLmZpbHRlcilyZXR1cm4gaTtpPWkucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH0odCl8fGV9ZnVuY3Rpb24gQ3QodCl7cmV0dXJuW1widG9wXCIsXCJib3R0b21cIl0uaW5kZXhPZih0KT49MD9cInhcIjpcInlcIn12YXIga3Q9TWF0aC5tYXgsTHQ9TWF0aC5taW4seHQ9TWF0aC5yb3VuZDtmdW5jdGlvbiBEdCh0LGUsaSl7cmV0dXJuIGt0KHQsTHQoZSxpKSl9ZnVuY3Rpb24gU3QodCl7cmV0dXJuIE9iamVjdC5hc3NpZ24oe30se3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfSx0KX1mdW5jdGlvbiBJdCh0LGUpe3JldHVybiBlLnJlZHVjZSgoZnVuY3Rpb24oZSxpKXtyZXR1cm4gZVtpXT10LGV9KSx7fSl9dmFyIE50PXtuYW1lOlwiYXJyb3dcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLGZuOmZ1bmN0aW9uKHQpe3ZhciBlLGk9dC5zdGF0ZSxuPXQubmFtZSxzPXQub3B0aW9ucyxvPWkuZWxlbWVudHMuYXJyb3cscj1pLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyxhPWd0KGkucGxhY2VtZW50KSxsPUN0KGEpLGM9W290LHN0XS5pbmRleE9mKGEpPj0wP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiO2lmKG8mJnIpe3ZhciBoPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFN0KFwibnVtYmVyXCIhPXR5cGVvZih0PVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dChPYmplY3QuYXNzaWduKHt9LGUucmVjdHMse3BsYWNlbWVudDplLnBsYWNlbWVudH0pKTp0KT90Okl0KHQscnQpKX0ocy5wYWRkaW5nLGkpLGQ9YnQobyksdT1cInlcIj09PWw/aXQ6b3QsZj1cInlcIj09PWw/bnQ6c3QscD1pLnJlY3RzLnJlZmVyZW5jZVtjXStpLnJlY3RzLnJlZmVyZW5jZVtsXS1yW2xdLWkucmVjdHMucG9wcGVyW2NdLG09cltsXS1pLnJlY3RzLnJlZmVyZW5jZVtsXSxnPU90KG8pLF89Zz9cInlcIj09PWw/Zy5jbGllbnRIZWlnaHR8fDA6Zy5jbGllbnRXaWR0aHx8MDowLGI9cC8yLW0vMix2PWhbdV0seT1fLWRbY10taFtmXSx3PV8vMi1kW2NdLzIrYixFPUR0KHYsdyx5KSxBPWw7aS5tb2RpZmllcnNEYXRhW25dPSgoZT17fSlbQV09RSxlLmNlbnRlck9mZnNldD1FLXcsZSl9fSxlZmZlY3Q6ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxpPXQub3B0aW9ucy5lbGVtZW50LG49dm9pZCAwPT09aT9cIltkYXRhLXBvcHBlci1hcnJvd11cIjppO251bGwhPW4mJihcInN0cmluZ1wiIT10eXBlb2Ygbnx8KG49ZS5lbGVtZW50cy5wb3BwZXIucXVlcnlTZWxlY3RvcihuKSkpJiZ2dChlLmVsZW1lbnRzLnBvcHBlcixuKSYmKGUuZWxlbWVudHMuYXJyb3c9bil9LHJlcXVpcmVzOltcInBvcHBlck9mZnNldHNcIl0scmVxdWlyZXNJZkV4aXN0czpbXCJwcmV2ZW50T3ZlcmZsb3dcIl19LGp0PXt0b3A6XCJhdXRvXCIscmlnaHQ6XCJhdXRvXCIsYm90dG9tOlwiYXV0b1wiLGxlZnQ6XCJhdXRvXCJ9O2Z1bmN0aW9uIE10KHQpe3ZhciBlLGk9dC5wb3BwZXIsbj10LnBvcHBlclJlY3Qscz10LnBsYWNlbWVudCxvPXQub2Zmc2V0cyxyPXQucG9zaXRpb24sYT10LmdwdUFjY2VsZXJhdGlvbixsPXQuYWRhcHRpdmUsYz10LnJvdW5kT2Zmc2V0cyxoPSEwPT09Yz9mdW5jdGlvbih0KXt2YXIgZT10LngsaT10Lnksbj13aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MTtyZXR1cm57eDp4dCh4dChlKm4pL24pfHwwLHk6eHQoeHQoaSpuKS9uKXx8MH19KG8pOlwiZnVuY3Rpb25cIj09dHlwZW9mIGM/YyhvKTpvLGQ9aC54LHU9dm9pZCAwPT09ZD8wOmQsZj1oLnkscD12b2lkIDA9PT1mPzA6ZixtPW8uaGFzT3duUHJvcGVydHkoXCJ4XCIpLGc9by5oYXNPd25Qcm9wZXJ0eShcInlcIiksXz1vdCxiPWl0LHY9d2luZG93O2lmKGwpe3ZhciB5PU90KGkpLHc9XCJjbGllbnRIZWlnaHRcIixFPVwiY2xpZW50V2lkdGhcIjt5PT09ZHQoaSkmJlwic3RhdGljXCIhPT15dCh5PUV0KGkpKS5wb3NpdGlvbiYmKHc9XCJzY3JvbGxIZWlnaHRcIixFPVwic2Nyb2xsV2lkdGhcIikseT15LHM9PT1pdCYmKGI9bnQscC09eVt3XS1uLmhlaWdodCxwKj1hPzE6LTEpLHM9PT1vdCYmKF89c3QsdS09eVtFXS1uLndpZHRoLHUqPWE/MTotMSl9dmFyIEEsVD1PYmplY3QuYXNzaWduKHtwb3NpdGlvbjpyfSxsJiZqdCk7cmV0dXJuIGE/T2JqZWN0LmFzc2lnbih7fSxULCgoQT17fSlbYl09Zz9cIjBcIjpcIlwiLEFbX109bT9cIjBcIjpcIlwiLEEudHJhbnNmb3JtPSh2LmRldmljZVBpeGVsUmF0aW98fDEpPDI/XCJ0cmFuc2xhdGUoXCIrdStcInB4LCBcIitwK1wicHgpXCI6XCJ0cmFuc2xhdGUzZChcIit1K1wicHgsIFwiK3ArXCJweCwgMClcIixBKSk6T2JqZWN0LmFzc2lnbih7fSxULCgoZT17fSlbYl09Zz9wK1wicHhcIjpcIlwiLGVbX109bT91K1wicHhcIjpcIlwiLGUudHJhbnNmb3JtPVwiXCIsZSkpfXZhciBQdD17bmFtZTpcImNvbXB1dGVTdHlsZXNcIixlbmFibGVkOiEwLHBoYXNlOlwiYmVmb3JlV3JpdGVcIixmbjpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLGk9dC5vcHRpb25zLG49aS5ncHVBY2NlbGVyYXRpb24scz12b2lkIDA9PT1ufHxuLG89aS5hZGFwdGl2ZSxyPXZvaWQgMD09PW98fG8sYT1pLnJvdW5kT2Zmc2V0cyxsPXZvaWQgMD09PWF8fGEsYz17cGxhY2VtZW50Omd0KGUucGxhY2VtZW50KSxwb3BwZXI6ZS5lbGVtZW50cy5wb3BwZXIscG9wcGVyUmVjdDplLnJlY3RzLnBvcHBlcixncHVBY2NlbGVyYXRpb246c307bnVsbCE9ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMmJihlLnN0eWxlcy5wb3BwZXI9T2JqZWN0LmFzc2lnbih7fSxlLnN0eWxlcy5wb3BwZXIsTXQoT2JqZWN0LmFzc2lnbih7fSxjLHtvZmZzZXRzOmUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLHBvc2l0aW9uOmUub3B0aW9ucy5zdHJhdGVneSxhZGFwdGl2ZTpyLHJvdW5kT2Zmc2V0czpsfSkpKSksbnVsbCE9ZS5tb2RpZmllcnNEYXRhLmFycm93JiYoZS5zdHlsZXMuYXJyb3c9T2JqZWN0LmFzc2lnbih7fSxlLnN0eWxlcy5hcnJvdyxNdChPYmplY3QuYXNzaWduKHt9LGMse29mZnNldHM6ZS5tb2RpZmllcnNEYXRhLmFycm93LHBvc2l0aW9uOlwiYWJzb2x1dGVcIixhZGFwdGl2ZTohMSxyb3VuZE9mZnNldHM6bH0pKSkpLGUuYXR0cmlidXRlcy5wb3BwZXI9T2JqZWN0LmFzc2lnbih7fSxlLmF0dHJpYnV0ZXMucG9wcGVyLHtcImRhdGEtcG9wcGVyLXBsYWNlbWVudFwiOmUucGxhY2VtZW50fSl9LGRhdGE6e319LEh0PXtwYXNzaXZlOiEwfSxSdD17bmFtZTpcImV2ZW50TGlzdGVuZXJzXCIsZW5hYmxlZDohMCxwaGFzZTpcIndyaXRlXCIsZm46ZnVuY3Rpb24oKXt9LGVmZmVjdDpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLGk9dC5pbnN0YW5jZSxuPXQub3B0aW9ucyxzPW4uc2Nyb2xsLG89dm9pZCAwPT09c3x8cyxyPW4ucmVzaXplLGE9dm9pZCAwPT09cnx8cixsPWR0KGUuZWxlbWVudHMucG9wcGVyKSxjPVtdLmNvbmNhdChlLnNjcm9sbFBhcmVudHMucmVmZXJlbmNlLGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO3JldHVybiBvJiZjLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLGkudXBkYXRlLEh0KX0pKSxhJiZsLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixpLnVwZGF0ZSxIdCksZnVuY3Rpb24oKXtvJiZjLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLGkudXBkYXRlLEh0KX0pKSxhJiZsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixpLnVwZGF0ZSxIdCl9fSxkYXRhOnt9fSxCdD17bGVmdDpcInJpZ2h0XCIscmlnaHQ6XCJsZWZ0XCIsYm90dG9tOlwidG9wXCIsdG9wOlwiYm90dG9tXCJ9O2Z1bmN0aW9uIFd0KHQpe3JldHVybiB0LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLChmdW5jdGlvbih0KXtyZXR1cm4gQnRbdF19KSl9dmFyIHF0PXtzdGFydDpcImVuZFwiLGVuZDpcInN0YXJ0XCJ9O2Z1bmN0aW9uIHp0KHQpe3JldHVybiB0LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLChmdW5jdGlvbih0KXtyZXR1cm4gcXRbdF19KSl9ZnVuY3Rpb24gJHQodCl7dmFyIGU9ZHQodCk7cmV0dXJue3Njcm9sbExlZnQ6ZS5wYWdlWE9mZnNldCxzY3JvbGxUb3A6ZS5wYWdlWU9mZnNldH19ZnVuY3Rpb24gVXQodCl7cmV0dXJuIF90KEV0KHQpKS5sZWZ0KyR0KHQpLnNjcm9sbExlZnR9ZnVuY3Rpb24gRnQodCl7dmFyIGU9eXQodCksaT1lLm92ZXJmbG93LG49ZS5vdmVyZmxvd1gscz1lLm92ZXJmbG93WTtyZXR1cm4vYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW4vLnRlc3QoaStzK24pfWZ1bmN0aW9uIFZ0KHQsZSl7dmFyIGk7dm9pZCAwPT09ZSYmKGU9W10pO3ZhciBuPWZ1bmN0aW9uIHQoZSl7cmV0dXJuW1wiaHRtbFwiLFwiYm9keVwiLFwiI2RvY3VtZW50XCJdLmluZGV4T2YoaHQoZSkpPj0wP2Uub3duZXJEb2N1bWVudC5ib2R5OmZ0KGUpJiZGdChlKT9lOnQoQXQoZSkpfSh0KSxzPW49PT0obnVsbD09KGk9dC5vd25lckRvY3VtZW50KT92b2lkIDA6aS5ib2R5KSxvPWR0KG4pLHI9cz9bb10uY29uY2F0KG8udmlzdWFsVmlld3BvcnR8fFtdLEZ0KG4pP246W10pOm4sYT1lLmNvbmNhdChyKTtyZXR1cm4gcz9hOmEuY29uY2F0KFZ0KEF0KHIpKSl9ZnVuY3Rpb24gS3QodCl7cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sdCx7bGVmdDp0LngsdG9wOnQueSxyaWdodDp0LngrdC53aWR0aCxib3R0b206dC55K3QuaGVpZ2h0fSl9ZnVuY3Rpb24gWHQodCxlKXtyZXR1cm5cInZpZXdwb3J0XCI9PT1lP0t0KGZ1bmN0aW9uKHQpe3ZhciBlPWR0KHQpLGk9RXQodCksbj1lLnZpc3VhbFZpZXdwb3J0LHM9aS5jbGllbnRXaWR0aCxvPWkuY2xpZW50SGVpZ2h0LHI9MCxhPTA7cmV0dXJuIG4mJihzPW4ud2lkdGgsbz1uLmhlaWdodCwvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpfHwocj1uLm9mZnNldExlZnQsYT1uLm9mZnNldFRvcCkpLHt3aWR0aDpzLGhlaWdodDpvLHg6citVdCh0KSx5OmF9fSh0KSk6ZnQoZSk/ZnVuY3Rpb24odCl7dmFyIGU9X3QodCk7cmV0dXJuIGUudG9wPWUudG9wK3QuY2xpZW50VG9wLGUubGVmdD1lLmxlZnQrdC5jbGllbnRMZWZ0LGUuYm90dG9tPWUudG9wK3QuY2xpZW50SGVpZ2h0LGUucmlnaHQ9ZS5sZWZ0K3QuY2xpZW50V2lkdGgsZS53aWR0aD10LmNsaWVudFdpZHRoLGUuaGVpZ2h0PXQuY2xpZW50SGVpZ2h0LGUueD1lLmxlZnQsZS55PWUudG9wLGV9KGUpOkt0KGZ1bmN0aW9uKHQpe3ZhciBlLGk9RXQodCksbj0kdCh0KSxzPW51bGw9PShlPXQub3duZXJEb2N1bWVudCk/dm9pZCAwOmUuYm9keSxvPWt0KGkuc2Nyb2xsV2lkdGgsaS5jbGllbnRXaWR0aCxzP3Muc2Nyb2xsV2lkdGg6MCxzP3MuY2xpZW50V2lkdGg6MCkscj1rdChpLnNjcm9sbEhlaWdodCxpLmNsaWVudEhlaWdodCxzP3Muc2Nyb2xsSGVpZ2h0OjAscz9zLmNsaWVudEhlaWdodDowKSxhPS1uLnNjcm9sbExlZnQrVXQodCksbD0tbi5zY3JvbGxUb3A7cmV0dXJuXCJydGxcIj09PXl0KHN8fGkpLmRpcmVjdGlvbiYmKGErPWt0KGkuY2xpZW50V2lkdGgscz9zLmNsaWVudFdpZHRoOjApLW8pLHt3aWR0aDpvLGhlaWdodDpyLHg6YSx5Omx9fShFdCh0KSkpfWZ1bmN0aW9uIFl0KHQpe3JldHVybiB0LnNwbGl0KFwiLVwiKVsxXX1mdW5jdGlvbiBRdCh0KXt2YXIgZSxpPXQucmVmZXJlbmNlLG49dC5lbGVtZW50LHM9dC5wbGFjZW1lbnQsbz1zP2d0KHMpOm51bGwscj1zP1l0KHMpOm51bGwsYT1pLngraS53aWR0aC8yLW4ud2lkdGgvMixsPWkueStpLmhlaWdodC8yLW4uaGVpZ2h0LzI7c3dpdGNoKG8pe2Nhc2UgaXQ6ZT17eDphLHk6aS55LW4uaGVpZ2h0fTticmVhaztjYXNlIG50OmU9e3g6YSx5OmkueStpLmhlaWdodH07YnJlYWs7Y2FzZSBzdDplPXt4OmkueCtpLndpZHRoLHk6bH07YnJlYWs7Y2FzZSBvdDplPXt4OmkueC1uLndpZHRoLHk6bH07YnJlYWs7ZGVmYXVsdDplPXt4OmkueCx5OmkueX19dmFyIGM9bz9DdChvKTpudWxsO2lmKG51bGwhPWMpe3ZhciBoPVwieVwiPT09Yz9cImhlaWdodFwiOlwid2lkdGhcIjtzd2l0Y2gocil7Y2FzZVwic3RhcnRcIjplW2NdPWVbY10tKGlbaF0vMi1uW2hdLzIpO2JyZWFrO2Nhc2VcImVuZFwiOmVbY109ZVtjXSsoaVtoXS8yLW5baF0vMil9fXJldHVybiBlfWZ1bmN0aW9uIEd0KHQsZSl7dm9pZCAwPT09ZSYmKGU9e30pO3ZhciBpPWUsbj1pLnBsYWNlbWVudCxzPXZvaWQgMD09PW4/dC5wbGFjZW1lbnQ6bixvPWkuYm91bmRhcnkscj12b2lkIDA9PT1vP1wiY2xpcHBpbmdQYXJlbnRzXCI6byxhPWkucm9vdEJvdW5kYXJ5LGw9dm9pZCAwPT09YT9cInZpZXdwb3J0XCI6YSxjPWkuZWxlbWVudENvbnRleHQsaD12b2lkIDA9PT1jP1wicG9wcGVyXCI6YyxkPWkuYWx0Qm91bmRhcnksdT12b2lkIDAhPT1kJiZkLGY9aS5wYWRkaW5nLHA9dm9pZCAwPT09Zj8wOmYsbT1TdChcIm51bWJlclwiIT10eXBlb2YgcD9wOkl0KHAscnQpKSxnPVwicG9wcGVyXCI9PT1oP1wicmVmZXJlbmNlXCI6XCJwb3BwZXJcIixfPXQuZWxlbWVudHMucmVmZXJlbmNlLGI9dC5yZWN0cy5wb3BwZXIsdj10LmVsZW1lbnRzW3U/ZzpoXSx5PWZ1bmN0aW9uKHQsZSxpKXt2YXIgbj1cImNsaXBwaW5nUGFyZW50c1wiPT09ZT9mdW5jdGlvbih0KXt2YXIgZT1WdChBdCh0KSksaT1bXCJhYnNvbHV0ZVwiLFwiZml4ZWRcIl0uaW5kZXhPZih5dCh0KS5wb3NpdGlvbik+PTAmJmZ0KHQpP090KHQpOnQ7cmV0dXJuIHV0KGkpP2UuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdXQodCkmJnZ0KHQsaSkmJlwiYm9keVwiIT09aHQodCl9KSk6W119KHQpOltdLmNvbmNhdChlKSxzPVtdLmNvbmNhdChuLFtpXSksbz1zWzBdLHI9cy5yZWR1Y2UoKGZ1bmN0aW9uKGUsaSl7dmFyIG49WHQodCxpKTtyZXR1cm4gZS50b3A9a3Qobi50b3AsZS50b3ApLGUucmlnaHQ9THQobi5yaWdodCxlLnJpZ2h0KSxlLmJvdHRvbT1MdChuLmJvdHRvbSxlLmJvdHRvbSksZS5sZWZ0PWt0KG4ubGVmdCxlLmxlZnQpLGV9KSxYdCh0LG8pKTtyZXR1cm4gci53aWR0aD1yLnJpZ2h0LXIubGVmdCxyLmhlaWdodD1yLmJvdHRvbS1yLnRvcCxyLng9ci5sZWZ0LHIueT1yLnRvcCxyfSh1dCh2KT92OnYuY29udGV4dEVsZW1lbnR8fEV0KHQuZWxlbWVudHMucG9wcGVyKSxyLGwpLHc9X3QoXyksRT1RdCh7cmVmZXJlbmNlOncsZWxlbWVudDpiLHN0cmF0ZWd5OlwiYWJzb2x1dGVcIixwbGFjZW1lbnQ6c30pLEE9S3QoT2JqZWN0LmFzc2lnbih7fSxiLEUpKSxUPVwicG9wcGVyXCI9PT1oP0E6dyxPPXt0b3A6eS50b3AtVC50b3ArbS50b3AsYm90dG9tOlQuYm90dG9tLXkuYm90dG9tK20uYm90dG9tLGxlZnQ6eS5sZWZ0LVQubGVmdCttLmxlZnQscmlnaHQ6VC5yaWdodC15LnJpZ2h0K20ucmlnaHR9LEM9dC5tb2RpZmllcnNEYXRhLm9mZnNldDtpZihcInBvcHBlclwiPT09aCYmQyl7dmFyIGs9Q1tzXTtPYmplY3Qua2V5cyhPKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT1bc3QsbnRdLmluZGV4T2YodCk+PTA/MTotMSxpPVtpdCxudF0uaW5kZXhPZih0KT49MD9cInlcIjpcInhcIjtPW3RdKz1rW2ldKmV9KSl9cmV0dXJuIE99ZnVuY3Rpb24gWnQodCxlKXt2b2lkIDA9PT1lJiYoZT17fSk7dmFyIGk9ZSxuPWkucGxhY2VtZW50LHM9aS5ib3VuZGFyeSxvPWkucm9vdEJvdW5kYXJ5LHI9aS5wYWRkaW5nLGE9aS5mbGlwVmFyaWF0aW9ucyxsPWkuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLGM9dm9pZCAwPT09bD9sdDpsLGg9WXQobiksZD1oP2E/YXQ6YXQuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gWXQodCk9PT1ofSkpOnJ0LHU9ZC5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBjLmluZGV4T2YodCk+PTB9KSk7MD09PXUubGVuZ3RoJiYodT1kKTt2YXIgZj11LnJlZHVjZSgoZnVuY3Rpb24oZSxpKXtyZXR1cm4gZVtpXT1HdCh0LHtwbGFjZW1lbnQ6aSxib3VuZGFyeTpzLHJvb3RCb3VuZGFyeTpvLHBhZGRpbmc6cn0pW2d0KGkpXSxlfSkse30pO3JldHVybiBPYmplY3Qua2V5cyhmKS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiBmW3RdLWZbZV19KSl9dmFyIEp0PXtuYW1lOlwiZmxpcFwiLGVuYWJsZWQ6ITAscGhhc2U6XCJtYWluXCIsZm46ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxpPXQub3B0aW9ucyxuPXQubmFtZTtpZighZS5tb2RpZmllcnNEYXRhW25dLl9za2lwKXtmb3IodmFyIHM9aS5tYWluQXhpcyxvPXZvaWQgMD09PXN8fHMscj1pLmFsdEF4aXMsYT12b2lkIDA9PT1yfHxyLGw9aS5mYWxsYmFja1BsYWNlbWVudHMsYz1pLnBhZGRpbmcsaD1pLmJvdW5kYXJ5LGQ9aS5yb290Qm91bmRhcnksdT1pLmFsdEJvdW5kYXJ5LGY9aS5mbGlwVmFyaWF0aW9ucyxwPXZvaWQgMD09PWZ8fGYsbT1pLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxnPWUub3B0aW9ucy5wbGFjZW1lbnQsXz1ndChnKSxiPWx8fChfIT09ZyYmcD9mdW5jdGlvbih0KXtpZihcImF1dG9cIj09PWd0KHQpKXJldHVybltdO3ZhciBlPVd0KHQpO3JldHVyblt6dCh0KSxlLHp0KGUpXX0oZyk6W1d0KGcpXSksdj1bZ10uY29uY2F0KGIpLnJlZHVjZSgoZnVuY3Rpb24odCxpKXtyZXR1cm4gdC5jb25jYXQoXCJhdXRvXCI9PT1ndChpKT9adChlLHtwbGFjZW1lbnQ6aSxib3VuZGFyeTpoLHJvb3RCb3VuZGFyeTpkLHBhZGRpbmc6YyxmbGlwVmFyaWF0aW9uczpwLGFsbG93ZWRBdXRvUGxhY2VtZW50czptfSk6aSl9KSxbXSkseT1lLnJlY3RzLnJlZmVyZW5jZSx3PWUucmVjdHMucG9wcGVyLEU9bmV3IE1hcCxBPSEwLFQ9dlswXSxPPTA7Tzx2Lmxlbmd0aDtPKyspe3ZhciBDPXZbT10saz1ndChDKSxMPVwic3RhcnRcIj09PVl0KEMpLHg9W2l0LG50XS5pbmRleE9mKGspPj0wLEQ9eD9cIndpZHRoXCI6XCJoZWlnaHRcIixTPUd0KGUse3BsYWNlbWVudDpDLGJvdW5kYXJ5Omgscm9vdEJvdW5kYXJ5OmQsYWx0Qm91bmRhcnk6dSxwYWRkaW5nOmN9KSxJPXg/TD9zdDpvdDpMP250Oml0O3lbRF0+d1tEXSYmKEk9V3QoSSkpO3ZhciBOPVd0KEkpLGo9W107aWYobyYmai5wdXNoKFNba108PTApLGEmJmoucHVzaChTW0ldPD0wLFNbTl08PTApLGouZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpKXtUPUMsQT0hMTticmVha31FLnNldChDLGopfWlmKEEpZm9yKHZhciBNPWZ1bmN0aW9uKHQpe3ZhciBlPXYuZmluZCgoZnVuY3Rpb24oZSl7dmFyIGk9RS5nZXQoZSk7aWYoaSlyZXR1cm4gaS5zbGljZSgwLHQpLmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gdH0pKX0pKTtpZihlKXJldHVybiBUPWUsXCJicmVha1wifSxQPXA/MzoxO1A+MCYmXCJicmVha1wiIT09TShQKTtQLS0pO2UucGxhY2VtZW50IT09VCYmKGUubW9kaWZpZXJzRGF0YVtuXS5fc2tpcD0hMCxlLnBsYWNlbWVudD1ULGUucmVzZXQ9ITApfX0scmVxdWlyZXNJZkV4aXN0czpbXCJvZmZzZXRcIl0sZGF0YTp7X3NraXA6ITF9fTtmdW5jdGlvbiB0ZSh0LGUsaSl7cmV0dXJuIHZvaWQgMD09PWkmJihpPXt4OjAseTowfSkse3RvcDp0LnRvcC1lLmhlaWdodC1pLnkscmlnaHQ6dC5yaWdodC1lLndpZHRoK2kueCxib3R0b206dC5ib3R0b20tZS5oZWlnaHQraS55LGxlZnQ6dC5sZWZ0LWUud2lkdGgtaS54fX1mdW5jdGlvbiBlZSh0KXtyZXR1cm5baXQsc3QsbnQsb3RdLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdPj0wfSkpfXZhciBpZT17bmFtZTpcImhpZGVcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLHJlcXVpcmVzSWZFeGlzdHM6W1wicHJldmVudE92ZXJmbG93XCJdLGZuOmZ1bmN0aW9uKHQpe3ZhciBlPXQuc3RhdGUsaT10Lm5hbWUsbj1lLnJlY3RzLnJlZmVyZW5jZSxzPWUucmVjdHMucG9wcGVyLG89ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdyxyPUd0KGUse2VsZW1lbnRDb250ZXh0OlwicmVmZXJlbmNlXCJ9KSxhPUd0KGUse2FsdEJvdW5kYXJ5OiEwfSksbD10ZShyLG4pLGM9dGUoYSxzLG8pLGg9ZWUobCksZD1lZShjKTtlLm1vZGlmaWVyc0RhdGFbaV09e3JlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czpsLHBvcHBlckVzY2FwZU9mZnNldHM6Yyxpc1JlZmVyZW5jZUhpZGRlbjpoLGhhc1BvcHBlckVzY2FwZWQ6ZH0sZS5hdHRyaWJ1dGVzLnBvcHBlcj1PYmplY3QuYXNzaWduKHt9LGUuYXR0cmlidXRlcy5wb3BwZXIse1wiZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlblwiOmgsXCJkYXRhLXBvcHBlci1lc2NhcGVkXCI6ZH0pfX0sbmU9e25hbWU6XCJvZmZzZXRcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLHJlcXVpcmVzOltcInBvcHBlck9mZnNldHNcIl0sZm46ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxpPXQub3B0aW9ucyxuPXQubmFtZSxzPWkub2Zmc2V0LG89dm9pZCAwPT09cz9bMCwwXTpzLHI9bHQucmVkdWNlKChmdW5jdGlvbih0LGkpe3JldHVybiB0W2ldPWZ1bmN0aW9uKHQsZSxpKXt2YXIgbj1ndCh0KSxzPVtvdCxpdF0uaW5kZXhPZihuKT49MD8tMToxLG89XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pKE9iamVjdC5hc3NpZ24oe30sZSx7cGxhY2VtZW50OnR9KSk6aSxyPW9bMF0sYT1vWzFdO3JldHVybiByPXJ8fDAsYT0oYXx8MCkqcyxbb3Qsc3RdLmluZGV4T2Yobik+PTA/e3g6YSx5OnJ9Ont4OnIseTphfX0oaSxlLnJlY3RzLG8pLHR9KSx7fSksYT1yW2UucGxhY2VtZW50XSxsPWEueCxjPWEueTtudWxsIT1lLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyYmKGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLngrPWwsZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSs9YyksZS5tb2RpZmllcnNEYXRhW25dPXJ9fSxzZT17bmFtZTpcInBvcHBlck9mZnNldHNcIixlbmFibGVkOiEwLHBoYXNlOlwicmVhZFwiLGZuOmZ1bmN0aW9uKHQpe3ZhciBlPXQuc3RhdGUsaT10Lm5hbWU7ZS5tb2RpZmllcnNEYXRhW2ldPVF0KHtyZWZlcmVuY2U6ZS5yZWN0cy5yZWZlcmVuY2UsZWxlbWVudDplLnJlY3RzLnBvcHBlcixzdHJhdGVneTpcImFic29sdXRlXCIscGxhY2VtZW50OmUucGxhY2VtZW50fSl9LGRhdGE6e319LG9lPXtuYW1lOlwicHJldmVudE92ZXJmbG93XCIsZW5hYmxlZDohMCxwaGFzZTpcIm1haW5cIixmbjpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLGk9dC5vcHRpb25zLG49dC5uYW1lLHM9aS5tYWluQXhpcyxvPXZvaWQgMD09PXN8fHMscj1pLmFsdEF4aXMsYT12b2lkIDAhPT1yJiZyLGw9aS5ib3VuZGFyeSxjPWkucm9vdEJvdW5kYXJ5LGg9aS5hbHRCb3VuZGFyeSxkPWkucGFkZGluZyx1PWkudGV0aGVyLGY9dm9pZCAwPT09dXx8dSxwPWkudGV0aGVyT2Zmc2V0LG09dm9pZCAwPT09cD8wOnAsZz1HdChlLHtib3VuZGFyeTpsLHJvb3RCb3VuZGFyeTpjLHBhZGRpbmc6ZCxhbHRCb3VuZGFyeTpofSksXz1ndChlLnBsYWNlbWVudCksYj1ZdChlLnBsYWNlbWVudCksdj0hYix5PUN0KF8pLHc9XCJ4XCI9PT15P1wieVwiOlwieFwiLEU9ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsQT1lLnJlY3RzLnJlZmVyZW5jZSxUPWUucmVjdHMucG9wcGVyLE89XCJmdW5jdGlvblwiPT10eXBlb2YgbT9tKE9iamVjdC5hc3NpZ24oe30sZS5yZWN0cyx7cGxhY2VtZW50OmUucGxhY2VtZW50fSkpOm0sQz17eDowLHk6MH07aWYoRSl7aWYob3x8YSl7dmFyIGs9XCJ5XCI9PT15P2l0Om90LEw9XCJ5XCI9PT15P250OnN0LHg9XCJ5XCI9PT15P1wiaGVpZ2h0XCI6XCJ3aWR0aFwiLEQ9RVt5XSxTPUVbeV0rZ1trXSxJPUVbeV0tZ1tMXSxOPWY/LVRbeF0vMjowLGo9XCJzdGFydFwiPT09Yj9BW3hdOlRbeF0sTT1cInN0YXJ0XCI9PT1iPy1UW3hdOi1BW3hdLFA9ZS5lbGVtZW50cy5hcnJvdyxIPWYmJlA/YnQoUCk6e3dpZHRoOjAsaGVpZ2h0OjB9LFI9ZS5tb2RpZmllcnNEYXRhW1wiYXJyb3cjcGVyc2lzdGVudFwiXT9lLm1vZGlmaWVyc0RhdGFbXCJhcnJvdyNwZXJzaXN0ZW50XCJdLnBhZGRpbmc6e3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfSxCPVJba10sVz1SW0xdLHE9RHQoMCxBW3hdLEhbeF0pLHo9dj9BW3hdLzItTi1xLUItTzpqLXEtQi1PLCQ9dj8tQVt4XS8yK04rcStXK086TStxK1crTyxVPWUuZWxlbWVudHMuYXJyb3cmJk90KGUuZWxlbWVudHMuYXJyb3cpLEY9VT9cInlcIj09PXk/VS5jbGllbnRUb3B8fDA6VS5jbGllbnRMZWZ0fHwwOjAsVj1lLm1vZGlmaWVyc0RhdGEub2Zmc2V0P2UubW9kaWZpZXJzRGF0YS5vZmZzZXRbZS5wbGFjZW1lbnRdW3ldOjAsSz1FW3ldK3otVi1GLFg9RVt5XSskLVY7aWYobyl7dmFyIFk9RHQoZj9MdChTLEspOlMsRCxmP2t0KEksWCk6SSk7RVt5XT1ZLENbeV09WS1EfWlmKGEpe3ZhciBRPVwieFwiPT09eT9pdDpvdCxHPVwieFwiPT09eT9udDpzdCxaPUVbd10sSj1aK2dbUV0sdHQ9Wi1nW0ddLGV0PUR0KGY/THQoSixLKTpKLFosZj9rdCh0dCxYKTp0dCk7RVt3XT1ldCxDW3ddPWV0LVp9fWUubW9kaWZpZXJzRGF0YVtuXT1DfX0scmVxdWlyZXNJZkV4aXN0czpbXCJvZmZzZXRcIl19O2Z1bmN0aW9uIHJlKHQsZSxpKXt2b2lkIDA9PT1pJiYoaT0hMSk7dmFyIG4scyxvPUV0KGUpLHI9X3QodCksYT1mdChlKSxsPXtzY3JvbGxMZWZ0OjAsc2Nyb2xsVG9wOjB9LGM9e3g6MCx5OjB9O3JldHVybihhfHwhYSYmIWkpJiYoKFwiYm9keVwiIT09aHQoZSl8fEZ0KG8pKSYmKGw9KG49ZSkhPT1kdChuKSYmZnQobik/e3Njcm9sbExlZnQ6KHM9bikuc2Nyb2xsTGVmdCxzY3JvbGxUb3A6cy5zY3JvbGxUb3B9OiR0KG4pKSxmdChlKT8oKGM9X3QoZSkpLngrPWUuY2xpZW50TGVmdCxjLnkrPWUuY2xpZW50VG9wKTpvJiYoYy54PVV0KG8pKSkse3g6ci5sZWZ0K2wuc2Nyb2xsTGVmdC1jLngseTpyLnRvcCtsLnNjcm9sbFRvcC1jLnksd2lkdGg6ci53aWR0aCxoZWlnaHQ6ci5oZWlnaHR9fXZhciBhZT17cGxhY2VtZW50OlwiYm90dG9tXCIsbW9kaWZpZXJzOltdLHN0cmF0ZWd5OlwiYWJzb2x1dGVcIn07ZnVuY3Rpb24gbGUoKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPW5ldyBBcnJheSh0KSxpPTA7aTx0O2krKyllW2ldPWFyZ3VtZW50c1tpXTtyZXR1cm4hZS5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4hKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KX0pKX1mdW5jdGlvbiBjZSh0KXt2b2lkIDA9PT10JiYodD17fSk7dmFyIGU9dCxpPWUuZGVmYXVsdE1vZGlmaWVycyxuPXZvaWQgMD09PWk/W106aSxzPWUuZGVmYXVsdE9wdGlvbnMsbz12b2lkIDA9PT1zP2FlOnM7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpKXt2b2lkIDA9PT1pJiYoaT1vKTt2YXIgcyxyLGE9e3BsYWNlbWVudDpcImJvdHRvbVwiLG9yZGVyZWRNb2RpZmllcnM6W10sb3B0aW9uczpPYmplY3QuYXNzaWduKHt9LGFlLG8pLG1vZGlmaWVyc0RhdGE6e30sZWxlbWVudHM6e3JlZmVyZW5jZTp0LHBvcHBlcjplfSxhdHRyaWJ1dGVzOnt9LHN0eWxlczp7fX0sbD1bXSxjPSExLGg9e3N0YXRlOmEsc2V0T3B0aW9uczpmdW5jdGlvbihpKXtkKCksYS5vcHRpb25zPU9iamVjdC5hc3NpZ24oe30sbyxhLm9wdGlvbnMsaSksYS5zY3JvbGxQYXJlbnRzPXtyZWZlcmVuY2U6dXQodCk/VnQodCk6dC5jb250ZXh0RWxlbWVudD9WdCh0LmNvbnRleHRFbGVtZW50KTpbXSxwb3BwZXI6VnQoZSl9O3ZhciBzLHIsYz1mdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgTWFwLGk9bmV3IFNldCxuPVtdO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2Uuc2V0KHQubmFtZSx0KX0pKSx0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2kuaGFzKHQubmFtZSl8fGZ1bmN0aW9uIHQocyl7aS5hZGQocy5uYW1lKSxbXS5jb25jYXQocy5yZXF1aXJlc3x8W10scy5yZXF1aXJlc0lmRXhpc3RzfHxbXSkuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoIWkuaGFzKG4pKXt2YXIgcz1lLmdldChuKTtzJiZ0KHMpfX0pKSxuLnB1c2gocyl9KHQpfSkpLG59KHQpO3JldHVybiBjdC5yZWR1Y2UoKGZ1bmN0aW9uKHQsaSl7cmV0dXJuIHQuY29uY2F0KGUuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdC5waGFzZT09PWl9KSkpfSksW10pfSgocz1bXS5jb25jYXQobixhLm9wdGlvbnMubW9kaWZpZXJzKSxyPXMucmVkdWNlKChmdW5jdGlvbih0LGUpe3ZhciBpPXRbZS5uYW1lXTtyZXR1cm4gdFtlLm5hbWVdPWk/T2JqZWN0LmFzc2lnbih7fSxpLGUse29wdGlvbnM6T2JqZWN0LmFzc2lnbih7fSxpLm9wdGlvbnMsZS5vcHRpb25zKSxkYXRhOk9iamVjdC5hc3NpZ24oe30saS5kYXRhLGUuZGF0YSl9KTplLHR9KSx7fSksT2JqZWN0LmtleXMocikubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gclt0XX0pKSkpO3JldHVybiBhLm9yZGVyZWRNb2RpZmllcnM9Yy5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmVuYWJsZWR9KSksYS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPXQubmFtZSxpPXQub3B0aW9ucyxuPXZvaWQgMD09PWk/e306aSxzPXQuZWZmZWN0O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHMpe3ZhciBvPXMoe3N0YXRlOmEsbmFtZTplLGluc3RhbmNlOmgsb3B0aW9uczpufSk7bC5wdXNoKG98fGZ1bmN0aW9uKCl7fSl9fSkpLGgudXBkYXRlKCl9LGZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7aWYoIWMpe3ZhciB0PWEuZWxlbWVudHMsZT10LnJlZmVyZW5jZSxpPXQucG9wcGVyO2lmKGxlKGUsaSkpe2EucmVjdHM9e3JlZmVyZW5jZTpyZShlLE90KGkpLFwiZml4ZWRcIj09PWEub3B0aW9ucy5zdHJhdGVneSkscG9wcGVyOmJ0KGkpfSxhLnJlc2V0PSExLGEucGxhY2VtZW50PWEub3B0aW9ucy5wbGFjZW1lbnQsYS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBhLm1vZGlmaWVyc0RhdGFbdC5uYW1lXT1PYmplY3QuYXNzaWduKHt9LHQuZGF0YSl9KSk7Zm9yKHZhciBuPTA7bjxhLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoO24rKylpZighMCE9PWEucmVzZXQpe3ZhciBzPWEub3JkZXJlZE1vZGlmaWVyc1tuXSxvPXMuZm4scj1zLm9wdGlvbnMsbD12b2lkIDA9PT1yP3t9OnIsZD1zLm5hbWU7XCJmdW5jdGlvblwiPT10eXBlb2YgbyYmKGE9byh7c3RhdGU6YSxvcHRpb25zOmwsbmFtZTpkLGluc3RhbmNlOmh9KXx8YSl9ZWxzZSBhLnJlc2V0PSExLG49LTF9fX0sdXBkYXRlOihzPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtoLmZvcmNlVXBkYXRlKCksdChhKX0pKX0sZnVuY3Rpb24oKXtyZXR1cm4gcnx8KHI9bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe1Byb21pc2UucmVzb2x2ZSgpLnRoZW4oKGZ1bmN0aW9uKCl7cj12b2lkIDAsdChzKCkpfSkpfSkpKSxyfSksZGVzdHJveTpmdW5jdGlvbigpe2QoKSxjPSEwfX07aWYoIWxlKHQsZSkpcmV0dXJuIGg7ZnVuY3Rpb24gZCgpe2wuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQoKX0pKSxsPVtdfXJldHVybiBoLnNldE9wdGlvbnMoaSkudGhlbigoZnVuY3Rpb24odCl7IWMmJmkub25GaXJzdFVwZGF0ZSYmaS5vbkZpcnN0VXBkYXRlKHQpfSkpLGh9fXZhciBoZT1jZSgpLGRlPWNlKHtkZWZhdWx0TW9kaWZpZXJzOltSdCxzZSxQdCxtdF19KSx1ZT1jZSh7ZGVmYXVsdE1vZGlmaWVyczpbUnQsc2UsUHQsbXQsbmUsSnQsb2UsTnQsaWVdfSksZmU9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwscG9wcGVyR2VuZXJhdG9yOmNlLGRldGVjdE92ZXJmbG93Okd0LGNyZWF0ZVBvcHBlckJhc2U6aGUsY3JlYXRlUG9wcGVyOnVlLGNyZWF0ZVBvcHBlckxpdGU6ZGUsdG9wOml0LGJvdHRvbTpudCxyaWdodDpzdCxsZWZ0Om90LGF1dG86XCJhdXRvXCIsYmFzZVBsYWNlbWVudHM6cnQsc3RhcnQ6XCJzdGFydFwiLGVuZDpcImVuZFwiLGNsaXBwaW5nUGFyZW50czpcImNsaXBwaW5nUGFyZW50c1wiLHZpZXdwb3J0Olwidmlld3BvcnRcIixwb3BwZXI6XCJwb3BwZXJcIixyZWZlcmVuY2U6XCJyZWZlcmVuY2VcIix2YXJpYXRpb25QbGFjZW1lbnRzOmF0LHBsYWNlbWVudHM6bHQsYmVmb3JlUmVhZDpcImJlZm9yZVJlYWRcIixyZWFkOlwicmVhZFwiLGFmdGVyUmVhZDpcImFmdGVyUmVhZFwiLGJlZm9yZU1haW46XCJiZWZvcmVNYWluXCIsbWFpbjpcIm1haW5cIixhZnRlck1haW46XCJhZnRlck1haW5cIixiZWZvcmVXcml0ZTpcImJlZm9yZVdyaXRlXCIsd3JpdGU6XCJ3cml0ZVwiLGFmdGVyV3JpdGU6XCJhZnRlcldyaXRlXCIsbW9kaWZpZXJQaGFzZXM6Y3QsYXBwbHlTdHlsZXM6bXQsYXJyb3c6TnQsY29tcHV0ZVN0eWxlczpQdCxldmVudExpc3RlbmVyczpSdCxmbGlwOkp0LGhpZGU6aWUsb2Zmc2V0Om5lLHBvcHBlck9mZnNldHM6c2UscHJldmVudE92ZXJmbG93Om9lfSk7Y29uc3QgcGU9bmV3IFJlZ0V4cChcIkFycm93VXB8QXJyb3dEb3dufEVzY2FwZVwiKSxtZT1nKCk/XCJ0b3AtZW5kXCI6XCJ0b3Atc3RhcnRcIixnZT1nKCk/XCJ0b3Atc3RhcnRcIjpcInRvcC1lbmRcIixfZT1nKCk/XCJib3R0b20tZW5kXCI6XCJib3R0b20tc3RhcnRcIixiZT1nKCk/XCJib3R0b20tc3RhcnRcIjpcImJvdHRvbS1lbmRcIix2ZT1nKCk/XCJsZWZ0LXN0YXJ0XCI6XCJyaWdodC1zdGFydFwiLHllPWcoKT9cInJpZ2h0LXN0YXJ0XCI6XCJsZWZ0LXN0YXJ0XCIsd2U9e29mZnNldDpbMCwyXSxib3VuZGFyeTpcImNsaXBwaW5nUGFyZW50c1wiLHJlZmVyZW5jZTpcInRvZ2dsZVwiLGRpc3BsYXk6XCJkeW5hbWljXCIscG9wcGVyQ29uZmlnOm51bGwsYXV0b0Nsb3NlOiEwfSxFZT17b2Zmc2V0OlwiKGFycmF5fHN0cmluZ3xmdW5jdGlvbilcIixib3VuZGFyeTpcIihzdHJpbmd8ZWxlbWVudClcIixyZWZlcmVuY2U6XCIoc3RyaW5nfGVsZW1lbnR8b2JqZWN0KVwiLGRpc3BsYXk6XCJzdHJpbmdcIixwb3BwZXJDb25maWc6XCIobnVsbHxvYmplY3R8ZnVuY3Rpb24pXCIsYXV0b0Nsb3NlOlwiKGJvb2xlYW58c3RyaW5nKVwifTtjbGFzcyBBZSBleHRlbmRzIEJ7Y29uc3RydWN0b3IodCxlKXtzdXBlcih0KSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX21lbnU9dGhpcy5fZ2V0TWVudUVsZW1lbnQoKSx0aGlzLl9pbk5hdmJhcj10aGlzLl9kZXRlY3ROYXZiYXIoKSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpfXN0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiB3ZX1zdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCl7cmV0dXJuIEVlfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwiZHJvcGRvd25cIn10b2dnbGUoKXtoKHRoaXMuX2VsZW1lbnQpfHwodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpP3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpKX1zaG93KCl7aWYoaCh0aGlzLl9lbGVtZW50KXx8dGhpcy5fbWVudS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKXJldHVybjtjb25zdCB0PUFlLmdldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpLGU9e3JlbGF0ZWRUYXJnZXQ6dGhpcy5fZWxlbWVudH07aWYoIVAudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy5kcm9wZG93blwiLGUpLmRlZmF1bHRQcmV2ZW50ZWQpe2lmKHRoaXMuX2luTmF2YmFyKVUuc2V0RGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LFwicG9wcGVyXCIsXCJub25lXCIpO2Vsc2V7aWYodm9pZCAwPT09ZmUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkJvb3RzdHJhcCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKVwiKTtsZXQgZT10aGlzLl9lbGVtZW50O1wicGFyZW50XCI9PT10aGlzLl9jb25maWcucmVmZXJlbmNlP2U9dDpyKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpP2U9YSh0aGlzLl9jb25maWcucmVmZXJlbmNlKTpcIm9iamVjdFwiPT10eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZSYmKGU9dGhpcy5fY29uZmlnLnJlZmVyZW5jZSk7Y29uc3QgaT10aGlzLl9nZXRQb3BwZXJDb25maWcoKSxuPWkubW9kaWZpZXJzLmZpbmQodD0+XCJhcHBseVN0eWxlc1wiPT09dC5uYW1lJiYhMT09PXQuZW5hYmxlZCk7dGhpcy5fcG9wcGVyPXVlKGUsdGhpcy5fbWVudSxpKSxuJiZVLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSxcInBvcHBlclwiLFwic3RhdGljXCIpfVwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJiF0LmNsb3Nlc3QoXCIubmF2YmFyLW5hdlwiKSYmW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2godD0+UC5vbih0LFwibW91c2VvdmVyXCIsdSkpLHRoaXMuX2VsZW1lbnQuZm9jdXMoKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCksdGhpcy5fbWVudS5jbGFzc0xpc3QudG9nZ2xlKFwic2hvd1wiKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJzaG93XCIpLFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvd24uYnMuZHJvcGRvd25cIixlKX19aGlkZSgpe2lmKGgodGhpcy5fZWxlbWVudCl8fCF0aGlzLl9tZW51LmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIikpcmV0dXJuO2NvbnN0IHQ9e3JlbGF0ZWRUYXJnZXQ6dGhpcy5fZWxlbWVudH07dGhpcy5fY29tcGxldGVIaWRlKHQpfWRpc3Bvc2UoKXt0aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5kZXN0cm95KCksc3VwZXIuZGlzcG9zZSgpfXVwZGF0ZSgpe3RoaXMuX2luTmF2YmFyPXRoaXMuX2RldGVjdE5hdmJhcigpLHRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLnVwZGF0ZSgpfV9hZGRFdmVudExpc3RlbmVycygpe1Aub24odGhpcy5fZWxlbWVudCxcImNsaWNrLmJzLmRyb3Bkb3duXCIsdD0+e3QucHJldmVudERlZmF1bHQoKSx0aGlzLnRvZ2dsZSgpfSl9X2NvbXBsZXRlSGlkZSh0KXtQLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGUuYnMuZHJvcGRvd25cIix0KS5kZWZhdWx0UHJldmVudGVkfHwoXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2godD0+UC5vZmYodCxcIm1vdXNlb3ZlclwiLHUpKSx0aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5kZXN0cm95KCksdGhpcy5fbWVudS5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLFwiZmFsc2VcIiksVS5yZW1vdmVEYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsXCJwb3BwZXJcIiksUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRkZW4uYnMuZHJvcGRvd25cIix0KSl9X2dldENvbmZpZyh0KXtpZih0PXsuLi50aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSwuLi50fSxsKFwiZHJvcGRvd25cIix0LHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpLFwib2JqZWN0XCI9PXR5cGVvZiB0LnJlZmVyZW5jZSYmIXIodC5yZWZlcmVuY2UpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LnJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpdGhyb3cgbmV3IFR5cGVFcnJvcihcImRyb3Bkb3duXCIudG9VcHBlckNhc2UoKSsnOiBPcHRpb24gXCJyZWZlcmVuY2VcIiBwcm92aWRlZCB0eXBlIFwib2JqZWN0XCIgd2l0aG91dCBhIHJlcXVpcmVkIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIgbWV0aG9kLicpO3JldHVybiB0fV9nZXRNZW51RWxlbWVudCgpe3JldHVybiB0Lm5leHQodGhpcy5fZWxlbWVudCxcIi5kcm9wZG93bi1tZW51XCIpWzBdfV9nZXRQbGFjZW1lbnQoKXtjb25zdCB0PXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZTtpZih0LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3BlbmRcIikpcmV0dXJuIHZlO2lmKHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcHN0YXJ0XCIpKXJldHVybiB5ZTtjb25zdCBlPVwiZW5kXCI9PT1nZXRDb21wdXRlZFN0eWxlKHRoaXMuX21lbnUpLmdldFByb3BlcnR5VmFsdWUoXCItLWJzLXBvc2l0aW9uXCIpLnRyaW0oKTtyZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wdXBcIik/ZT9nZTptZTplP2JlOl9lfV9kZXRlY3ROYXZiYXIoKXtyZXR1cm4gbnVsbCE9PXRoaXMuX2VsZW1lbnQuY2xvc2VzdChcIi5uYXZiYXJcIil9X2dldE9mZnNldCgpe2NvbnN0e29mZnNldDp0fT10aGlzLl9jb25maWc7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dC5zcGxpdChcIixcIikubWFwKHQ9Pk51bWJlci5wYXJzZUludCh0LDEwKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgdD9lPT50KGUsdGhpcy5fZWxlbWVudCk6dH1fZ2V0UG9wcGVyQ29uZmlnKCl7Y29uc3QgdD17cGxhY2VtZW50OnRoaXMuX2dldFBsYWNlbWVudCgpLG1vZGlmaWVyczpbe25hbWU6XCJwcmV2ZW50T3ZlcmZsb3dcIixvcHRpb25zOntib3VuZGFyeTp0aGlzLl9jb25maWcuYm91bmRhcnl9fSx7bmFtZTpcIm9mZnNldFwiLG9wdGlvbnM6e29mZnNldDp0aGlzLl9nZXRPZmZzZXQoKX19XX07cmV0dXJuXCJzdGF0aWNcIj09PXRoaXMuX2NvbmZpZy5kaXNwbGF5JiYodC5tb2RpZmllcnM9W3tuYW1lOlwiYXBwbHlTdHlsZXNcIixlbmFibGVkOiExfV0pLHsuLi50LC4uLlwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWc/dGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyh0KTp0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnfX1fc2VsZWN0TWVudUl0ZW0oe2tleTplLHRhcmdldDppfSl7Y29uc3Qgbj10LmZpbmQoXCIuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKVwiLHRoaXMuX21lbnUpLmZpbHRlcihjKTtuLmxlbmd0aCYmeShuLGksXCJBcnJvd0Rvd25cIj09PWUsIW4uaW5jbHVkZXMoaSkpLmZvY3VzKCl9c3RhdGljIGRyb3Bkb3duSW50ZXJmYWNlKHQsZSl7Y29uc3QgaT1BZS5nZXRPckNyZWF0ZUluc3RhbmNlKHQsZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKHZvaWQgMD09PWlbZV0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtlfVwiYCk7aVtlXSgpfX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7QWUuZHJvcGRvd25JbnRlcmZhY2UodGhpcyx0KX0pKX1zdGF0aWMgY2xlYXJNZW51cyhlKXtpZihlJiYoMj09PWUuYnV0dG9ufHxcImtleXVwXCI9PT1lLnR5cGUmJlwiVGFiXCIhPT1lLmtleSkpcmV0dXJuO2NvbnN0IGk9dC5maW5kKCdbZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiXScpO2ZvcihsZXQgdD0wLG49aS5sZW5ndGg7dDxuO3QrKyl7Y29uc3Qgbj1BZS5nZXRJbnN0YW5jZShpW3RdKTtpZighbnx8ITE9PT1uLl9jb25maWcuYXV0b0Nsb3NlKWNvbnRpbnVlO2lmKCFuLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIikpY29udGludWU7Y29uc3Qgcz17cmVsYXRlZFRhcmdldDpuLl9lbGVtZW50fTtpZihlKXtjb25zdCB0PWUuY29tcG9zZWRQYXRoKCksaT10LmluY2x1ZGVzKG4uX21lbnUpO2lmKHQuaW5jbHVkZXMobi5fZWxlbWVudCl8fFwiaW5zaWRlXCI9PT1uLl9jb25maWcuYXV0b0Nsb3NlJiYhaXx8XCJvdXRzaWRlXCI9PT1uLl9jb25maWcuYXV0b0Nsb3NlJiZpKWNvbnRpbnVlO2lmKG4uX21lbnUuY29udGFpbnMoZS50YXJnZXQpJiYoXCJrZXl1cFwiPT09ZS50eXBlJiZcIlRhYlwiPT09ZS5rZXl8fC9pbnB1dHxzZWxlY3R8b3B0aW9ufHRleHRhcmVhfGZvcm0vaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSljb250aW51ZTtcImNsaWNrXCI9PT1lLnR5cGUmJihzLmNsaWNrRXZlbnQ9ZSl9bi5fY29tcGxldGVIaWRlKHMpfX1zdGF0aWMgZ2V0UGFyZW50RnJvbUVsZW1lbnQodCl7cmV0dXJuIHModCl8fHQucGFyZW50Tm9kZX1zdGF0aWMgZGF0YUFwaUtleWRvd25IYW5kbGVyKGUpe2lmKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSk/XCJTcGFjZVwiPT09ZS5rZXl8fFwiRXNjYXBlXCIhPT1lLmtleSYmKFwiQXJyb3dEb3duXCIhPT1lLmtleSYmXCJBcnJvd1VwXCIhPT1lLmtleXx8ZS50YXJnZXQuY2xvc2VzdChcIi5kcm9wZG93bi1tZW51XCIpKTohcGUudGVzdChlLmtleSkpcmV0dXJuO2NvbnN0IGk9dGhpcy5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpO2lmKCFpJiZcIkVzY2FwZVwiPT09ZS5rZXkpcmV0dXJuO2lmKGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLGgodGhpcykpcmV0dXJuO2NvbnN0IG49KCk9PnRoaXMubWF0Y2hlcygnW2RhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIl0nKT90aGlzOnQucHJldih0aGlzLCdbZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiXScpWzBdO3JldHVyblwiRXNjYXBlXCI9PT1lLmtleT8obigpLmZvY3VzKCksdm9pZCBBZS5jbGVhck1lbnVzKCkpOlwiQXJyb3dVcFwiPT09ZS5rZXl8fFwiQXJyb3dEb3duXCI9PT1lLmtleT8oaXx8bigpLmNsaWNrKCksdm9pZCBBZS5nZXRJbnN0YW5jZShuKCkpLl9zZWxlY3RNZW51SXRlbShlKSk6dm9pZChpJiZcIlNwYWNlXCIhPT1lLmtleXx8QWUuY2xlYXJNZW51cygpKX19UC5vbihkb2N1bWVudCxcImtleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGlcIiwnW2RhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIl0nLEFlLmRhdGFBcGlLZXlkb3duSGFuZGxlciksUC5vbihkb2N1bWVudCxcImtleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGlcIixcIi5kcm9wZG93bi1tZW51XCIsQWUuZGF0YUFwaUtleWRvd25IYW5kbGVyKSxQLm9uKGRvY3VtZW50LFwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIixBZS5jbGVhck1lbnVzKSxQLm9uKGRvY3VtZW50LFwia2V5dXAuYnMuZHJvcGRvd24uZGF0YS1hcGlcIixBZS5jbGVhck1lbnVzKSxQLm9uKGRvY3VtZW50LFwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIiwnW2RhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIl0nLChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksQWUuZHJvcGRvd25JbnRlcmZhY2UodGhpcyl9KSksXyhBZSk7Y2xhc3MgVGV7Y29uc3RydWN0b3IoKXt0aGlzLl9lbGVtZW50PWRvY3VtZW50LmJvZHl9Z2V0V2lkdGgoKXtjb25zdCB0PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtyZXR1cm4gTWF0aC5hYnMod2luZG93LmlubmVyV2lkdGgtdCl9aGlkZSgpe2NvbnN0IHQ9dGhpcy5nZXRXaWR0aCgpO3RoaXMuX2Rpc2FibGVPdmVyRmxvdygpLHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsXCJwYWRkaW5nUmlnaHRcIixlPT5lK3QpLHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKFwiLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcFwiLFwicGFkZGluZ1JpZ2h0XCIsZT0+ZSt0KSx0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyhcIi5zdGlja3ktdG9wXCIsXCJtYXJnaW5SaWdodFwiLGU9PmUtdCl9X2Rpc2FibGVPdmVyRmxvdygpe3RoaXMuX3NhdmVJbml0aWFsQXR0cmlidXRlKHRoaXMuX2VsZW1lbnQsXCJvdmVyZmxvd1wiKSx0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCJ9X3NldEVsZW1lbnRBdHRyaWJ1dGVzKHQsZSxpKXtjb25zdCBuPXRoaXMuZ2V0V2lkdGgoKTt0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHQsdD0+e2lmKHQhPT10aGlzLl9lbGVtZW50JiZ3aW5kb3cuaW5uZXJXaWR0aD50LmNsaWVudFdpZHRoK24pcmV0dXJuO3RoaXMuX3NhdmVJbml0aWFsQXR0cmlidXRlKHQsZSk7Y29uc3Qgcz13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KVtlXTt0LnN0eWxlW2VdPWkoTnVtYmVyLnBhcnNlRmxvYXQocykpK1wicHhcIn0pfXJlc2V0KCl7dGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LFwib3ZlcmZsb3dcIiksdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LFwicGFkZGluZ1JpZ2h0XCIpLHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoXCIuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wXCIsXCJwYWRkaW5nUmlnaHRcIiksdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhcIi5zdGlja3ktdG9wXCIsXCJtYXJnaW5SaWdodFwiKX1fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodCxlKXtjb25zdCBpPXQuc3R5bGVbZV07aSYmVS5zZXREYXRhQXR0cmlidXRlKHQsZSxpKX1fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0LGUpe3RoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2sodCx0PT57Y29uc3QgaT1VLmdldERhdGFBdHRyaWJ1dGUodCxlKTt2b2lkIDA9PT1pP3Quc3R5bGUucmVtb3ZlUHJvcGVydHkoZSk6KFUucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0LGUpLHQuc3R5bGVbZV09aSl9KX1fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhlLGkpe3IoZSk/aShlKTp0LmZpbmQoZSx0aGlzLl9lbGVtZW50KS5mb3JFYWNoKGkpfWlzT3ZlcmZsb3dpbmcoKXtyZXR1cm4gdGhpcy5nZXRXaWR0aCgpPjB9fWNvbnN0IE9lPXtpc1Zpc2libGU6ITAsaXNBbmltYXRlZDohMSxyb290RWxlbWVudDpcImJvZHlcIixjbGlja0NhbGxiYWNrOm51bGx9LENlPXtpc1Zpc2libGU6XCJib29sZWFuXCIsaXNBbmltYXRlZDpcImJvb2xlYW5cIixyb290RWxlbWVudDpcIihlbGVtZW50fHN0cmluZylcIixjbGlja0NhbGxiYWNrOlwiKGZ1bmN0aW9ufG51bGwpXCJ9O2NsYXNzIGtle2NvbnN0cnVjdG9yKHQpe3RoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcodCksdGhpcy5faXNBcHBlbmRlZD0hMSx0aGlzLl9lbGVtZW50PW51bGx9c2hvdyh0KXt0aGlzLl9jb25maWcuaXNWaXNpYmxlPyh0aGlzLl9hcHBlbmQoKSx0aGlzLl9jb25maWcuaXNBbmltYXRlZCYmZih0aGlzLl9nZXRFbGVtZW50KCkpLHRoaXMuX2dldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKSx0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpPT57Yih0KX0pKTpiKHQpfWhpZGUodCl7dGhpcy5fY29uZmlnLmlzVmlzaWJsZT8odGhpcy5fZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpLHRoaXMuX2VtdWxhdGVBbmltYXRpb24oKCk9Pnt0aGlzLmRpc3Bvc2UoKSxiKHQpfSkpOmIodCl9X2dldEVsZW1lbnQoKXtpZighdGhpcy5fZWxlbWVudCl7Y29uc3QgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuY2xhc3NOYW1lPVwibW9kYWwtYmFja2Ryb3BcIix0aGlzLl9jb25maWcuaXNBbmltYXRlZCYmdC5jbGFzc0xpc3QuYWRkKFwiZmFkZVwiKSx0aGlzLl9lbGVtZW50PXR9cmV0dXJuIHRoaXMuX2VsZW1lbnR9X2dldENvbmZpZyh0KXtyZXR1cm4odD17Li4uT2UsLi4uXCJvYmplY3RcIj09dHlwZW9mIHQ/dDp7fX0pLnJvb3RFbGVtZW50PWEodC5yb290RWxlbWVudCksbChcImJhY2tkcm9wXCIsdCxDZSksdH1fYXBwZW5kKCl7dGhpcy5faXNBcHBlbmRlZHx8KHRoaXMuX2NvbmZpZy5yb290RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9nZXRFbGVtZW50KCkpLFAub24odGhpcy5fZ2V0RWxlbWVudCgpLFwibW91c2Vkb3duLmJzLmJhY2tkcm9wXCIsKCk9PntiKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKX0pLHRoaXMuX2lzQXBwZW5kZWQ9ITApfWRpc3Bvc2UoKXt0aGlzLl9pc0FwcGVuZGVkJiYoUC5vZmYodGhpcy5fZWxlbWVudCxcIm1vdXNlZG93bi5icy5iYWNrZHJvcFwiKSx0aGlzLl9lbGVtZW50LnJlbW92ZSgpLHRoaXMuX2lzQXBwZW5kZWQ9ITEpfV9lbXVsYXRlQW5pbWF0aW9uKHQpe3YodCx0aGlzLl9nZXRFbGVtZW50KCksdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpfX1jb25zdCBMZT17YmFja2Ryb3A6ITAsa2V5Ym9hcmQ6ITAsZm9jdXM6ITB9LHhlPXtiYWNrZHJvcDpcIihib29sZWFufHN0cmluZylcIixrZXlib2FyZDpcImJvb2xlYW5cIixmb2N1czpcImJvb2xlYW5cIn07Y2xhc3MgRGUgZXh0ZW5kcyBCe2NvbnN0cnVjdG9yKGUsaSl7c3VwZXIoZSksdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhpKSx0aGlzLl9kaWFsb2c9dC5maW5kT25lKFwiLm1vZGFsLWRpYWxvZ1wiLHRoaXMuX2VsZW1lbnQpLHRoaXMuX2JhY2tkcm9wPXRoaXMuX2luaXRpYWxpemVCYWNrRHJvcCgpLHRoaXMuX2lzU2hvd249ITEsdGhpcy5faWdub3JlQmFja2Ryb3BDbGljaz0hMSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fc2Nyb2xsQmFyPW5ldyBUZX1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gTGV9c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJtb2RhbFwifXRvZ2dsZSh0KXtyZXR1cm4gdGhpcy5faXNTaG93bj90aGlzLmhpZGUoKTp0aGlzLnNob3codCl9c2hvdyh0KXt0aGlzLl9pc1Nob3dufHx0aGlzLl9pc1RyYW5zaXRpb25pbmd8fFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy5tb2RhbFwiLHtyZWxhdGVkVGFyZ2V0OnR9KS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5faXNTaG93bj0hMCx0aGlzLl9pc0FuaW1hdGVkKCkmJih0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITApLHRoaXMuX3Njcm9sbEJhci5oaWRlKCksZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwibW9kYWwtb3BlblwiKSx0aGlzLl9hZGp1c3REaWFsb2coKSx0aGlzLl9zZXRFc2NhcGVFdmVudCgpLHRoaXMuX3NldFJlc2l6ZUV2ZW50KCksUC5vbih0aGlzLl9lbGVtZW50LFwiY2xpY2suZGlzbWlzcy5icy5tb2RhbFwiLCdbZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIl0nLHQ9PnRoaXMuaGlkZSh0KSksUC5vbih0aGlzLl9kaWFsb2csXCJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLCgpPT57UC5vbmUodGhpcy5fZWxlbWVudCxcIm1vdXNldXAuZGlzbWlzcy5icy5tb2RhbFwiLHQ9Pnt0LnRhcmdldD09PXRoaXMuX2VsZW1lbnQmJih0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrPSEwKX0pfSksdGhpcy5fc2hvd0JhY2tkcm9wKCgpPT50aGlzLl9zaG93RWxlbWVudCh0KSkpfWhpZGUodCl7aWYodCYmW1wiQVwiLFwiQVJFQVwiXS5pbmNsdWRlcyh0LnRhcmdldC50YWdOYW1lKSYmdC5wcmV2ZW50RGVmYXVsdCgpLCF0aGlzLl9pc1Nob3dufHx0aGlzLl9pc1RyYW5zaXRpb25pbmcpcmV0dXJuO2lmKFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZS5icy5tb2RhbFwiKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjt0aGlzLl9pc1Nob3duPSExO2NvbnN0IGU9dGhpcy5faXNBbmltYXRlZCgpO2UmJih0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITApLHRoaXMuX3NldEVzY2FwZUV2ZW50KCksdGhpcy5fc2V0UmVzaXplRXZlbnQoKSxQLm9mZihkb2N1bWVudCxcImZvY3VzaW4uYnMubW9kYWxcIiksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKSxQLm9mZih0aGlzLl9lbGVtZW50LFwiY2xpY2suZGlzbWlzcy5icy5tb2RhbFwiKSxQLm9mZih0aGlzLl9kaWFsb2csXCJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbFwiKSx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpPT50aGlzLl9oaWRlTW9kYWwoKSx0aGlzLl9lbGVtZW50LGUpfWRpc3Bvc2UoKXtbd2luZG93LHRoaXMuX2RpYWxvZ10uZm9yRWFjaCh0PT5QLm9mZih0LFwiLmJzLm1vZGFsXCIpKSx0aGlzLl9iYWNrZHJvcC5kaXNwb3NlKCksc3VwZXIuZGlzcG9zZSgpLFAub2ZmKGRvY3VtZW50LFwiZm9jdXNpbi5icy5tb2RhbFwiKX1oYW5kbGVVcGRhdGUoKXt0aGlzLl9hZGp1c3REaWFsb2coKX1faW5pdGlhbGl6ZUJhY2tEcm9wKCl7cmV0dXJuIG5ldyBrZSh7aXNWaXNpYmxlOkJvb2xlYW4odGhpcy5fY29uZmlnLmJhY2tkcm9wKSxpc0FuaW1hdGVkOnRoaXMuX2lzQW5pbWF0ZWQoKX0pfV9nZXRDb25maWcodCl7cmV0dXJuIHQ9ey4uLkxlLC4uLlUuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksLi4uXCJvYmplY3RcIj09dHlwZW9mIHQ/dDp7fX0sbChcIm1vZGFsXCIsdCx4ZSksdH1fc2hvd0VsZW1lbnQoZSl7Y29uc3QgaT10aGlzLl9pc0FuaW1hdGVkKCksbj10LmZpbmRPbmUoXCIubW9kYWwtYm9keVwiLHRoaXMuX2RpYWxvZyk7dGhpcy5fZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERXx8ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KSx0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiksdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsITApLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwiZGlhbG9nXCIpLHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wPTAsbiYmKG4uc2Nyb2xsVG9wPTApLGkmJmYodGhpcy5fZWxlbWVudCksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKSx0aGlzLl9jb25maWcuZm9jdXMmJnRoaXMuX2VuZm9yY2VGb2N1cygpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCk9Pnt0aGlzLl9jb25maWcuZm9jdXMmJnRoaXMuX2VsZW1lbnQuZm9jdXMoKSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy5tb2RhbFwiLHtyZWxhdGVkVGFyZ2V0OmV9KX0sdGhpcy5fZGlhbG9nLGkpfV9lbmZvcmNlRm9jdXMoKXtQLm9mZihkb2N1bWVudCxcImZvY3VzaW4uYnMubW9kYWxcIiksUC5vbihkb2N1bWVudCxcImZvY3VzaW4uYnMubW9kYWxcIix0PT57ZG9jdW1lbnQ9PT10LnRhcmdldHx8dGhpcy5fZWxlbWVudD09PXQudGFyZ2V0fHx0aGlzLl9lbGVtZW50LmNvbnRhaW5zKHQudGFyZ2V0KXx8dGhpcy5fZWxlbWVudC5mb2N1cygpfSl9X3NldEVzY2FwZUV2ZW50KCl7dGhpcy5faXNTaG93bj9QLm9uKHRoaXMuX2VsZW1lbnQsXCJrZXlkb3duLmRpc21pc3MuYnMubW9kYWxcIix0PT57dGhpcy5fY29uZmlnLmtleWJvYXJkJiZcIkVzY2FwZVwiPT09dC5rZXk/KHQucHJldmVudERlZmF1bHQoKSx0aGlzLmhpZGUoKSk6dGhpcy5fY29uZmlnLmtleWJvYXJkfHxcIkVzY2FwZVwiIT09dC5rZXl8fHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKX0pOlAub2ZmKHRoaXMuX2VsZW1lbnQsXCJrZXlkb3duLmRpc21pc3MuYnMubW9kYWxcIil9X3NldFJlc2l6ZUV2ZW50KCl7dGhpcy5faXNTaG93bj9QLm9uKHdpbmRvdyxcInJlc2l6ZS5icy5tb2RhbFwiLCgpPT50aGlzLl9hZGp1c3REaWFsb2coKSk6UC5vZmYod2luZG93LFwicmVzaXplLmJzLm1vZGFsXCIpfV9oaWRlTW9kYWwoKXt0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXk9XCJub25lXCIsdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCEwKSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIiksdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJyb2xlXCIpLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSx0aGlzLl9iYWNrZHJvcC5oaWRlKCgpPT57ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWwtb3BlblwiKSx0aGlzLl9yZXNldEFkanVzdG1lbnRzKCksdGhpcy5fc2Nyb2xsQmFyLnJlc2V0KCksUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRkZW4uYnMubW9kYWxcIil9KX1fc2hvd0JhY2tkcm9wKHQpe1Aub24odGhpcy5fZWxlbWVudCxcImNsaWNrLmRpc21pc3MuYnMubW9kYWxcIix0PT57dGhpcy5faWdub3JlQmFja2Ryb3BDbGljaz90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrPSExOnQudGFyZ2V0PT09dC5jdXJyZW50VGFyZ2V0JiYoITA9PT10aGlzLl9jb25maWcuYmFja2Ryb3A/dGhpcy5oaWRlKCk6XCJzdGF0aWNcIj09PXRoaXMuX2NvbmZpZy5iYWNrZHJvcCYmdGhpcy5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpKX0pLHRoaXMuX2JhY2tkcm9wLnNob3codCl9X2lzQW5pbWF0ZWQoKXtyZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpfV90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCl7aWYoUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRlUHJldmVudGVkLmJzLm1vZGFsXCIpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuO2NvbnN0e2NsYXNzTGlzdDp0LHNjcm9sbEhlaWdodDplLHN0eWxlOml9PXRoaXMuX2VsZW1lbnQsbj1lPmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7IW4mJlwiaGlkZGVuXCI9PT1pLm92ZXJmbG93WXx8dC5jb250YWlucyhcIm1vZGFsLXN0YXRpY1wiKXx8KG58fChpLm92ZXJmbG93WT1cImhpZGRlblwiKSx0LmFkZChcIm1vZGFsLXN0YXRpY1wiKSx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpPT57dC5yZW1vdmUoXCJtb2RhbC1zdGF0aWNcIiksbnx8dGhpcy5fcXVldWVDYWxsYmFjaygoKT0+e2kub3ZlcmZsb3dZPVwiXCJ9LHRoaXMuX2RpYWxvZyl9LHRoaXMuX2RpYWxvZyksdGhpcy5fZWxlbWVudC5mb2N1cygpKX1fYWRqdXN0RGlhbG9nKCl7Y29uc3QgdD10aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LGU9dGhpcy5fc2Nyb2xsQmFyLmdldFdpZHRoKCksaT1lPjA7KCFpJiZ0JiYhZygpfHxpJiYhdCYmZygpKSYmKHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9ZStcInB4XCIpLChpJiYhdCYmIWcoKXx8IWkmJnQmJmcoKSkmJih0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodD1lK1wicHhcIil9X3Jlc2V0QWRqdXN0bWVudHMoKXt0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0PVwiXCIsdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ9XCJcIn1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQsZSl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtjb25zdCBpPURlLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyx0KTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYodm9pZCAwPT09aVt0XSl0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke3R9XCJgKTtpW3RdKGUpfX0pKX19UC5vbihkb2N1bWVudCxcImNsaWNrLmJzLm1vZGFsLmRhdGEtYXBpXCIsJ1tkYXRhLWJzLXRvZ2dsZT1cIm1vZGFsXCJdJywoZnVuY3Rpb24odCl7Y29uc3QgZT1zKHRoaXMpO1tcIkFcIixcIkFSRUFcIl0uaW5jbHVkZXModGhpcy50YWdOYW1lKSYmdC5wcmV2ZW50RGVmYXVsdCgpLFAub25lKGUsXCJzaG93LmJzLm1vZGFsXCIsdD0+e3QuZGVmYXVsdFByZXZlbnRlZHx8UC5vbmUoZSxcImhpZGRlbi5icy5tb2RhbFwiLCgpPT57Yyh0aGlzKSYmdGhpcy5mb2N1cygpfSl9KSxEZS5nZXRPckNyZWF0ZUluc3RhbmNlKGUpLnRvZ2dsZSh0aGlzKX0pKSxfKERlKTtjb25zdCBTZT17YmFja2Ryb3A6ITAsa2V5Ym9hcmQ6ITAsc2Nyb2xsOiExfSxJZT17YmFja2Ryb3A6XCJib29sZWFuXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIsc2Nyb2xsOlwiYm9vbGVhblwifTtjbGFzcyBOZSBleHRlbmRzIEJ7Y29uc3RydWN0b3IodCxlKXtzdXBlcih0KSx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX2lzU2hvd249ITEsdGhpcy5fYmFja2Ryb3A9dGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKCksdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKX1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cIm9mZmNhbnZhc1wifXN0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiBTZX10b2dnbGUodCl7cmV0dXJuIHRoaXMuX2lzU2hvd24/dGhpcy5oaWRlKCk6dGhpcy5zaG93KHQpfXNob3codCl7dGhpcy5faXNTaG93bnx8UC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93LmJzLm9mZmNhbnZhc1wiLHtyZWxhdGVkVGFyZ2V0OnR9KS5kZWZhdWx0UHJldmVudGVkfHwodGhpcy5faXNTaG93bj0hMCx0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHk9XCJ2aXNpYmxlXCIsdGhpcy5fYmFja2Ryb3Auc2hvdygpLHRoaXMuX2NvbmZpZy5zY3JvbGx8fCgobmV3IFRlKS5oaWRlKCksdGhpcy5fZW5mb3JjZUZvY3VzT25FbGVtZW50KHRoaXMuX2VsZW1lbnQpKSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiLCEwKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIixcImRpYWxvZ1wiKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCk9PntQLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcInNob3duLmJzLm9mZmNhbnZhc1wiLHtyZWxhdGVkVGFyZ2V0OnR9KX0sdGhpcy5fZWxlbWVudCwhMCkpfWhpZGUoKXt0aGlzLl9pc1Nob3duJiYoUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRlLmJzLm9mZmNhbnZhc1wiKS5kZWZhdWx0UHJldmVudGVkfHwoUC5vZmYoZG9jdW1lbnQsXCJmb2N1c2luLmJzLm9mZmNhbnZhc1wiKSx0aGlzLl9lbGVtZW50LmJsdXIoKSx0aGlzLl9pc1Nob3duPSExLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIiksdGhpcy5fYmFja2Ryb3AuaGlkZSgpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCk9Pnt0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsITApLHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiKSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInJvbGVcIiksdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCIsdGhpcy5fY29uZmlnLnNjcm9sbHx8KG5ldyBUZSkucmVzZXQoKSxQLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGRlbi5icy5vZmZjYW52YXNcIil9LHRoaXMuX2VsZW1lbnQsITApKSl9ZGlzcG9zZSgpe3RoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKSxzdXBlci5kaXNwb3NlKCksUC5vZmYoZG9jdW1lbnQsXCJmb2N1c2luLmJzLm9mZmNhbnZhc1wiKX1fZ2V0Q29uZmlnKHQpe3JldHVybiB0PXsuLi5TZSwuLi5VLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLC4uLlwib2JqZWN0XCI9PXR5cGVvZiB0P3Q6e319LGwoXCJvZmZjYW52YXNcIix0LEllKSx0fV9pbml0aWFsaXplQmFja0Ryb3AoKXtyZXR1cm4gbmV3IGtlKHtpc1Zpc2libGU6dGhpcy5fY29uZmlnLmJhY2tkcm9wLGlzQW5pbWF0ZWQ6ITAscm9vdEVsZW1lbnQ6dGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLGNsaWNrQ2FsbGJhY2s6KCk9PnRoaXMuaGlkZSgpfSl9X2VuZm9yY2VGb2N1c09uRWxlbWVudCh0KXtQLm9mZihkb2N1bWVudCxcImZvY3VzaW4uYnMub2ZmY2FudmFzXCIpLFAub24oZG9jdW1lbnQsXCJmb2N1c2luLmJzLm9mZmNhbnZhc1wiLGU9Pntkb2N1bWVudD09PWUudGFyZ2V0fHx0PT09ZS50YXJnZXR8fHQuY29udGFpbnMoZS50YXJnZXQpfHx0LmZvY3VzKCl9KSx0LmZvY3VzKCl9X2FkZEV2ZW50TGlzdGVuZXJzKCl7UC5vbih0aGlzLl9lbGVtZW50LFwiY2xpY2suZGlzbWlzcy5icy5vZmZjYW52YXNcIiwnW2RhdGEtYnMtZGlzbWlzcz1cIm9mZmNhbnZhc1wiXScsKCk9PnRoaXMuaGlkZSgpKSxQLm9uKHRoaXMuX2VsZW1lbnQsXCJrZXlkb3duLmRpc21pc3MuYnMub2ZmY2FudmFzXCIsdD0+e3RoaXMuX2NvbmZpZy5rZXlib2FyZCYmXCJFc2NhcGVcIj09PXQua2V5JiZ0aGlzLmhpZGUoKX0pfXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtjb25zdCBlPU5lLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyx0KTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYodm9pZCAwPT09ZVt0XXx8dC5zdGFydHNXaXRoKFwiX1wiKXx8XCJjb25zdHJ1Y3RvclwiPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke3R9XCJgKTtlW3RdKHRoaXMpfX0pKX19UC5vbihkb2N1bWVudCxcImNsaWNrLmJzLm9mZmNhbnZhcy5kYXRhLWFwaVwiLCdbZGF0YS1icy10b2dnbGU9XCJvZmZjYW52YXNcIl0nLChmdW5jdGlvbihlKXtjb25zdCBpPXModGhpcyk7aWYoW1wiQVwiLFwiQVJFQVwiXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpJiZlLnByZXZlbnREZWZhdWx0KCksaCh0aGlzKSlyZXR1cm47UC5vbmUoaSxcImhpZGRlbi5icy5vZmZjYW52YXNcIiwoKT0+e2ModGhpcykmJnRoaXMuZm9jdXMoKX0pO2NvbnN0IG49dC5maW5kT25lKFwiLm9mZmNhbnZhcy5zaG93XCIpO24mJm4hPT1pJiZOZS5nZXRJbnN0YW5jZShuKS5oaWRlKCksTmUuZ2V0T3JDcmVhdGVJbnN0YW5jZShpKS50b2dnbGUodGhpcyl9KSksUC5vbih3aW5kb3csXCJsb2FkLmJzLm9mZmNhbnZhcy5kYXRhLWFwaVwiLCgpPT50LmZpbmQoXCIub2ZmY2FudmFzLnNob3dcIikuZm9yRWFjaCh0PT5OZS5nZXRPckNyZWF0ZUluc3RhbmNlKHQpLnNob3coKSkpLF8oTmUpO2NvbnN0IGplPW5ldyBTZXQoW1wiYmFja2dyb3VuZFwiLFwiY2l0ZVwiLFwiaHJlZlwiLFwiaXRlbXR5cGVcIixcImxvbmdkZXNjXCIsXCJwb3N0ZXJcIixcInNyY1wiLFwieGxpbms6aHJlZlwiXSksTWU9L14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZSk6fFteIyYvOj9dKig/OlsjLz9dfCQpKS9pLFBlPS9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFtcXGQrL2Etel0rPSokL2ksSGU9KHQsZSk9Pntjb25zdCBpPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihlLmluY2x1ZGVzKGkpKXJldHVybiFqZS5oYXMoaSl8fEJvb2xlYW4oTWUudGVzdCh0Lm5vZGVWYWx1ZSl8fFBlLnRlc3QodC5ub2RlVmFsdWUpKTtjb25zdCBuPWUuZmlsdGVyKHQ9PnQgaW5zdGFuY2VvZiBSZWdFeHApO2ZvcihsZXQgdD0wLGU9bi5sZW5ndGg7dDxlO3QrKylpZihuW3RdLnRlc3QoaSkpcmV0dXJuITA7cmV0dXJuITF9O2Z1bmN0aW9uIFJlKHQsZSxpKXtpZighdC5sZW5ndGgpcmV0dXJuIHQ7aWYoaSYmXCJmdW5jdGlvblwiPT10eXBlb2YgaSlyZXR1cm4gaSh0KTtjb25zdCBuPShuZXcgd2luZG93LkRPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKHQsXCJ0ZXh0L2h0bWxcIikscz1PYmplY3Qua2V5cyhlKSxvPVtdLmNvbmNhdCguLi5uLmJvZHkucXVlcnlTZWxlY3RvckFsbChcIipcIikpO2ZvcihsZXQgdD0wLGk9by5sZW5ndGg7dDxpO3QrKyl7Y29uc3QgaT1vW3RdLG49aS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKCFzLmluY2x1ZGVzKG4pKXtpLnJlbW92ZSgpO2NvbnRpbnVlfWNvbnN0IHI9W10uY29uY2F0KC4uLmkuYXR0cmlidXRlcyksYT1bXS5jb25jYXQoZVtcIipcIl18fFtdLGVbbl18fFtdKTtyLmZvckVhY2godD0+e0hlKHQsYSl8fGkucmVtb3ZlQXR0cmlidXRlKHQubm9kZU5hbWUpfSl9cmV0dXJuIG4uYm9keS5pbm5lckhUTUx9Y29uc3QgQmU9bmV3IFJlZ0V4cChcIihefFxcXFxzKWJzLXRvb2x0aXBcXFxcUytcIixcImdcIiksV2U9bmV3IFNldChbXCJzYW5pdGl6ZVwiLFwiYWxsb3dMaXN0XCIsXCJzYW5pdGl6ZUZuXCJdKSxxZT17YW5pbWF0aW9uOlwiYm9vbGVhblwiLHRlbXBsYXRlOlwic3RyaW5nXCIsdGl0bGU6XCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCIsdHJpZ2dlcjpcInN0cmluZ1wiLGRlbGF5OlwiKG51bWJlcnxvYmplY3QpXCIsaHRtbDpcImJvb2xlYW5cIixzZWxlY3RvcjpcIihzdHJpbmd8Ym9vbGVhbilcIixwbGFjZW1lbnQ6XCIoc3RyaW5nfGZ1bmN0aW9uKVwiLG9mZnNldDpcIihhcnJheXxzdHJpbmd8ZnVuY3Rpb24pXCIsY29udGFpbmVyOlwiKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pXCIsZmFsbGJhY2tQbGFjZW1lbnRzOlwiYXJyYXlcIixib3VuZGFyeTpcIihzdHJpbmd8ZWxlbWVudClcIixjdXN0b21DbGFzczpcIihzdHJpbmd8ZnVuY3Rpb24pXCIsc2FuaXRpemU6XCJib29sZWFuXCIsc2FuaXRpemVGbjpcIihudWxsfGZ1bmN0aW9uKVwiLGFsbG93TGlzdDpcIm9iamVjdFwiLHBvcHBlckNvbmZpZzpcIihudWxsfG9iamVjdHxmdW5jdGlvbilcIn0semU9e0FVVE86XCJhdXRvXCIsVE9QOlwidG9wXCIsUklHSFQ6ZygpP1wibGVmdFwiOlwicmlnaHRcIixCT1RUT006XCJib3R0b21cIixMRUZUOmcoKT9cInJpZ2h0XCI6XCJsZWZ0XCJ9LCRlPXthbmltYXRpb246ITAsdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+Jyx0cmlnZ2VyOlwiaG92ZXIgZm9jdXNcIix0aXRsZTpcIlwiLGRlbGF5OjAsaHRtbDohMSxzZWxlY3RvcjohMSxwbGFjZW1lbnQ6XCJ0b3BcIixvZmZzZXQ6WzAsMF0sY29udGFpbmVyOiExLGZhbGxiYWNrUGxhY2VtZW50czpbXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIixcImxlZnRcIl0sYm91bmRhcnk6XCJjbGlwcGluZ1BhcmVudHNcIixjdXN0b21DbGFzczpcIlwiLHNhbml0aXplOiEwLHNhbml0aXplRm46bnVsbCxhbGxvd0xpc3Q6e1wiKlwiOltcImNsYXNzXCIsXCJkaXJcIixcImlkXCIsXCJsYW5nXCIsXCJyb2xlXCIsL15hcmlhLVtcXHctXSokL2ldLGE6W1widGFyZ2V0XCIsXCJocmVmXCIsXCJ0aXRsZVwiLFwicmVsXCJdLGFyZWE6W10sYjpbXSxicjpbXSxjb2w6W10sY29kZTpbXSxkaXY6W10sZW06W10saHI6W10saDE6W10saDI6W10saDM6W10saDQ6W10saDU6W10saDY6W10saTpbXSxpbWc6W1wic3JjXCIsXCJzcmNzZXRcIixcImFsdFwiLFwidGl0bGVcIixcIndpZHRoXCIsXCJoZWlnaHRcIl0sbGk6W10sb2w6W10scDpbXSxwcmU6W10sczpbXSxzbWFsbDpbXSxzcGFuOltdLHN1YjpbXSxzdXA6W10sc3Ryb25nOltdLHU6W10sdWw6W119LHBvcHBlckNvbmZpZzpudWxsfSxVZT17SElERTpcImhpZGUuYnMudG9vbHRpcFwiLEhJRERFTjpcImhpZGRlbi5icy50b29sdGlwXCIsU0hPVzpcInNob3cuYnMudG9vbHRpcFwiLFNIT1dOOlwic2hvd24uYnMudG9vbHRpcFwiLElOU0VSVEVEOlwiaW5zZXJ0ZWQuYnMudG9vbHRpcFwiLENMSUNLOlwiY2xpY2suYnMudG9vbHRpcFwiLEZPQ1VTSU46XCJmb2N1c2luLmJzLnRvb2x0aXBcIixGT0NVU09VVDpcImZvY3Vzb3V0LmJzLnRvb2x0aXBcIixNT1VTRUVOVEVSOlwibW91c2VlbnRlci5icy50b29sdGlwXCIsTU9VU0VMRUFWRTpcIm1vdXNlbGVhdmUuYnMudG9vbHRpcFwifTtjbGFzcyBGZSBleHRlbmRzIEJ7Y29uc3RydWN0b3IodCxlKXtpZih2b2lkIDA9PT1mZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9vdHN0cmFwJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZylcIik7c3VwZXIodCksdGhpcy5faXNFbmFibGVkPSEwLHRoaXMuX3RpbWVvdXQ9MCx0aGlzLl9ob3ZlclN0YXRlPVwiXCIsdGhpcy5fYWN0aXZlVHJpZ2dlcj17fSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMudGlwPW51bGwsdGhpcy5fc2V0TGlzdGVuZXJzKCl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuICRlfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwidG9vbHRpcFwifXN0YXRpYyBnZXQgRXZlbnQoKXtyZXR1cm4gVWV9c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBxZX1lbmFibGUoKXt0aGlzLl9pc0VuYWJsZWQ9ITB9ZGlzYWJsZSgpe3RoaXMuX2lzRW5hYmxlZD0hMX10b2dnbGVFbmFibGVkKCl7dGhpcy5faXNFbmFibGVkPSF0aGlzLl9pc0VuYWJsZWR9dG9nZ2xlKHQpe2lmKHRoaXMuX2lzRW5hYmxlZClpZih0KXtjb25zdCBlPXRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCh0KTtlLl9hY3RpdmVUcmlnZ2VyLmNsaWNrPSFlLl9hY3RpdmVUcmlnZ2VyLmNsaWNrLGUuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKT9lLl9lbnRlcihudWxsLGUpOmUuX2xlYXZlKG51bGwsZSl9ZWxzZXtpZih0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKXJldHVybiB2b2lkIHRoaXMuX2xlYXZlKG51bGwsdGhpcyk7dGhpcy5fZW50ZXIobnVsbCx0aGlzKX19ZGlzcG9zZSgpe2NsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KSxQLm9mZih0aGlzLl9lbGVtZW50LmNsb3Nlc3QoXCIubW9kYWxcIiksXCJoaWRlLmJzLm1vZGFsXCIsdGhpcy5faGlkZU1vZGFsSGFuZGxlciksdGhpcy50aXAmJnRoaXMudGlwLnJlbW92ZSgpLHRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSxzdXBlci5kaXNwb3NlKCl9c2hvdygpe2lmKFwibm9uZVwiPT09dGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5KXRocm93IG5ldyBFcnJvcihcIlBsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzXCIpO2lmKCF0aGlzLmlzV2l0aENvbnRlbnQoKXx8IXRoaXMuX2lzRW5hYmxlZClyZXR1cm47Y29uc3QgdD1QLnRyaWdnZXIodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpLGk9ZCh0aGlzLl9lbGVtZW50KSxuPW51bGw9PT1pP3RoaXMuX2VsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModGhpcy5fZWxlbWVudCk6aS5jb250YWlucyh0aGlzLl9lbGVtZW50KTtpZih0LmRlZmF1bHRQcmV2ZW50ZWR8fCFuKXJldHVybjtjb25zdCBzPXRoaXMuZ2V0VGlwRWxlbWVudCgpLG89ZSh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpO3Muc2V0QXR0cmlidXRlKFwiaWRcIixvKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIixvKSx0aGlzLnNldENvbnRlbnQoKSx0aGlzLl9jb25maWcuYW5pbWF0aW9uJiZzLmNsYXNzTGlzdC5hZGQoXCJmYWRlXCIpO2NvbnN0IHI9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fY29uZmlnLnBsYWNlbWVudD90aGlzLl9jb25maWcucGxhY2VtZW50LmNhbGwodGhpcyxzLHRoaXMuX2VsZW1lbnQpOnRoaXMuX2NvbmZpZy5wbGFjZW1lbnQsYT10aGlzLl9nZXRBdHRhY2htZW50KHIpO3RoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyhhKTtjb25zdHtjb250YWluZXI6bH09dGhpcy5fY29uZmlnO1Iuc2V0KHMsdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSx0aGlzKSx0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMudGlwKXx8KGwuYXBwZW5kQ2hpbGQocyksUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCkpLHRoaXMuX3BvcHBlcj90aGlzLl9wb3BwZXIudXBkYXRlKCk6dGhpcy5fcG9wcGVyPXVlKHRoaXMuX2VsZW1lbnQscyx0aGlzLl9nZXRQb3BwZXJDb25maWcoYSkpLHMuY2xhc3NMaXN0LmFkZChcInNob3dcIik7Y29uc3QgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl9jb25maWcuY3VzdG9tQ2xhc3M/dGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzKCk6dGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzO2MmJnMuY2xhc3NMaXN0LmFkZCguLi5jLnNwbGl0KFwiIFwiKSksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2godD0+e1Aub24odCxcIm1vdXNlb3ZlclwiLHUpfSk7Y29uc3QgaD10aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpO3RoaXMuX3F1ZXVlQ2FsbGJhY2soKCk9Pntjb25zdCB0PXRoaXMuX2hvdmVyU3RhdGU7dGhpcy5faG92ZXJTdGF0ZT1udWxsLFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pLFwib3V0XCI9PT10JiZ0aGlzLl9sZWF2ZShudWxsLHRoaXMpfSx0aGlzLnRpcCxoKX1oaWRlKCl7aWYoIXRoaXMuX3BvcHBlcilyZXR1cm47Y29uc3QgdD10aGlzLmdldFRpcEVsZW1lbnQoKTtpZihQLnRyaWdnZXIodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuO3QuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIiksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2godD0+UC5vZmYodCxcIm1vdXNlb3ZlclwiLHUpKSx0aGlzLl9hY3RpdmVUcmlnZ2VyLmNsaWNrPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXIuZm9jdXM9ITEsdGhpcy5fYWN0aXZlVHJpZ2dlci5ob3Zlcj0hMTtjb25zdCBlPXRoaXMudGlwLmNsYXNzTGlzdC5jb250YWlucyhcImZhZGVcIik7dGhpcy5fcXVldWVDYWxsYmFjaygoKT0+e3RoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKXx8KFwic2hvd1wiIT09dGhpcy5faG92ZXJTdGF0ZSYmdC5yZW1vdmUoKSx0aGlzLl9jbGVhblRpcENsYXNzKCksdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpLFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKSx0aGlzLl9wb3BwZXImJih0aGlzLl9wb3BwZXIuZGVzdHJveSgpLHRoaXMuX3BvcHBlcj1udWxsKSl9LHRoaXMudGlwLGUpLHRoaXMuX2hvdmVyU3RhdGU9XCJcIn11cGRhdGUoKXtudWxsIT09dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIudXBkYXRlKCl9aXNXaXRoQ29udGVudCgpe3JldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSl9Z2V0VGlwRWxlbWVudCgpe2lmKHRoaXMudGlwKXJldHVybiB0aGlzLnRpcDtjb25zdCB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIHQuaW5uZXJIVE1MPXRoaXMuX2NvbmZpZy50ZW1wbGF0ZSx0aGlzLnRpcD10LmNoaWxkcmVuWzBdLHRoaXMudGlwfXNldENvbnRlbnQoKXtjb25zdCBlPXRoaXMuZ2V0VGlwRWxlbWVudCgpO3RoaXMuc2V0RWxlbWVudENvbnRlbnQodC5maW5kT25lKFwiLnRvb2x0aXAtaW5uZXJcIixlKSx0aGlzLmdldFRpdGxlKCkpLGUuY2xhc3NMaXN0LnJlbW92ZShcImZhZGVcIixcInNob3dcIil9c2V0RWxlbWVudENvbnRlbnQodCxlKXtpZihudWxsIT09dClyZXR1cm4gcihlKT8oZT1hKGUpLHZvaWQodGhpcy5fY29uZmlnLmh0bWw/ZS5wYXJlbnROb2RlIT09dCYmKHQuaW5uZXJIVE1MPVwiXCIsdC5hcHBlbmRDaGlsZChlKSk6dC50ZXh0Q29udGVudD1lLnRleHRDb250ZW50KSk6dm9pZCh0aGlzLl9jb25maWcuaHRtbD8odGhpcy5fY29uZmlnLnNhbml0aXplJiYoZT1SZShlLHRoaXMuX2NvbmZpZy5hbGxvd0xpc3QsdGhpcy5fY29uZmlnLnNhbml0aXplRm4pKSx0LmlubmVySFRNTD1lKTp0LnRleHRDb250ZW50PWUpfWdldFRpdGxlKCl7bGV0IHQ9dGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlXCIpO3JldHVybiB0fHwodD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl9jb25maWcudGl0bGU/dGhpcy5fY29uZmlnLnRpdGxlLmNhbGwodGhpcy5fZWxlbWVudCk6dGhpcy5fY29uZmlnLnRpdGxlKSx0fXVwZGF0ZUF0dGFjaG1lbnQodCl7cmV0dXJuXCJyaWdodFwiPT09dD9cImVuZFwiOlwibGVmdFwiPT09dD9cInN0YXJ0XCI6dH1faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KHQsZSl7Y29uc3QgaT10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO3JldHVybihlPWV8fFIuZ2V0KHQuZGVsZWdhdGVUYXJnZXQsaSkpfHwoZT1uZXcgdGhpcy5jb25zdHJ1Y3Rvcih0LmRlbGVnYXRlVGFyZ2V0LHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpLFIuc2V0KHQuZGVsZWdhdGVUYXJnZXQsaSxlKSksZX1fZ2V0T2Zmc2V0KCl7Y29uc3R7b2Zmc2V0OnR9PXRoaXMuX2NvbmZpZztyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD90LnNwbGl0KFwiLFwiKS5tYXAodD0+TnVtYmVyLnBhcnNlSW50KHQsMTApKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P2U9PnQoZSx0aGlzLl9lbGVtZW50KTp0fV9nZXRQb3BwZXJDb25maWcodCl7Y29uc3QgZT17cGxhY2VtZW50OnQsbW9kaWZpZXJzOlt7bmFtZTpcImZsaXBcIixvcHRpb25zOntmYWxsYmFja1BsYWNlbWVudHM6dGhpcy5fY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50c319LHtuYW1lOlwib2Zmc2V0XCIsb3B0aW9uczp7b2Zmc2V0OnRoaXMuX2dldE9mZnNldCgpfX0se25hbWU6XCJwcmV2ZW50T3ZlcmZsb3dcIixvcHRpb25zOntib3VuZGFyeTp0aGlzLl9jb25maWcuYm91bmRhcnl9fSx7bmFtZTpcImFycm93XCIsb3B0aW9uczp7ZWxlbWVudDpgLiR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfS1hcnJvd2B9fSx7bmFtZTpcIm9uQ2hhbmdlXCIsZW5hYmxlZDohMCxwaGFzZTpcImFmdGVyV3JpdGVcIixmbjp0PT50aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UodCl9XSxvbkZpcnN0VXBkYXRlOnQ9Pnt0Lm9wdGlvbnMucGxhY2VtZW50IT09dC5wbGFjZW1lbnQmJnRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KX19O3JldHVybnsuLi5lLC4uLlwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWc/dGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyhlKTp0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnfX1fYWRkQXR0YWNobWVudENsYXNzKHQpe3RoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJicy10b29sdGlwLVwiK3RoaXMudXBkYXRlQXR0YWNobWVudCh0KSl9X2dldEF0dGFjaG1lbnQodCl7cmV0dXJuIHplW3QudG9VcHBlckNhc2UoKV19X3NldExpc3RlbmVycygpe3RoaXMuX2NvbmZpZy50cmlnZ2VyLnNwbGl0KFwiIFwiKS5mb3JFYWNoKHQ9PntpZihcImNsaWNrXCI9PT10KVAub24odGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLHRoaXMuX2NvbmZpZy5zZWxlY3Rvcix0PT50aGlzLnRvZ2dsZSh0KSk7ZWxzZSBpZihcIm1hbnVhbFwiIT09dCl7Y29uc3QgZT1cImhvdmVyXCI9PT10P3RoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUjp0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU4saT1cImhvdmVyXCI9PT10P3RoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRTp0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUO1Aub24odGhpcy5fZWxlbWVudCxlLHRoaXMuX2NvbmZpZy5zZWxlY3Rvcix0PT50aGlzLl9lbnRlcih0KSksUC5vbih0aGlzLl9lbGVtZW50LGksdGhpcy5fY29uZmlnLnNlbGVjdG9yLHQ9PnRoaXMuX2xlYXZlKHQpKX19KSx0aGlzLl9oaWRlTW9kYWxIYW5kbGVyPSgpPT57dGhpcy5fZWxlbWVudCYmdGhpcy5oaWRlKCl9LFAub24odGhpcy5fZWxlbWVudC5jbG9zZXN0KFwiLm1vZGFsXCIpLFwiaGlkZS5icy5tb2RhbFwiLHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpLHRoaXMuX2NvbmZpZy5zZWxlY3Rvcj90aGlzLl9jb25maWc9ey4uLnRoaXMuX2NvbmZpZyx0cmlnZ2VyOlwibWFudWFsXCIsc2VsZWN0b3I6XCJcIn06dGhpcy5fZml4VGl0bGUoKX1fZml4VGl0bGUoKXtjb25zdCB0PXRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIiksZT10eXBlb2YgdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlXCIpOyh0fHxcInN0cmluZ1wiIT09ZSkmJih0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtYnMtb3JpZ2luYWwtdGl0bGVcIix0fHxcIlwiKSwhdHx8dGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIpfHx0aGlzLl9lbGVtZW50LnRleHRDb250ZW50fHx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIix0KSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsXCJcIikpfV9lbnRlcih0LGUpe2U9dGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KHQsZSksdCYmKGUuX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c2luXCI9PT10LnR5cGU/XCJmb2N1c1wiOlwiaG92ZXJcIl09ITApLGUuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIil8fFwic2hvd1wiPT09ZS5faG92ZXJTdGF0ZT9lLl9ob3ZlclN0YXRlPVwic2hvd1wiOihjbGVhclRpbWVvdXQoZS5fdGltZW91dCksZS5faG92ZXJTdGF0ZT1cInNob3dcIixlLl9jb25maWcuZGVsYXkmJmUuX2NvbmZpZy5kZWxheS5zaG93P2UuX3RpbWVvdXQ9c2V0VGltZW91dCgoKT0+e1wic2hvd1wiPT09ZS5faG92ZXJTdGF0ZSYmZS5zaG93KCl9LGUuX2NvbmZpZy5kZWxheS5zaG93KTplLnNob3coKSl9X2xlYXZlKHQsZSl7ZT10aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQodCxlKSx0JiYoZS5fYWN0aXZlVHJpZ2dlcltcImZvY3Vzb3V0XCI9PT10LnR5cGU/XCJmb2N1c1wiOlwiaG92ZXJcIl09ZS5fZWxlbWVudC5jb250YWlucyh0LnJlbGF0ZWRUYXJnZXQpKSxlLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCl8fChjbGVhclRpbWVvdXQoZS5fdGltZW91dCksZS5faG92ZXJTdGF0ZT1cIm91dFwiLGUuX2NvbmZpZy5kZWxheSYmZS5fY29uZmlnLmRlbGF5LmhpZGU/ZS5fdGltZW91dD1zZXRUaW1lb3V0KCgpPT57XCJvdXRcIj09PWUuX2hvdmVyU3RhdGUmJmUuaGlkZSgpfSxlLl9jb25maWcuZGVsYXkuaGlkZSk6ZS5oaWRlKCkpfV9pc1dpdGhBY3RpdmVUcmlnZ2VyKCl7Zm9yKGNvbnN0IHQgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcilpZih0aGlzLl9hY3RpdmVUcmlnZ2VyW3RdKXJldHVybiEwO3JldHVybiExfV9nZXRDb25maWcodCl7Y29uc3QgZT1VLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpO3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKHQ9PntXZS5oYXModCkmJmRlbGV0ZSBlW3RdfSksKHQ9ey4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwuLi5lLC4uLlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0P3Q6e319KS5jb250YWluZXI9ITE9PT10LmNvbnRhaW5lcj9kb2N1bWVudC5ib2R5OmEodC5jb250YWluZXIpLFwibnVtYmVyXCI9PXR5cGVvZiB0LmRlbGF5JiYodC5kZWxheT17c2hvdzp0LmRlbGF5LGhpZGU6dC5kZWxheX0pLFwibnVtYmVyXCI9PXR5cGVvZiB0LnRpdGxlJiYodC50aXRsZT10LnRpdGxlLnRvU3RyaW5nKCkpLFwibnVtYmVyXCI9PXR5cGVvZiB0LmNvbnRlbnQmJih0LmNvbnRlbnQ9dC5jb250ZW50LnRvU3RyaW5nKCkpLGwoXCJ0b29sdGlwXCIsdCx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSx0LnNhbml0aXplJiYodC50ZW1wbGF0ZT1SZSh0LnRlbXBsYXRlLHQuYWxsb3dMaXN0LHQuc2FuaXRpemVGbikpLHR9X2dldERlbGVnYXRlQ29uZmlnKCl7Y29uc3QgdD17fTtpZih0aGlzLl9jb25maWcpZm9yKGNvbnN0IGUgaW4gdGhpcy5fY29uZmlnKXRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtlXSE9PXRoaXMuX2NvbmZpZ1tlXSYmKHRbZV09dGhpcy5fY29uZmlnW2VdKTtyZXR1cm4gdH1fY2xlYW5UaXBDbGFzcygpe2NvbnN0IHQ9dGhpcy5nZXRUaXBFbGVtZW50KCksZT10LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLm1hdGNoKEJlKTtudWxsIT09ZSYmZS5sZW5ndGg+MCYmZS5tYXAodD0+dC50cmltKCkpLmZvckVhY2goZT0+dC5jbGFzc0xpc3QucmVtb3ZlKGUpKX1faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHQpe2NvbnN0e3N0YXRlOmV9PXQ7ZSYmKHRoaXMudGlwPWUuZWxlbWVudHMucG9wcGVyLHRoaXMuX2NsZWFuVGlwQ2xhc3MoKSx0aGlzLl9hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChlLnBsYWNlbWVudCkpKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1GZS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSgpfX0pKX19XyhGZSk7Y29uc3QgVmU9bmV3IFJlZ0V4cChcIihefFxcXFxzKWJzLXBvcG92ZXJcXFxcUytcIixcImdcIiksS2U9ey4uLkZlLkRlZmF1bHQscGxhY2VtZW50OlwicmlnaHRcIixvZmZzZXQ6WzAsOF0sdHJpZ2dlcjpcImNsaWNrXCIsY29udGVudDpcIlwiLHRlbXBsYXRlOic8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInBvcG92ZXItYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2Pid9LFhlPXsuLi5GZS5EZWZhdWx0VHlwZSxjb250ZW50OlwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKVwifSxZZT17SElERTpcImhpZGUuYnMucG9wb3ZlclwiLEhJRERFTjpcImhpZGRlbi5icy5wb3BvdmVyXCIsU0hPVzpcInNob3cuYnMucG9wb3ZlclwiLFNIT1dOOlwic2hvd24uYnMucG9wb3ZlclwiLElOU0VSVEVEOlwiaW5zZXJ0ZWQuYnMucG9wb3ZlclwiLENMSUNLOlwiY2xpY2suYnMucG9wb3ZlclwiLEZPQ1VTSU46XCJmb2N1c2luLmJzLnBvcG92ZXJcIixGT0NVU09VVDpcImZvY3Vzb3V0LmJzLnBvcG92ZXJcIixNT1VTRUVOVEVSOlwibW91c2VlbnRlci5icy5wb3BvdmVyXCIsTU9VU0VMRUFWRTpcIm1vdXNlbGVhdmUuYnMucG9wb3ZlclwifTtjbGFzcyBRZSBleHRlbmRzIEZle3N0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiBLZX1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cInBvcG92ZXJcIn1zdGF0aWMgZ2V0IEV2ZW50KCl7cmV0dXJuIFllfXN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKXtyZXR1cm4gWGV9aXNXaXRoQ29udGVudCgpe3JldHVybiB0aGlzLmdldFRpdGxlKCl8fHRoaXMuX2dldENvbnRlbnQoKX1nZXRUaXBFbGVtZW50KCl7cmV0dXJuIHRoaXMudGlwfHwodGhpcy50aXA9c3VwZXIuZ2V0VGlwRWxlbWVudCgpLHRoaXMuZ2V0VGl0bGUoKXx8dC5maW5kT25lKFwiLnBvcG92ZXItaGVhZGVyXCIsdGhpcy50aXApLnJlbW92ZSgpLHRoaXMuX2dldENvbnRlbnQoKXx8dC5maW5kT25lKFwiLnBvcG92ZXItYm9keVwiLHRoaXMudGlwKS5yZW1vdmUoKSksdGhpcy50aXB9c2V0Q29udGVudCgpe2NvbnN0IGU9dGhpcy5nZXRUaXBFbGVtZW50KCk7dGhpcy5zZXRFbGVtZW50Q29udGVudCh0LmZpbmRPbmUoXCIucG9wb3Zlci1oZWFkZXJcIixlKSx0aGlzLmdldFRpdGxlKCkpO2xldCBpPXRoaXMuX2dldENvbnRlbnQoKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBpJiYoaT1pLmNhbGwodGhpcy5fZWxlbWVudCkpLHRoaXMuc2V0RWxlbWVudENvbnRlbnQodC5maW5kT25lKFwiLnBvcG92ZXItYm9keVwiLGUpLGkpLGUuY2xhc3NMaXN0LnJlbW92ZShcImZhZGVcIixcInNob3dcIil9X2FkZEF0dGFjaG1lbnRDbGFzcyh0KXt0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwiYnMtcG9wb3Zlci1cIit0aGlzLnVwZGF0ZUF0dGFjaG1lbnQodCkpfV9nZXRDb250ZW50KCl7cmV0dXJuIHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1jb250ZW50XCIpfHx0aGlzLl9jb25maWcuY29udGVudH1fY2xlYW5UaXBDbGFzcygpe2NvbnN0IHQ9dGhpcy5nZXRUaXBFbGVtZW50KCksZT10LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLm1hdGNoKFZlKTtudWxsIT09ZSYmZS5sZW5ndGg+MCYmZS5tYXAodD0+dC50cmltKCkpLmZvckVhY2goZT0+dC5jbGFzc0xpc3QucmVtb3ZlKGUpKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1RZS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSgpfX0pKX19XyhRZSk7Y29uc3QgR2U9e29mZnNldDoxMCxtZXRob2Q6XCJhdXRvXCIsdGFyZ2V0OlwiXCJ9LFplPXtvZmZzZXQ6XCJudW1iZXJcIixtZXRob2Q6XCJzdHJpbmdcIix0YXJnZXQ6XCIoc3RyaW5nfGVsZW1lbnQpXCJ9O2NsYXNzIEplIGV4dGVuZHMgQntjb25zdHJ1Y3Rvcih0LGUpe3N1cGVyKHQpLHRoaXMuX3Njcm9sbEVsZW1lbnQ9XCJCT0RZXCI9PT10aGlzLl9lbGVtZW50LnRhZ05hbWU/d2luZG93OnRoaXMuX2VsZW1lbnQsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9zZWxlY3Rvcj1gJHt0aGlzLl9jb25maWcudGFyZ2V0fSAubmF2LWxpbmssICR7dGhpcy5fY29uZmlnLnRhcmdldH0gLmxpc3QtZ3JvdXAtaXRlbSwgJHt0aGlzLl9jb25maWcudGFyZ2V0fSAuZHJvcGRvd24taXRlbWAsdGhpcy5fb2Zmc2V0cz1bXSx0aGlzLl90YXJnZXRzPVtdLHRoaXMuX2FjdGl2ZVRhcmdldD1udWxsLHRoaXMuX3Njcm9sbEhlaWdodD0wLFAub24odGhpcy5fc2Nyb2xsRWxlbWVudCxcInNjcm9sbC5icy5zY3JvbGxzcHlcIiwoKT0+dGhpcy5fcHJvY2VzcygpKSx0aGlzLnJlZnJlc2goKSx0aGlzLl9wcm9jZXNzKCl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuIEdlfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwic2Nyb2xsc3B5XCJ9cmVmcmVzaCgpe2NvbnN0IGU9dGhpcy5fc2Nyb2xsRWxlbWVudD09PXRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93P1wib2Zmc2V0XCI6XCJwb3NpdGlvblwiLGk9XCJhdXRvXCI9PT10aGlzLl9jb25maWcubWV0aG9kP2U6dGhpcy5fY29uZmlnLm1ldGhvZCxzPVwicG9zaXRpb25cIj09PWk/dGhpcy5fZ2V0U2Nyb2xsVG9wKCk6MDt0aGlzLl9vZmZzZXRzPVtdLHRoaXMuX3RhcmdldHM9W10sdGhpcy5fc2Nyb2xsSGVpZ2h0PXRoaXMuX2dldFNjcm9sbEhlaWdodCgpLHQuZmluZCh0aGlzLl9zZWxlY3RvcikubWFwKGU9Pntjb25zdCBvPW4oZSkscj1vP3QuZmluZE9uZShvKTpudWxsO2lmKHIpe2NvbnN0IHQ9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZih0LndpZHRofHx0LmhlaWdodClyZXR1cm5bVVtpXShyKS50b3ArcyxvXX1yZXR1cm4gbnVsbH0pLmZpbHRlcih0PT50KS5zb3J0KCh0LGUpPT50WzBdLWVbMF0pLmZvckVhY2godD0+e3RoaXMuX29mZnNldHMucHVzaCh0WzBdKSx0aGlzLl90YXJnZXRzLnB1c2godFsxXSl9KX1kaXNwb3NlKCl7UC5vZmYodGhpcy5fc2Nyb2xsRWxlbWVudCxcIi5icy5zY3JvbGxzcHlcIiksc3VwZXIuZGlzcG9zZSgpfV9nZXRDb25maWcodCl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mKHQ9ey4uLkdlLC4uLlUuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksLi4uXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fX0pLnRhcmdldCYmcih0LnRhcmdldCkpe2xldHtpZDppfT10LnRhcmdldDtpfHwoaT1lKFwic2Nyb2xsc3B5XCIpLHQudGFyZ2V0LmlkPWkpLHQudGFyZ2V0PVwiI1wiK2l9cmV0dXJuIGwoXCJzY3JvbGxzcHlcIix0LFplKSx0fV9nZXRTY3JvbGxUb3AoKXtyZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudD09PXdpbmRvdz90aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0OnRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wfV9nZXRTY3JvbGxIZWlnaHQoKXtyZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHR8fE1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpfV9nZXRPZmZzZXRIZWlnaHQoKXtyZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudD09PXdpbmRvdz93aW5kb3cuaW5uZXJIZWlnaHQ6dGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHR9X3Byb2Nlc3MoKXtjb25zdCB0PXRoaXMuX2dldFNjcm9sbFRvcCgpK3RoaXMuX2NvbmZpZy5vZmZzZXQsZT10aGlzLl9nZXRTY3JvbGxIZWlnaHQoKSxpPXRoaXMuX2NvbmZpZy5vZmZzZXQrZS10aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtpZih0aGlzLl9zY3JvbGxIZWlnaHQhPT1lJiZ0aGlzLnJlZnJlc2goKSx0Pj1pKXtjb25zdCB0PXRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGgtMV07dGhpcy5fYWN0aXZlVGFyZ2V0IT09dCYmdGhpcy5fYWN0aXZhdGUodCl9ZWxzZXtpZih0aGlzLl9hY3RpdmVUYXJnZXQmJnQ8dGhpcy5fb2Zmc2V0c1swXSYmdGhpcy5fb2Zmc2V0c1swXT4wKXJldHVybiB0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx2b2lkIHRoaXMuX2NsZWFyKCk7Zm9yKGxldCBlPXRoaXMuX29mZnNldHMubGVuZ3RoO2UtLTspdGhpcy5fYWN0aXZlVGFyZ2V0IT09dGhpcy5fdGFyZ2V0c1tlXSYmdD49dGhpcy5fb2Zmc2V0c1tlXSYmKHZvaWQgMD09PXRoaXMuX29mZnNldHNbZSsxXXx8dDx0aGlzLl9vZmZzZXRzW2UrMV0pJiZ0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2VdKX19X2FjdGl2YXRlKGUpe3RoaXMuX2FjdGl2ZVRhcmdldD1lLHRoaXMuX2NsZWFyKCk7Y29uc3QgaT10aGlzLl9zZWxlY3Rvci5zcGxpdChcIixcIikubWFwKHQ9PmAke3R9W2RhdGEtYnMtdGFyZ2V0PVwiJHtlfVwiXSwke3R9W2hyZWY9XCIke2V9XCJdYCksbj10LmZpbmRPbmUoaS5qb2luKFwiLFwiKSk7bi5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wZG93bi1pdGVtXCIpPyh0LmZpbmRPbmUoXCIuZHJvcGRvd24tdG9nZ2xlXCIsbi5jbG9zZXN0KFwiLmRyb3Bkb3duXCIpKS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpLG4uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKSk6KG4uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKSx0LnBhcmVudHMobixcIi5uYXYsIC5saXN0LWdyb3VwXCIpLmZvckVhY2goZT0+e3QucHJldihlLFwiLm5hdi1saW5rLCAubGlzdC1ncm91cC1pdGVtXCIpLmZvckVhY2godD0+dC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpKSx0LnByZXYoZSxcIi5uYXYtaXRlbVwiKS5mb3JFYWNoKGU9Pnt0LmNoaWxkcmVuKGUsXCIubmF2LWxpbmtcIikuZm9yRWFjaCh0PT50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIikpfSl9KSksUC50cmlnZ2VyKHRoaXMuX3Njcm9sbEVsZW1lbnQsXCJhY3RpdmF0ZS5icy5zY3JvbGxzcHlcIix7cmVsYXRlZFRhcmdldDplfSl9X2NsZWFyKCl7dC5maW5kKHRoaXMuX3NlbGVjdG9yKS5maWx0ZXIodD0+dC5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIikpLmZvckVhY2godD0+dC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1KZS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSgpfX0pKX19UC5vbih3aW5kb3csXCJsb2FkLmJzLnNjcm9sbHNweS5kYXRhLWFwaVwiLCgpPT57dC5maW5kKCdbZGF0YS1icy1zcHk9XCJzY3JvbGxcIl0nKS5mb3JFYWNoKHQ9Pm5ldyBKZSh0KSl9KSxfKEplKTtjbGFzcyB0aSBleHRlbmRzIEJ7c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJ0YWJcIn1zaG93KCl7aWYodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIikpcmV0dXJuO2xldCBlO2NvbnN0IGk9cyh0aGlzLl9lbGVtZW50KSxuPXRoaXMuX2VsZW1lbnQuY2xvc2VzdChcIi5uYXYsIC5saXN0LWdyb3VwXCIpO2lmKG4pe2NvbnN0IGk9XCJVTFwiPT09bi5ub2RlTmFtZXx8XCJPTFwiPT09bi5ub2RlTmFtZT9cIjpzY29wZSA+IGxpID4gLmFjdGl2ZVwiOlwiLmFjdGl2ZVwiO2U9dC5maW5kKGksbiksZT1lW2UubGVuZ3RoLTFdfWNvbnN0IG89ZT9QLnRyaWdnZXIoZSxcImhpZGUuYnMudGFiXCIse3JlbGF0ZWRUYXJnZXQ6dGhpcy5fZWxlbWVudH0pOm51bGw7aWYoUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93LmJzLnRhYlwiLHtyZWxhdGVkVGFyZ2V0OmV9KS5kZWZhdWx0UHJldmVudGVkfHxudWxsIT09byYmby5kZWZhdWx0UHJldmVudGVkKXJldHVybjt0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LG4pO2NvbnN0IHI9KCk9PntQLnRyaWdnZXIoZSxcImhpZGRlbi5icy50YWJcIix7cmVsYXRlZFRhcmdldDp0aGlzLl9lbGVtZW50fSksUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy50YWJcIix7cmVsYXRlZFRhcmdldDplfSl9O2k/dGhpcy5fYWN0aXZhdGUoaSxpLnBhcmVudE5vZGUscik6cigpfV9hY3RpdmF0ZShlLGksbil7Y29uc3Qgcz0oIWl8fFwiVUxcIiE9PWkubm9kZU5hbWUmJlwiT0xcIiE9PWkubm9kZU5hbWU/dC5jaGlsZHJlbihpLFwiLmFjdGl2ZVwiKTp0LmZpbmQoXCI6c2NvcGUgPiBsaSA+IC5hY3RpdmVcIixpKSlbMF0sbz1uJiZzJiZzLmNsYXNzTGlzdC5jb250YWlucyhcImZhZGVcIikscj0oKT0+dGhpcy5fdHJhbnNpdGlvbkNvbXBsZXRlKGUscyxuKTtzJiZvPyhzLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpLHRoaXMuX3F1ZXVlQ2FsbGJhY2socixlLCEwKSk6cigpfV90cmFuc2l0aW9uQ29tcGxldGUoZSxpLG4pe2lmKGkpe2kuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtjb25zdCBlPXQuZmluZE9uZShcIjpzY29wZSA+IC5kcm9wZG93bi1tZW51IC5hY3RpdmVcIixpLnBhcmVudE5vZGUpO2UmJmUuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKSxcInRhYlwiPT09aS5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpJiZpLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwhMSl9ZS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpLFwidGFiXCI9PT1lLmdldEF0dHJpYnV0ZShcInJvbGVcIikmJmUuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCEwKSxmKGUpLGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmFkZVwiKSYmZS5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKTtsZXQgcz1lLnBhcmVudE5vZGU7aWYocyYmXCJMSVwiPT09cy5ub2RlTmFtZSYmKHM9cy5wYXJlbnROb2RlKSxzJiZzLmNsYXNzTGlzdC5jb250YWlucyhcImRyb3Bkb3duLW1lbnVcIikpe2NvbnN0IGk9ZS5jbG9zZXN0KFwiLmRyb3Bkb3duXCIpO2kmJnQuZmluZChcIi5kcm9wZG93bi10b2dnbGVcIixpKS5mb3JFYWNoKHQ9PnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKSksZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsITApfW4mJm4oKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT10aS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1lW3RdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2VbdF0oKX19KSl9fVAub24oZG9jdW1lbnQsXCJjbGljay5icy50YWIuZGF0YS1hcGlcIiwnW2RhdGEtYnMtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS1icy10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS1icy10b2dnbGU9XCJsaXN0XCJdJywoZnVuY3Rpb24odCl7W1wiQVwiLFwiQVJFQVwiXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpJiZ0LnByZXZlbnREZWZhdWx0KCksaCh0aGlzKXx8dGkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKS5zaG93KCl9KSksXyh0aSk7Y29uc3QgZWk9e2FuaW1hdGlvbjpcImJvb2xlYW5cIixhdXRvaGlkZTpcImJvb2xlYW5cIixkZWxheTpcIm51bWJlclwifSxpaT17YW5pbWF0aW9uOiEwLGF1dG9oaWRlOiEwLGRlbGF5OjVlM307Y2xhc3MgbmkgZXh0ZW5kcyBCe2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIodCksdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl90aW1lb3V0PW51bGwsdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbj0hMSx0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uPSExLHRoaXMuX3NldExpc3RlbmVycygpfXN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKXtyZXR1cm4gZWl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuIGlpfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwidG9hc3RcIn1zaG93KCl7UC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93LmJzLnRvYXN0XCIpLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLl9jbGVhclRpbWVvdXQoKSx0aGlzLl9jb25maWcuYW5pbWF0aW9uJiZ0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJmYWRlXCIpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIiksZih0aGlzLl9lbGVtZW50KSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzaG93aW5nXCIpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCk9Pnt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93aW5nXCIpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInNob3dcIiksUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy50b2FzdFwiKSx0aGlzLl9tYXliZVNjaGVkdWxlSGlkZSgpfSx0aGlzLl9lbGVtZW50LHRoaXMuX2NvbmZpZy5hbmltYXRpb24pKX1oaWRlKCl7dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpJiYoUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRlLmJzLnRvYXN0XCIpLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCk9Pnt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpLFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZGVuLmJzLnRvYXN0XCIpfSx0aGlzLl9lbGVtZW50LHRoaXMuX2NvbmZpZy5hbmltYXRpb24pKSl9ZGlzcG9zZSgpe3RoaXMuX2NsZWFyVGltZW91dCgpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKSYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKSxzdXBlci5kaXNwb3NlKCl9X2dldENvbmZpZyh0KXtyZXR1cm4gdD17Li4uaWksLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSwuLi5cIm9iamVjdFwiPT10eXBlb2YgdCYmdD90Ont9fSxsKFwidG9hc3RcIix0LHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpLHR9X21heWJlU2NoZWR1bGVIaWRlKCl7dGhpcy5fY29uZmlnLmF1dG9oaWRlJiYodGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbnx8dGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbnx8KHRoaXMuX3RpbWVvdXQ9c2V0VGltZW91dCgoKT0+e3RoaXMuaGlkZSgpfSx0aGlzLl9jb25maWcuZGVsYXkpKSl9X29uSW50ZXJhY3Rpb24odCxlKXtzd2l0Y2godC50eXBlKXtjYXNlXCJtb3VzZW92ZXJcIjpjYXNlXCJtb3VzZW91dFwiOnRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb249ZTticmVhaztjYXNlXCJmb2N1c2luXCI6Y2FzZVwiZm9jdXNvdXRcIjp0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uPWV9aWYoZSlyZXR1cm4gdm9pZCB0aGlzLl9jbGVhclRpbWVvdXQoKTtjb25zdCBpPXQucmVsYXRlZFRhcmdldDt0aGlzLl9lbGVtZW50PT09aXx8dGhpcy5fZWxlbWVudC5jb250YWlucyhpKXx8dGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKX1fc2V0TGlzdGVuZXJzKCl7UC5vbih0aGlzLl9lbGVtZW50LFwiY2xpY2suZGlzbWlzcy5icy50b2FzdFwiLCdbZGF0YS1icy1kaXNtaXNzPVwidG9hc3RcIl0nLCgpPT50aGlzLmhpZGUoKSksUC5vbih0aGlzLl9lbGVtZW50LFwibW91c2VvdmVyLmJzLnRvYXN0XCIsdD0+dGhpcy5fb25JbnRlcmFjdGlvbih0LCEwKSksUC5vbih0aGlzLl9lbGVtZW50LFwibW91c2VvdXQuYnMudG9hc3RcIix0PT50aGlzLl9vbkludGVyYWN0aW9uKHQsITEpKSxQLm9uKHRoaXMuX2VsZW1lbnQsXCJmb2N1c2luLmJzLnRvYXN0XCIsdD0+dGhpcy5fb25JbnRlcmFjdGlvbih0LCEwKSksUC5vbih0aGlzLl9lbGVtZW50LFwiZm9jdXNvdXQuYnMudG9hc3RcIix0PT50aGlzLl9vbkludGVyYWN0aW9uKHQsITEpKX1fY2xlYXJUaW1lb3V0KCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLHRoaXMuX3RpbWVvdXQ9bnVsbH1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1uaS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSh0aGlzKX19KSl9fXJldHVybiBfKG5pKSx7QWxlcnQ6VyxCdXR0b246cSxDYXJvdXNlbDpaLENvbGxhcHNlOmV0LERyb3Bkb3duOkFlLE1vZGFsOkRlLE9mZmNhbnZhczpOZSxQb3BvdmVyOlFlLFNjcm9sbFNweTpKZSxUYWI6dGksVG9hc3Q6bmksVG9vbHRpcDpGZX19KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAuYnVuZGxlLm1pbi5qcy5tYXAiXSwibmFtZXMiOlsidCIsImUiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJib290c3RyYXAiLCJmaW5kIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjb25jYXQiLCJFbGVtZW50IiwicHJvdG90eXBlIiwicXVlcnlTZWxlY3RvckFsbCIsImNhbGwiLCJmaW5kT25lIiwicXVlcnlTZWxlY3RvciIsImNoaWxkcmVuIiwiZmlsdGVyIiwibWF0Y2hlcyIsInBhcmVudHMiLCJpIiwibiIsInBhcmVudE5vZGUiLCJub2RlVHlwZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJwdXNoIiwicHJldiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRBdHRyaWJ1dGUiLCJpbmNsdWRlcyIsInN0YXJ0c1dpdGgiLCJzcGxpdCIsInRyaW0iLCJzIiwibyIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsInIiLCJqcXVlcnkiLCJhIiwibGVuZ3RoIiwibCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwidG9TdHJpbmciLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiUmVnRXhwIiwidGVzdCIsIlR5cGVFcnJvciIsInRvVXBwZXJDYXNlIiwiYyIsImdldENsaWVudFJlY3RzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJoIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJkaXNhYmxlZCIsImhhc0F0dHJpYnV0ZSIsImQiLCJhdHRhY2hTaGFkb3ciLCJnZXRSb290Tm9kZSIsIlNoYWRvd1Jvb3QiLCJ1IiwiZiIsIm9mZnNldEhlaWdodCIsInAiLCJqUXVlcnkiLCJ3aW5kb3ciLCJib2R5IiwibSIsImciLCJkaXIiLCJfIiwiTkFNRSIsImZuIiwialF1ZXJ5SW50ZXJmYWNlIiwiQ29uc3RydWN0b3IiLCJub0NvbmZsaWN0IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJiIiwidiIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsIk51bWJlciIsInBhcnNlRmxvYXQiLCJ0YXJnZXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0VGltZW91dCIsInkiLCJpbmRleE9mIiwibWF4IiwibWluIiwidyIsIkUiLCJBIiwiVCIsIk8iLCJDIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJrIiwiTCIsIlNldCIsIngiLCJ1aWRFdmVudCIsIkQiLCJTIiwib3JpZ2luYWxIYW5kbGVyIiwiZGVsZWdhdGlvblNlbGVjdG9yIiwiSSIsIk0iLCJoYXMiLCJOIiwicmVsYXRlZFRhcmdldCIsImRlbGVnYXRlVGFyZ2V0Iiwib25lT2ZmIiwicmVwbGFjZSIsIlAiLCJvZmYiLCJ0eXBlIiwiYXBwbHkiLCJqIiwiQm9vbGVhbiIsIm9uIiwib25lIiwic2xpY2UiLCJ0cmlnZ2VyIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwicHJldmVudERlZmF1bHQiLCJkZWZhdWx0UHJldmVudGVkIiwiSCIsIk1hcCIsIlIiLCJzZXQiLCJzaXplIiwiY29uc29sZSIsImVycm9yIiwiQXJyYXkiLCJmcm9tIiwicmVtb3ZlIiwiZGVsZXRlIiwiQiIsImRpc3Bvc2UiLCJfZWxlbWVudCIsImNvbnN0cnVjdG9yIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX3F1ZXVlQ2FsbGJhY2siLCJnZXRJbnN0YW5jZSIsImdldE9yQ3JlYXRlSW5zdGFuY2UiLCJWRVJTSU9OIiwiRXJyb3IiLCJXIiwiY2xvc2UiLCJfZ2V0Um9vdEVsZW1lbnQiLCJfdHJpZ2dlckNsb3NlRXZlbnQiLCJfcmVtb3ZlRWxlbWVudCIsImNsb3Nlc3QiLCJfZGVzdHJveUVsZW1lbnQiLCJlYWNoIiwiaGFuZGxlRGlzbWlzcyIsInEiLCJ0b2dnbGUiLCJzZXRBdHRyaWJ1dGUiLCJ6IiwiJCIsIlUiLCJzZXREYXRhQXR0cmlidXRlIiwicmVtb3ZlRGF0YUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImdldERhdGFBdHRyaWJ1dGVzIiwiZGF0YXNldCIsImNoYXJBdCIsImdldERhdGFBdHRyaWJ1dGUiLCJvZmZzZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJzY3JvbGxUb3AiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInBvc2l0aW9uIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsIkYiLCJpbnRlcnZhbCIsImtleWJvYXJkIiwic2xpZGUiLCJwYXVzZSIsIndyYXAiLCJ0b3VjaCIsIlYiLCJLIiwiWCIsIlkiLCJRIiwiRyIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJaIiwiRGVmYXVsdCIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImhpZGRlbiIsIl9pc1BhdXNlZCIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsIl9pbnRlcnZhbCIsIl9jb25maWciLCJfdXBkYXRlSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsImJpbmQiLCJ0byIsIl9hY3RpdmVFbGVtZW50IiwiX2dldEl0ZW1pbmRleCIsIl9pdGVtcyIsIl9pc1NsaWRpbmciLCJfZ2V0Q29uZmlnIiwiX2hhbmRsZVN3aXBlIiwiYWJzIiwidG91Y2hEZWx0YVgiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJfa2V5ZG93biIsIl90b3VjaFN1cHBvcnRlZCIsIl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzIiwiX3BvaW50ZXJFdmVudCIsInBvaW50ZXJUeXBlIiwidG91Y2hTdGFydFgiLCJ0b3VjaGVzIiwiY2xpZW50WCIsInRvdWNoVGltZW91dCIsImNsZWFyVGltZW91dCIsImFkZCIsInRhZ05hbWUiLCJrZXkiLCJfZ2V0SXRlbUJ5T3JkZXIiLCJfdHJpZ2dlclNsaWRlRXZlbnQiLCJkaXJlY3Rpb24iLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsIl9pbmRpY2F0b3JzRWxlbWVudCIsInBhcnNlSW50IiwiZGVmYXVsdEludGVydmFsIiwiX2RpcmVjdGlvblRvT3JkZXIiLCJfb3JkZXJUb0RpcmVjdGlvbiIsImNhcm91c2VsSW50ZXJmYWNlIiwicmlkZSIsImRhdGFBcGlDbGlja0hhbmRsZXIiLCJuYXZpZ2F0b3IiLCJtYXhUb3VjaFBvaW50cyIsIlBvaW50ZXJFdmVudCIsIkoiLCJwYXJlbnQiLCJ0dCIsImV0IiwiaGlkZSIsInNob3ciLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3BhcmVudCIsIl9zZWxlY3RvciIsImNvbGxhcHNlSW50ZXJmYWNlIiwiX2dldERpbWVuc2lvbiIsInN0eWxlIiwiX3RyaWdnZXJBcnJheSIsInNldFRyYW5zaXRpb25pbmciLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsImlkIiwiaXQiLCJudCIsInN0Iiwib3QiLCJydCIsImF0IiwicmVkdWNlIiwibHQiLCJjdCIsImh0Iiwibm9kZU5hbWUiLCJkdCIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInV0IiwiZnQiLCJIVE1MRWxlbWVudCIsInB0IiwibXQiLCJuYW1lIiwiZW5hYmxlZCIsInBoYXNlIiwic3RhdGUiLCJlbGVtZW50cyIsInN0eWxlcyIsImF0dHJpYnV0ZXMiLCJhc3NpZ24iLCJlZmZlY3QiLCJwb3BwZXIiLCJvcHRpb25zIiwic3RyYXRlZ3kiLCJtYXJnaW4iLCJhcnJvdyIsInJlZmVyZW5jZSIsImhhc093blByb3BlcnR5IiwicmVxdWlyZXMiLCJndCIsIl90Iiwid2lkdGgiLCJoZWlnaHQiLCJyaWdodCIsImJvdHRvbSIsImJ0Iiwib2Zmc2V0V2lkdGgiLCJ2dCIsImlzU2FtZU5vZGUiLCJob3N0IiwieXQiLCJ3dCIsIkV0IiwiQXQiLCJhc3NpZ25lZFNsb3QiLCJUdCIsIm9mZnNldFBhcmVudCIsIk90IiwidXNlckFnZW50IiwidHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJjb250YWluIiwid2lsbENoYW5nZSIsIkN0Iiwia3QiLCJMdCIsInh0Iiwicm91bmQiLCJEdCIsIlN0IiwiSXQiLCJOdCIsIm1vZGlmaWVyc0RhdGEiLCJwb3BwZXJPZmZzZXRzIiwicGxhY2VtZW50IiwicmVjdHMiLCJwYWRkaW5nIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjZW50ZXJPZmZzZXQiLCJlbGVtZW50IiwicmVxdWlyZXNJZkV4aXN0cyIsImp0IiwiTXQiLCJwb3BwZXJSZWN0Iiwib2Zmc2V0cyIsImdwdUFjY2VsZXJhdGlvbiIsImFkYXB0aXZlIiwicm91bmRPZmZzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIlB0IiwiZGF0YSIsIkh0IiwicGFzc2l2ZSIsIlJ0IiwiaW5zdGFuY2UiLCJzY3JvbGwiLCJyZXNpemUiLCJzY3JvbGxQYXJlbnRzIiwidXBkYXRlIiwiQnQiLCJXdCIsInF0Iiwic3RhcnQiLCJlbmQiLCJ6dCIsIiR0IiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsIlV0IiwiRnQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsIlZ0IiwidmlzdWFsVmlld3BvcnQiLCJLdCIsIlh0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwiWXQiLCJRdCIsIkd0IiwiYm91bmRhcnkiLCJyb290Qm91bmRhcnkiLCJlbGVtZW50Q29udGV4dCIsImFsdEJvdW5kYXJ5IiwiY29udGV4dEVsZW1lbnQiLCJadCIsImZsaXBWYXJpYXRpb25zIiwiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwic29ydCIsIkp0IiwiX3NraXAiLCJtYWluQXhpcyIsImFsdEF4aXMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJldmVyeSIsInJlc2V0IiwidGUiLCJlZSIsInNvbWUiLCJpZSIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsInBvcHBlckVzY2FwZU9mZnNldHMiLCJpc1JlZmVyZW5jZUhpZGRlbiIsImhhc1BvcHBlckVzY2FwZWQiLCJuZSIsInNlIiwib2UiLCJ0ZXRoZXIiLCJ0ZXRoZXJPZmZzZXQiLCJyZSIsImFlIiwibW9kaWZpZXJzIiwibGUiLCJhcmd1bWVudHMiLCJjZSIsImRlZmF1bHRNb2RpZmllcnMiLCJkZWZhdWx0T3B0aW9ucyIsIm9yZGVyZWRNb2RpZmllcnMiLCJzZXRPcHRpb25zIiwibWFwIiwiZm9yY2VVcGRhdGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsImhlIiwiZGUiLCJ1ZSIsImZlIiwiZnJlZXplIiwiX19wcm90b19fIiwicG9wcGVyR2VuZXJhdG9yIiwiZGV0ZWN0T3ZlcmZsb3ciLCJjcmVhdGVQb3BwZXJCYXNlIiwiY3JlYXRlUG9wcGVyIiwiY3JlYXRlUG9wcGVyTGl0ZSIsImF1dG8iLCJiYXNlUGxhY2VtZW50cyIsImNsaXBwaW5nUGFyZW50cyIsInZpZXdwb3J0IiwidmFyaWF0aW9uUGxhY2VtZW50cyIsInBsYWNlbWVudHMiLCJiZWZvcmVSZWFkIiwicmVhZCIsImFmdGVyUmVhZCIsImJlZm9yZU1haW4iLCJtYWluIiwiYWZ0ZXJNYWluIiwiYmVmb3JlV3JpdGUiLCJ3cml0ZSIsImFmdGVyV3JpdGUiLCJtb2RpZmllclBoYXNlcyIsImFwcGx5U3R5bGVzIiwiY29tcHV0ZVN0eWxlcyIsImV2ZW50TGlzdGVuZXJzIiwiZmxpcCIsInBlIiwibWUiLCJnZSIsIl9lIiwiYmUiLCJ2ZSIsInllIiwid2UiLCJkaXNwbGF5IiwicG9wcGVyQ29uZmlnIiwiYXV0b0Nsb3NlIiwiRWUiLCJBZSIsIkRlZmF1bHRUeXBlIiwiX21lbnUiLCJnZXRQYXJlbnRGcm9tRWxlbWVudCIsIl9pbk5hdmJhciIsIl9nZXRQb3BwZXJDb25maWciLCJfcG9wcGVyIiwiZm9jdXMiLCJfY29tcGxldGVIaWRlIiwiX2RldGVjdE5hdmJhciIsIl9nZXRNZW51RWxlbWVudCIsIl9nZXRQbGFjZW1lbnQiLCJfZ2V0T2Zmc2V0IiwiX3NlbGVjdE1lbnVJdGVtIiwiZHJvcGRvd25JbnRlcmZhY2UiLCJjbGVhck1lbnVzIiwiYnV0dG9uIiwiY29tcG9zZWRQYXRoIiwiY2xpY2tFdmVudCIsImRhdGFBcGlLZXlkb3duSGFuZGxlciIsInN0b3BQcm9wYWdhdGlvbiIsImNsaWNrIiwiVGUiLCJnZXRXaWR0aCIsImlubmVyV2lkdGgiLCJfZGlzYWJsZU92ZXJGbG93IiwiX3NldEVsZW1lbnRBdHRyaWJ1dGVzIiwiX3NhdmVJbml0aWFsQXR0cmlidXRlIiwiX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2siLCJfcmVzZXRFbGVtZW50QXR0cmlidXRlcyIsInJlbW92ZVByb3BlcnR5IiwiaXNPdmVyZmxvd2luZyIsIk9lIiwiaXNWaXNpYmxlIiwiaXNBbmltYXRlZCIsInJvb3RFbGVtZW50IiwiY2xpY2tDYWxsYmFjayIsIkNlIiwia2UiLCJfYXBwZW5kIiwiX2dldEVsZW1lbnQiLCJfZW11bGF0ZUFuaW1hdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJfaXNBcHBlbmRlZCIsImFwcGVuZENoaWxkIiwiTGUiLCJiYWNrZHJvcCIsInhlIiwiRGUiLCJfaXNTaG93biIsIl9pc0FuaW1hdGVkIiwiX3Njcm9sbEJhciIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfZGlhbG9nIiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwiX2hpZGVNb2RhbCIsIl9iYWNrZHJvcCIsImhhbmRsZVVwZGF0ZSIsIl9pbml0aWFsaXplQmFja0Ryb3AiLCJfZW5mb3JjZUZvY3VzIiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJfcmVzZXRBZGp1c3RtZW50cyIsImN1cnJlbnRUYXJnZXQiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIlNlIiwiSWUiLCJOZSIsInZpc2liaWxpdHkiLCJfZW5mb3JjZUZvY3VzT25FbGVtZW50IiwiYmx1ciIsImplIiwiTWUiLCJQZSIsIkhlIiwibm9kZVZhbHVlIiwiUmUiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJpbm5lckhUTUwiLCJCZSIsIldlIiwicWUiLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwic2VsZWN0b3IiLCJjb250YWluZXIiLCJjdXN0b21DbGFzcyIsInNhbml0aXplIiwic2FuaXRpemVGbiIsImFsbG93TGlzdCIsInplIiwiQVVUTyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsIiRlIiwiYXJlYSIsImJyIiwiY29sIiwiY29kZSIsImRpdiIsImVtIiwiaHIiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJpbWciLCJsaSIsIm9sIiwicHJlIiwic21hbGwiLCJzcGFuIiwic3ViIiwic3VwIiwic3Ryb25nIiwidWwiLCJVZSIsIkhJREUiLCJISURERU4iLCJTSE9XIiwiU0hPV04iLCJJTlNFUlRFRCIsIkNMSUNLIiwiRk9DVVNJTiIsIkZPQ1VTT1VUIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJGZSIsImVuYWJsZSIsIl9pc0VuYWJsZWQiLCJkaXNhYmxlIiwidG9nZ2xlRW5hYmxlZCIsIl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQiLCJfYWN0aXZlVHJpZ2dlciIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsIl90aW1lb3V0IiwiX2hpZGVNb2RhbEhhbmRsZXIiLCJ0aXAiLCJpc1dpdGhDb250ZW50Iiwic2V0Q29udGVudCIsIl9nZXRBdHRhY2htZW50IiwiX2FkZEF0dGFjaG1lbnRDbGFzcyIsIl9ob3ZlclN0YXRlIiwiaG92ZXIiLCJfY2xlYW5UaXBDbGFzcyIsImdldFRpdGxlIiwic2V0RWxlbWVudENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInVwZGF0ZUF0dGFjaG1lbnQiLCJfZ2V0RGVsZWdhdGVDb25maWciLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwiX3NldExpc3RlbmVycyIsIl9maXhUaXRsZSIsImNvbnRlbnQiLCJWZSIsIktlIiwiWGUiLCJZZSIsIlFlIiwiX2dldENvbnRlbnQiLCJHZSIsIm1ldGhvZCIsIlplIiwiSmUiLCJyZWZyZXNoIiwiX3Njcm9sbEVsZW1lbnQiLCJfZ2V0U2Nyb2xsVG9wIiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9zY3JvbGxIZWlnaHQiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwiX2dldE9mZnNldEhlaWdodCIsImlubmVySGVpZ2h0IiwiX3Byb2Nlc3MiLCJfYWN0aXZlVGFyZ2V0IiwiX2FjdGl2YXRlIiwiX2NsZWFyIiwiam9pbiIsInRpIiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImVpIiwiYXV0b2hpZGUiLCJpaSIsIm5pIiwiX2NsZWFyVGltZW91dCIsIl9tYXliZVNjaGVkdWxlSGlkZSIsIl9oYXNNb3VzZUludGVyYWN0aW9uIiwiX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24iLCJfb25JbnRlcmFjdGlvbiIsIkFsZXJ0IiwiQnV0dG9uIiwiQ2Fyb3VzZWwiLCJDb2xsYXBzZSIsIkRyb3Bkb3duIiwiTW9kYWwiLCJPZmZjYW52YXMiLCJQb3BvdmVyIiwiU2Nyb2xsU3B5IiwiVGFiIiwiVG9hc3QiLCJUb29sdGlwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/assets/js/bootstrap.bundle.min.js\n"));

/***/ })

}]);